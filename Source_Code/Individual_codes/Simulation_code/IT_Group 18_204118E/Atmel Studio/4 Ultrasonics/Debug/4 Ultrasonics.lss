
4 Ultrasonics.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000adc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000adc  00000b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800072  00800072  00000b82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000116f  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000744  00000000  00000000  00001def  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000087d  00000000  00000000  00002533  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00002db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004eb  00000000  00000000  00002ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a04  00000000  00000000  000033bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003dc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 02 	call	0x4a2	; 0x4a2 <main>
  8a:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
	_delay_ms(2);
}

void LCD_Command(unsigned char cmnd)
{
	PORTB = (PORTB & 0x0F) | (cmnd & 0xF0);			// Send upper nibble
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	98 bb       	out	0x18, r25	; 24
	PORTB &= ~(1<<RS);									// RS=0, command reg.
  9e:	98 b3       	in	r25, 0x18	; 24
  a0:	9e 7f       	andi	r25, 0xFE	; 254
  a2:	98 bb       	out	0x18, r25	; 24
	PORTB |= (1<<EN);									// Enable=1
  a4:	98 b3       	in	r25, 0x18	; 24
  a6:	92 60       	ori	r25, 0x02	; 2
  a8:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	35 e0       	ldi	r19, 0x05	; 5
  ac:	3a 95       	dec	r19
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_Command+0x1a>
  b0:	00 00       	nop
	_delay_us(1);
	PORTB &= ~(1<<EN);									// Enable=0
  b2:	98 b3       	in	r25, 0x18	; 24
  b4:	9d 7f       	andi	r25, 0xFD	; 253
  b6:	98 bb       	out	0x18, r25	; 24
  b8:	ef e1       	ldi	r30, 0x1F	; 31
  ba:	f3 e0       	ldi	r31, 0x03	; 3
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_Command+0x2a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_Command+0x30>
  c2:	00 00       	nop

	_delay_us(200);

	PORTB = (PORTB & 0x0F) | (cmnd << 4);				// Send lower nibble
  c4:	28 b3       	in	r18, 0x18	; 24
  c6:	f0 e1       	ldi	r31, 0x10	; 16
  c8:	8f 9f       	mul	r24, r31
  ca:	c0 01       	movw	r24, r0
  cc:	11 24       	eor	r1, r1
  ce:	92 2f       	mov	r25, r18
  d0:	9f 70       	andi	r25, 0x0F	; 15
  d2:	89 2b       	or	r24, r25
  d4:	88 bb       	out	0x18, r24	; 24
	PORTB |= (1<<EN);
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	88 bb       	out	0x18, r24	; 24
  dc:	35 e0       	ldi	r19, 0x05	; 5
  de:	3a 95       	dec	r19
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Command+0x4c>
  e2:	00 00       	nop
	_delay_us(1);
	PORTB &= ~ (1<<EN);
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	8f e3       	ldi	r24, 0x3F	; 63
  ec:	9f e1       	ldi	r25, 0x1F	; 31
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Command+0x5c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_Command+0x62>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <LCD_Init>:
void LCD_SetCursor(unsigned char, unsigned char);


void LCD_Init (void)
{
	DDRB = 0b11111111;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	8f e5       	ldi	r24, 0x5F	; 95
  fe:	9a ee       	ldi	r25, 0xEA	; 234
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_Init+0x8>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_Init+0xe>
 106:	00 00       	nop
	_delay_ms(15);
	LCD_Command(0x02);          // 4 Bit Mode
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x28);          // 2 lines, 5x8 matrix,4-bit mode
 10e:	88 e2       	ldi	r24, 0x28	; 40
 110:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x0c);          // Display on, cursor off
 114:	8c e0       	ldi	r24, 0x0C	; 12
 116:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x06);          // Shift the cursor to right
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x01);          // Clear the display
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 126:	8f e3       	ldi	r24, 0x3F	; 63
 128:	9f e1       	ldi	r25, 0x1F	; 31
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Init+0x32>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Init+0x38>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <LCD_Print>:
	PORTB &= ~ (1<<EN);
	_delay_ms(2);
}

void LCD_Print (char *str)
{
 134:	fc 01       	movw	r30, r24
	int i;
	for(i=0; str[i]!=0; i++)
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	34 c0       	rjmp	.+104    	; 0x1a4 <LCD_Print+0x70>
	{
		PORTB = (PORTB & 0x0F) | (str[i] & 0xF0);			// Send upper nibble
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	90 7f       	andi	r25, 0xF0	; 240
 142:	98 2b       	or	r25, r24
 144:	98 bb       	out	0x18, r25	; 24
		PORTB |= (1<<RS);									// RS=1, data reg.
 146:	88 b3       	in	r24, 0x18	; 24
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	88 bb       	out	0x18, r24	; 24
		PORTB|= (1<<EN);										// Enable=1
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	8a 95       	dec	r24
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Print+0x20>
 158:	00 00       	nop
		_delay_us(1);
		PORTB &= ~(1<<EN);									// Enable=0
 15a:	88 b3       	in	r24, 0x18	; 24
 15c:	8d 7f       	andi	r24, 0xFD	; 253
 15e:	88 bb       	out	0x18, r24	; 24
 160:	8f e1       	ldi	r24, 0x1F	; 31
 162:	93 e0       	ldi	r25, 0x03	; 3
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_Print+0x30>
 168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_Print+0x36>
 16a:	00 00       	nop
		
		_delay_us(200);
		
		PORTB = (PORTB & 0x0F) | (str[i] << 4);			// Send lower nibble
 16c:	48 b3       	in	r20, 0x18	; 24
 16e:	9c 91       	ld	r25, X
 170:	80 e1       	ldi	r24, 0x10	; 16
 172:	98 9f       	mul	r25, r24
 174:	90 01       	movw	r18, r0
 176:	11 24       	eor	r1, r1
 178:	94 2f       	mov	r25, r20
 17a:	9f 70       	andi	r25, 0x0F	; 15
 17c:	29 2b       	or	r18, r25
 17e:	28 bb       	out	0x18, r18	; 24
		PORTB |= (1<<EN);
 180:	98 b3       	in	r25, 0x18	; 24
 182:	92 60       	ori	r25, 0x02	; 2
 184:	98 bb       	out	0x18, r25	; 24
 186:	95 e0       	ldi	r25, 0x05	; 5
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_Print+0x54>
 18c:	00 00       	nop
		_delay_us(1);
		PORTB &= ~(1<<EN);
 18e:	98 b3       	in	r25, 0x18	; 24
 190:	9d 7f       	andi	r25, 0xFD	; 253
 192:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	9f e1       	ldi	r25, 0x1F	; 31
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Print+0x64>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Print+0x6a>
 19e:	00 00       	nop
}

void LCD_Print (char *str)
{
	int i;
	for(i=0; str[i]!=0; i++)
 1a0:	6f 5f       	subi	r22, 0xFF	; 255
 1a2:	7f 4f       	sbci	r23, 0xFF	; 255
 1a4:	df 01       	movw	r26, r30
 1a6:	a6 0f       	add	r26, r22
 1a8:	b7 1f       	adc	r27, r23
 1aa:	9c 91       	ld	r25, X
 1ac:	91 11       	cpse	r25, r1
 1ae:	c6 cf       	rjmp	.-116    	; 0x13c <LCD_Print+0x8>
		PORTB |= (1<<EN);
		_delay_us(1);
		PORTB &= ~(1<<EN);
		_delay_ms(2);
	}
}
 1b0:	08 95       	ret

000001b2 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);         // Clear the display
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1b8:	8f e3       	ldi	r24, 0x3F	; 63
 1ba:	9f e1       	ldi	r25, 0x1F	; 31
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Clear+0xa>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Clear+0x10>
 1c2:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);         // Force the cursor to the beginning of the 1st line
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1ca:	08 95       	ret

000001cc <LCD_SetCursor>:
}

void LCD_SetCursor(unsigned char x, unsigned char y)			// x=column y=row
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <LCD_SetCursor+0x6>
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
	unsigned char adr[] = {0x80, 0xC0};
 1d6:	90 e8       	ldi	r25, 0x80	; 128
 1d8:	99 83       	std	Y+1, r25	; 0x01
 1da:	90 ec       	ldi	r25, 0xC0	; 192
 1dc:	9a 83       	std	Y+2, r25	; 0x02
	LCD_Command(adr[y-1] + x-1);
 1de:	e6 2f       	mov	r30, r22
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	2c 0f       	add	r18, r28
 1ea:	3d 1f       	adc	r19, r29
 1ec:	e2 0f       	add	r30, r18
 1ee:	f3 1f       	adc	r31, r19
 1f0:	90 81       	ld	r25, Z
 1f2:	89 0f       	add	r24, r25
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	8f e8       	ldi	r24, 0x8F	; 143
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_SetCursor+0x32>
 202:	00 c0       	rjmp	.+0      	; 0x204 <LCD_SetCursor+0x38>
 204:	00 00       	nop
	_delay_us(100);
}
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <HCSR04Init>:
uint16_t GetPulseWidth3();
uint16_t GetPulseWidth4();

void HCSR04Init()						// Ultrasonic sensor initialization
{
	DDRA|=(1<<US1_TRIG_POS);			// Trigger pin as output
 210:	8a b3       	in	r24, 0x1a	; 26
 212:	81 60       	ori	r24, 0x01	; 1
 214:	8a bb       	out	0x1a, r24	; 26
	DDRA|=(1<<US2_TRIG_POS);
 216:	8a b3       	in	r24, 0x1a	; 26
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	8a bb       	out	0x1a, r24	; 26
	DDRA|=(1<<US3_TRIG_POS);			// Trigger pin as output
 21c:	8a b3       	in	r24, 0x1a	; 26
 21e:	84 60       	ori	r24, 0x04	; 4
 220:	8a bb       	out	0x1a, r24	; 26
	DDRA|=(1<<US4_TRIG_POS);
 222:	8a b3       	in	r24, 0x1a	; 26
 224:	88 60       	ori	r24, 0x08	; 8
 226:	8a bb       	out	0x1a, r24	; 26
 228:	08 95       	ret

0000022a <HCSR04Trigger1>:
}

void HCSR04Trigger1()					// Trigger pulse
{
	PORTA |= (1<<US1_TRIG_POS);		//high
 22a:	8b b3       	in	r24, 0x1b	; 27
 22c:	81 60       	ori	r24, 0x01	; 1
 22e:	8b bb       	out	0x1b, r24	; 27
 230:	80 e5       	ldi	r24, 0x50	; 80
 232:	8a 95       	dec	r24
 234:	f1 f7       	brne	.-4      	; 0x232 <HCSR04Trigger1+0x8>
	_delay_us(15);						//wait 15uS
	PORTA &= ~(1<<US1_TRIG_POS);		//low
 236:	8b b3       	in	r24, 0x1b	; 27
 238:	8e 7f       	andi	r24, 0xFE	; 254
 23a:	8b bb       	out	0x1b, r24	; 27
 23c:	08 95       	ret

0000023e <HCSR04Trigger2>:
}

void HCSR04Trigger2()					// Trigger pulse
{
	PORTA |= (1<<US2_TRIG_POS);		//high
 23e:	8b b3       	in	r24, 0x1b	; 27
 240:	82 60       	ori	r24, 0x02	; 2
 242:	8b bb       	out	0x1b, r24	; 27
 244:	80 e5       	ldi	r24, 0x50	; 80
 246:	8a 95       	dec	r24
 248:	f1 f7       	brne	.-4      	; 0x246 <HCSR04Trigger2+0x8>
	_delay_us(15);						//wait 15uS
	PORTA &= ~(1<<US2_TRIG_POS);		//low
 24a:	8b b3       	in	r24, 0x1b	; 27
 24c:	8d 7f       	andi	r24, 0xFD	; 253
 24e:	8b bb       	out	0x1b, r24	; 27
 250:	08 95       	ret

00000252 <GetPulseWidth1>:

uint16_t GetPulseWidth1()				// Measure the pulse duration
{
	uint32_t i,result;

	for(i=0;i<600000;i++)				// Checking whether ultrasonic sensor is working
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	dc 01       	movw	r26, r24
 258:	05 c0       	rjmp	.+10     	; 0x264 <GetPulseWidth1+0x12>
	{
		if(!(PINA & (1<<US1_ECHO_POS)))
 25a:	ce 99       	sbic	0x19, 6	; 25
 25c:	0a c0       	rjmp	.+20     	; 0x272 <GetPulseWidth1+0x20>

uint16_t GetPulseWidth1()				// Measure the pulse duration
{
	uint32_t i,result;

	for(i=0;i<600000;i++)				// Checking whether ultrasonic sensor is working
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	a1 1d       	adc	r26, r1
 262:	b1 1d       	adc	r27, r1
 264:	80 3c       	cpi	r24, 0xC0	; 192
 266:	27 e2       	ldi	r18, 0x27	; 39
 268:	92 07       	cpc	r25, r18
 26a:	29 e0       	ldi	r18, 0x09	; 9
 26c:	a2 07       	cpc	r26, r18
 26e:	b1 05       	cpc	r27, r1
 270:	a0 f3       	brcs	.-24     	; 0x25a <GetPulseWidth1+0x8>
		else
		break;							//High edge detected
	}

	
	TCCR1A=0X00;
 272:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);					// Resolution of the timer
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;							// Start counting time
 278:	1d bc       	out	0x2d, r1	; 45
 27a:	1c bc       	out	0x2c, r1	; 44

	for(i=0;i<600000;i++)				// Almost 40 milliseconds
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	dc 01       	movw	r26, r24
 282:	0a c0       	rjmp	.+20     	; 0x298 <GetPulseWidth1+0x46>
	{
		if(PINA & (1<<US1_ECHO_POS))
 284:	ce 9b       	sbis	0x19, 6	; 25
 286:	0f c0       	rjmp	.+30     	; 0x2a6 <GetPulseWidth1+0x54>
		{
			if(TCNT1 > 60000)
 288:	2c b5       	in	r18, 0x2c	; 44
 28a:	3d b5       	in	r19, 0x2d	; 45
 28c:	21 36       	cpi	r18, 0x61	; 97
 28e:	3a 4e       	sbci	r19, 0xEA	; 234
 290:	50 f4       	brcc	.+20     	; 0x2a6 <GetPulseWidth1+0x54>
	
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);					// Resolution of the timer
	TCNT1=0x00;							// Start counting time

	for(i=0;i<600000;i++)				// Almost 40 milliseconds
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	a1 1d       	adc	r26, r1
 296:	b1 1d       	adc	r27, r1
 298:	80 3c       	cpi	r24, 0xC0	; 192
 29a:	27 e2       	ldi	r18, 0x27	; 39
 29c:	92 07       	cpc	r25, r18
 29e:	29 e0       	ldi	r18, 0x09	; 9
 2a0:	a2 07       	cpc	r26, r18
 2a2:	b1 05       	cpc	r27, r1
 2a4:	78 f3       	brcs	.-34     	; 0x284 <GetPulseWidth1+0x32>
		}
		else
		break;
	}

	if(i==600000)
 2a6:	80 3c       	cpi	r24, 0xC0	; 192
 2a8:	97 42       	sbci	r25, 0x27	; 39
 2aa:	a9 40       	sbci	r26, 0x09	; 9
 2ac:	b1 05       	cpc	r27, r1
 2ae:	81 f0       	breq	.+32     	; 0x2d0 <GetPulseWidth1+0x7e>
	return US_NO_OBSTACLE;				//Time out

	result=TCNT1;						//Falling edge found
 2b0:	8c b5       	in	r24, 0x2c	; 44
 2b2:	9d b5       	in	r25, 0x2d	; 45
 2b4:	a0 e0       	ldi	r26, 0x00	; 0
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
	
	TCCR1B=0x00;						//Stop Timer
 2b8:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
 2ba:	81 36       	cpi	r24, 0x61	; 97
 2bc:	2a ee       	ldi	r18, 0xEA	; 234
 2be:	92 07       	cpc	r25, r18
 2c0:	a1 05       	cpc	r26, r1
 2c2:	b1 05       	cpc	r27, r1
 2c4:	40 f4       	brcc	.+16     	; 0x2d6 <GetPulseWidth1+0x84>
	return US_NO_OBSTACLE;				//No obstacle
	else
	return (result>>1);
 2c6:	b6 95       	lsr	r27
 2c8:	a7 95       	ror	r26
 2ca:	97 95       	ror	r25
 2cc:	87 95       	ror	r24
 2ce:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;				//Time out
 2d0:	8e ef       	ldi	r24, 0xFE	; 254
 2d2:	9f ef       	ldi	r25, 0xFF	; 255
 2d4:	08 95       	ret
	result=TCNT1;						//Falling edge found
	
	TCCR1B=0x00;						//Stop Timer

	if(result > 60000)
	return US_NO_OBSTACLE;				//No obstacle
 2d6:	8e ef       	ldi	r24, 0xFE	; 254
 2d8:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
 2da:	08 95       	ret

000002dc <GetPulseWidth2>:

uint16_t GetPulseWidth2()				// Measure the pulse duration
{
	uint32_t i,result;

	for(i=0;i<600000;i++)				// Checking whether ultrasonic sensor is working
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	dc 01       	movw	r26, r24
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <GetPulseWidth2+0x12>
	{
		if(!(PINB & (1<<US2_ECHO_POS)))
 2e4:	b2 99       	sbic	0x16, 2	; 22
 2e6:	0a c0       	rjmp	.+20     	; 0x2fc <GetPulseWidth2+0x20>

uint16_t GetPulseWidth2()				// Measure the pulse duration
{
	uint32_t i,result;

	for(i=0;i<600000;i++)				// Checking whether ultrasonic sensor is working
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	a1 1d       	adc	r26, r1
 2ec:	b1 1d       	adc	r27, r1
 2ee:	80 3c       	cpi	r24, 0xC0	; 192
 2f0:	27 e2       	ldi	r18, 0x27	; 39
 2f2:	92 07       	cpc	r25, r18
 2f4:	29 e0       	ldi	r18, 0x09	; 9
 2f6:	a2 07       	cpc	r26, r18
 2f8:	b1 05       	cpc	r27, r1
 2fa:	a0 f3       	brcs	.-24     	; 0x2e4 <GetPulseWidth2+0x8>
		else
		break;							//High edge detected
	}

	
	TCCR1A=0X00;
 2fc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);					// Resolution of the timer
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;							// Start counting time
 302:	1d bc       	out	0x2d, r1	; 45
 304:	1c bc       	out	0x2c, r1	; 44

	for(i=0;i<600000;i++)				// Almost 40 milliseconds
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	dc 01       	movw	r26, r24
 30c:	0a c0       	rjmp	.+20     	; 0x322 <GetPulseWidth2+0x46>
	{
		if(PINB & (1<<US2_ECHO_POS))
 30e:	b2 9b       	sbis	0x16, 2	; 22
 310:	0f c0       	rjmp	.+30     	; 0x330 <GetPulseWidth2+0x54>
		{
			if(TCNT1 > 60000)
 312:	2c b5       	in	r18, 0x2c	; 44
 314:	3d b5       	in	r19, 0x2d	; 45
 316:	21 36       	cpi	r18, 0x61	; 97
 318:	3a 4e       	sbci	r19, 0xEA	; 234
 31a:	50 f4       	brcc	.+20     	; 0x330 <GetPulseWidth2+0x54>
	
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);					// Resolution of the timer
	TCNT1=0x00;							// Start counting time

	for(i=0;i<600000;i++)				// Almost 40 milliseconds
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	a1 1d       	adc	r26, r1
 320:	b1 1d       	adc	r27, r1
 322:	80 3c       	cpi	r24, 0xC0	; 192
 324:	27 e2       	ldi	r18, 0x27	; 39
 326:	92 07       	cpc	r25, r18
 328:	29 e0       	ldi	r18, 0x09	; 9
 32a:	a2 07       	cpc	r26, r18
 32c:	b1 05       	cpc	r27, r1
 32e:	78 f3       	brcs	.-34     	; 0x30e <GetPulseWidth2+0x32>
		}
		else
		break;
	}

	if(i==600000)
 330:	80 3c       	cpi	r24, 0xC0	; 192
 332:	97 42       	sbci	r25, 0x27	; 39
 334:	a9 40       	sbci	r26, 0x09	; 9
 336:	b1 05       	cpc	r27, r1
 338:	81 f0       	breq	.+32     	; 0x35a <GetPulseWidth2+0x7e>
	return US_NO_OBSTACLE;				//Time out

	result=TCNT1;						//Falling edge found
 33a:	8c b5       	in	r24, 0x2c	; 44
 33c:	9d b5       	in	r25, 0x2d	; 45
 33e:	a0 e0       	ldi	r26, 0x00	; 0
 340:	b0 e0       	ldi	r27, 0x00	; 0
	
	TCCR1B=0x00;						//Stop Timer
 342:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
 344:	81 36       	cpi	r24, 0x61	; 97
 346:	2a ee       	ldi	r18, 0xEA	; 234
 348:	92 07       	cpc	r25, r18
 34a:	a1 05       	cpc	r26, r1
 34c:	b1 05       	cpc	r27, r1
 34e:	40 f4       	brcc	.+16     	; 0x360 <GetPulseWidth2+0x84>
	return US_NO_OBSTACLE;				//No obstacle
	else
	return (result>>1);
 350:	b6 95       	lsr	r27
 352:	a7 95       	ror	r26
 354:	97 95       	ror	r25
 356:	87 95       	ror	r24
 358:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;				//Time out
 35a:	8e ef       	ldi	r24, 0xFE	; 254
 35c:	9f ef       	ldi	r25, 0xFF	; 255
 35e:	08 95       	ret
	result=TCNT1;						//Falling edge found
	
	TCCR1B=0x00;						//Stop Timer

	if(result > 60000)
	return US_NO_OBSTACLE;				//No obstacle
 360:	8e ef       	ldi	r24, 0xFE	; 254
 362:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
 364:	08 95       	ret

00000366 <HCSR04Trigger3>:


void HCSR04Trigger3()					// Trigger pulse
{
	PORTA |= (1<<US3_TRIG_POS);		//high
 366:	8b b3       	in	r24, 0x1b	; 27
 368:	84 60       	ori	r24, 0x04	; 4
 36a:	8b bb       	out	0x1b, r24	; 27
 36c:	80 e5       	ldi	r24, 0x50	; 80
 36e:	8a 95       	dec	r24
 370:	f1 f7       	brne	.-4      	; 0x36e <HCSR04Trigger3+0x8>
	_delay_us(15);						//wait 15uS
	PORTA &= ~(1<<US3_TRIG_POS);		//low
 372:	8b b3       	in	r24, 0x1b	; 27
 374:	8b 7f       	andi	r24, 0xFB	; 251
 376:	8b bb       	out	0x1b, r24	; 27
 378:	08 95       	ret

0000037a <HCSR04Trigger4>:
}

void HCSR04Trigger4()					// Trigger pulse
{
	PORTA |= (1<<US4_TRIG_POS);		//high
 37a:	8b b3       	in	r24, 0x1b	; 27
 37c:	88 60       	ori	r24, 0x08	; 8
 37e:	8b bb       	out	0x1b, r24	; 27
 380:	80 e5       	ldi	r24, 0x50	; 80
 382:	8a 95       	dec	r24
 384:	f1 f7       	brne	.-4      	; 0x382 <HCSR04Trigger4+0x8>
	_delay_us(15);						//wait 15uS
	PORTA &= ~(1<<US4_TRIG_POS);		//low
 386:	8b b3       	in	r24, 0x1b	; 27
 388:	87 7f       	andi	r24, 0xF7	; 247
 38a:	8b bb       	out	0x1b, r24	; 27
 38c:	08 95       	ret

0000038e <GetPulseWidth3>:

uint16_t GetPulseWidth3()				// Measure the pulse duration
{
	uint32_t i,result;

	for(i=0;i<600000;i++)				// Checking whether ultrasonic sensor is working
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	dc 01       	movw	r26, r24
 394:	05 c0       	rjmp	.+10     	; 0x3a0 <GetPulseWidth3+0x12>
	{
		if(!(PINC & (1<<US3_ECHO_POS)))
 396:	9e 99       	sbic	0x13, 6	; 19
 398:	0a c0       	rjmp	.+20     	; 0x3ae <GetPulseWidth3+0x20>

uint16_t GetPulseWidth3()				// Measure the pulse duration
{
	uint32_t i,result;

	for(i=0;i<600000;i++)				// Checking whether ultrasonic sensor is working
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	a1 1d       	adc	r26, r1
 39e:	b1 1d       	adc	r27, r1
 3a0:	80 3c       	cpi	r24, 0xC0	; 192
 3a2:	27 e2       	ldi	r18, 0x27	; 39
 3a4:	92 07       	cpc	r25, r18
 3a6:	29 e0       	ldi	r18, 0x09	; 9
 3a8:	a2 07       	cpc	r26, r18
 3aa:	b1 05       	cpc	r27, r1
 3ac:	a0 f3       	brcs	.-24     	; 0x396 <GetPulseWidth3+0x8>
		else
		break;							//High edge detected
	}

	
	TCCR1A=0X00;
 3ae:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);					// Resolution of the timer
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;							// Start counting time
 3b4:	1d bc       	out	0x2d, r1	; 45
 3b6:	1c bc       	out	0x2c, r1	; 44

	for(i=0;i<600000;i++)				// Almost 40 milliseconds
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	dc 01       	movw	r26, r24
 3be:	0a c0       	rjmp	.+20     	; 0x3d4 <GetPulseWidth3+0x46>
	{
		if(PINC & (1<<US3_ECHO_POS))
 3c0:	9e 9b       	sbis	0x13, 6	; 19
 3c2:	0f c0       	rjmp	.+30     	; 0x3e2 <GetPulseWidth3+0x54>
		{
			if(TCNT1 > 60000)
 3c4:	2c b5       	in	r18, 0x2c	; 44
 3c6:	3d b5       	in	r19, 0x2d	; 45
 3c8:	21 36       	cpi	r18, 0x61	; 97
 3ca:	3a 4e       	sbci	r19, 0xEA	; 234
 3cc:	50 f4       	brcc	.+20     	; 0x3e2 <GetPulseWidth3+0x54>
	
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);					// Resolution of the timer
	TCNT1=0x00;							// Start counting time

	for(i=0;i<600000;i++)				// Almost 40 milliseconds
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	a1 1d       	adc	r26, r1
 3d2:	b1 1d       	adc	r27, r1
 3d4:	80 3c       	cpi	r24, 0xC0	; 192
 3d6:	27 e2       	ldi	r18, 0x27	; 39
 3d8:	92 07       	cpc	r25, r18
 3da:	29 e0       	ldi	r18, 0x09	; 9
 3dc:	a2 07       	cpc	r26, r18
 3de:	b1 05       	cpc	r27, r1
 3e0:	78 f3       	brcs	.-34     	; 0x3c0 <GetPulseWidth3+0x32>
		}
		else
		break;
	}

	if(i==600000)
 3e2:	80 3c       	cpi	r24, 0xC0	; 192
 3e4:	97 42       	sbci	r25, 0x27	; 39
 3e6:	a9 40       	sbci	r26, 0x09	; 9
 3e8:	b1 05       	cpc	r27, r1
 3ea:	81 f0       	breq	.+32     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	return US_NO_OBSTACLE;				//Time out

	result=TCNT1;						//Falling edge found
 3ec:	8c b5       	in	r24, 0x2c	; 44
 3ee:	9d b5       	in	r25, 0x2d	; 45
 3f0:	a0 e0       	ldi	r26, 0x00	; 0
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
	
	TCCR1B=0x00;						//Stop Timer
 3f4:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
 3f6:	81 36       	cpi	r24, 0x61	; 97
 3f8:	2a ee       	ldi	r18, 0xEA	; 234
 3fa:	92 07       	cpc	r25, r18
 3fc:	a1 05       	cpc	r26, r1
 3fe:	b1 05       	cpc	r27, r1
 400:	40 f4       	brcc	.+16     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	return US_NO_OBSTACLE;				//No obstacle
	else
	return (result>>1);
 402:	b6 95       	lsr	r27
 404:	a7 95       	ror	r26
 406:	97 95       	ror	r25
 408:	87 95       	ror	r24
 40a:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;				//Time out
 40c:	8e ef       	ldi	r24, 0xFE	; 254
 40e:	9f ef       	ldi	r25, 0xFF	; 255
 410:	08 95       	ret
	result=TCNT1;						//Falling edge found
	
	TCCR1B=0x00;						//Stop Timer

	if(result > 60000)
	return US_NO_OBSTACLE;				//No obstacle
 412:	8e ef       	ldi	r24, 0xFE	; 254
 414:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
 416:	08 95       	ret

00000418 <GetPulseWidth4>:

uint16_t GetPulseWidth4()				// Measure the pulse duration
{
	uint32_t i,result;

	for(i=0;i<600000;i++)				// Checking whether ultrasonic sensor is working
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	dc 01       	movw	r26, r24
 41e:	05 c0       	rjmp	.+10     	; 0x42a <GetPulseWidth4+0x12>
	{
		if(!(PINC & (1<<US4_ECHO_POS)))
 420:	9f 99       	sbic	0x13, 7	; 19
 422:	0a c0       	rjmp	.+20     	; 0x438 <GetPulseWidth4+0x20>

uint16_t GetPulseWidth4()				// Measure the pulse duration
{
	uint32_t i,result;

	for(i=0;i<600000;i++)				// Checking whether ultrasonic sensor is working
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	a1 1d       	adc	r26, r1
 428:	b1 1d       	adc	r27, r1
 42a:	80 3c       	cpi	r24, 0xC0	; 192
 42c:	27 e2       	ldi	r18, 0x27	; 39
 42e:	92 07       	cpc	r25, r18
 430:	29 e0       	ldi	r18, 0x09	; 9
 432:	a2 07       	cpc	r26, r18
 434:	b1 05       	cpc	r27, r1
 436:	a0 f3       	brcs	.-24     	; 0x420 <GetPulseWidth4+0x8>
		else
		break;							//High edge detected
	}

	
	TCCR1A=0X00;
 438:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);					// Resolution of the timer
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;							// Start counting time
 43e:	1d bc       	out	0x2d, r1	; 45
 440:	1c bc       	out	0x2c, r1	; 44

	for(i=0;i<600000;i++)				// Almost 40 milliseconds
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	dc 01       	movw	r26, r24
 448:	0a c0       	rjmp	.+20     	; 0x45e <GetPulseWidth4+0x46>
	{
		if(PINC & (1<<US4_ECHO_POS))
 44a:	9f 9b       	sbis	0x13, 7	; 19
 44c:	0f c0       	rjmp	.+30     	; 0x46c <GetPulseWidth4+0x54>
		{
			if(TCNT1 > 60000)
 44e:	2c b5       	in	r18, 0x2c	; 44
 450:	3d b5       	in	r19, 0x2d	; 45
 452:	21 36       	cpi	r18, 0x61	; 97
 454:	3a 4e       	sbci	r19, 0xEA	; 234
 456:	50 f4       	brcc	.+20     	; 0x46c <GetPulseWidth4+0x54>
	
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);					// Resolution of the timer
	TCNT1=0x00;							// Start counting time

	for(i=0;i<600000;i++)				// Almost 40 milliseconds
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	a1 1d       	adc	r26, r1
 45c:	b1 1d       	adc	r27, r1
 45e:	80 3c       	cpi	r24, 0xC0	; 192
 460:	27 e2       	ldi	r18, 0x27	; 39
 462:	92 07       	cpc	r25, r18
 464:	29 e0       	ldi	r18, 0x09	; 9
 466:	a2 07       	cpc	r26, r18
 468:	b1 05       	cpc	r27, r1
 46a:	78 f3       	brcs	.-34     	; 0x44a <GetPulseWidth4+0x32>
		}
		else
		break;
	}

	if(i==600000)
 46c:	80 3c       	cpi	r24, 0xC0	; 192
 46e:	97 42       	sbci	r25, 0x27	; 39
 470:	a9 40       	sbci	r26, 0x09	; 9
 472:	b1 05       	cpc	r27, r1
 474:	81 f0       	breq	.+32     	; 0x496 <GetPulseWidth4+0x7e>
	return US_NO_OBSTACLE;				//Time out

	result=TCNT1;						//Falling edge found
 476:	8c b5       	in	r24, 0x2c	; 44
 478:	9d b5       	in	r25, 0x2d	; 45
 47a:	a0 e0       	ldi	r26, 0x00	; 0
 47c:	b0 e0       	ldi	r27, 0x00	; 0
	
	TCCR1B=0x00;						//Stop Timer
 47e:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
 480:	81 36       	cpi	r24, 0x61	; 97
 482:	2a ee       	ldi	r18, 0xEA	; 234
 484:	92 07       	cpc	r25, r18
 486:	a1 05       	cpc	r26, r1
 488:	b1 05       	cpc	r27, r1
 48a:	40 f4       	brcc	.+16     	; 0x49c <GetPulseWidth4+0x84>
	return US_NO_OBSTACLE;				//No obstacle
	else
	return (result>>1);
 48c:	b6 95       	lsr	r27
 48e:	a7 95       	ror	r26
 490:	97 95       	ror	r25
 492:	87 95       	ror	r24
 494:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;				//Time out
 496:	8e ef       	ldi	r24, 0xFE	; 254
 498:	9f ef       	ldi	r25, 0xFF	; 255
 49a:	08 95       	ret
	result=TCNT1;						//Falling edge found
	
	TCCR1B=0x00;						//Stop Timer

	if(result > 60000)
	return US_NO_OBSTACLE;				//No obstacle
 49c:	8e ef       	ldi	r24, 0xFE	; 254
 49e:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
 4a0:	08 95       	ret

000004a2 <main>:
#include "Ultrasonic.h"

int distance1, previous_distance1, percentage1, distance2, previous_distance2, percentage2, distance3, previous_distance3, distance4, previous_distance4;

int main()
{
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
 4aa:	28 97       	sbiw	r28, 0x08	; 8
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();							// Initializing the LCD
 4b6:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_Init>

	char numberString1[4], numberString2[4];
	
	DDRD = 0xFF;
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
 4bc:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4be:	2f ef       	ldi	r18, 0xFF	; 255
 4c0:	81 ee       	ldi	r24, 0xE1	; 225
 4c2:	94 e0       	ldi	r25, 0x04	; 4
 4c4:	21 50       	subi	r18, 0x01	; 1
 4c6:	80 40       	sbci	r24, 0x00	; 0
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <main+0x22>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <main+0x2c>
 4ce:	00 00       	nop
	{
		uint16_t r1,r2,r3,r4;
		
		_delay_ms(100);

		HCSR04Init();					// Initializing the Ultrasonic Sensor
 4d0:	0e 94 08 01 	call	0x210	; 0x210 <HCSR04Init>

		while(1)
		{
			HCSR04Trigger1();			// Sending trigger pulse
 4d4:	0e 94 15 01 	call	0x22a	; 0x22a <HCSR04Trigger1>
			r1 = GetPulseWidth1();		// Getting pulse duration
 4d8:	0e 94 29 01 	call	0x252	; 0x252 <GetPulseWidth1>
 4dc:	7c 01       	movw	r14, r24
			
			HCSR04Trigger2();
 4de:	0e 94 1f 01 	call	0x23e	; 0x23e <HCSR04Trigger2>
			r2 = GetPulseWidth2();
 4e2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <GetPulseWidth2>
 4e6:	8c 01       	movw	r16, r24

			distance1=(r1*0.034/2.0);
 4e8:	b7 01       	movw	r22, r14
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__floatunsisf>
 4f2:	26 e9       	ldi	r18, 0x96	; 150
 4f4:	33 e4       	ldi	r19, 0x43	; 67
 4f6:	4b e0       	ldi	r20, 0x0B	; 11
 4f8:	5d e3       	ldi	r21, 0x3D	; 61
 4fa:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3>
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	5f e3       	ldi	r21, 0x3F	; 63
 506:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3>
 50a:	0e 94 ba 03 	call	0x774	; 0x774 <__fixsfsi>
 50e:	6b 01       	movw	r12, r22
 510:	7c 01       	movw	r14, r24
 512:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <distance1+0x1>
 516:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <distance1>
			percentage1= distance1*100/75;
 51a:	24 e6       	ldi	r18, 0x64	; 100
 51c:	2c 9d       	mul	r18, r12
 51e:	c0 01       	movw	r24, r0
 520:	2d 9d       	mul	r18, r13
 522:	90 0d       	add	r25, r0
 524:	11 24       	eor	r1, r1
 526:	6b e4       	ldi	r22, 0x4B	; 75
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__divmodhi4>
 52e:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <__data_end+0x1>
 532:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <__data_end>
			
			if (distance1 != previous_distance1)
 536:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <previous_distance1>
 53a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <previous_distance1+0x1>
 53e:	8c 15       	cp	r24, r12
 540:	9d 05       	cpc	r25, r13
 542:	11 f0       	breq	.+4      	; 0x548 <main+0xa6>
			{
				LCD_Clear();
 544:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Clear>
			}
			
			LCD_SetCursor(1, 1);
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_SetCursor>
			LCD_Print("Bin 01:");
 550:	80 e6       	ldi	r24, 0x60	; 96
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Print>
			LCD_SetCursor(9, 1);
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	89 e0       	ldi	r24, 0x09	; 9
 55c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_SetCursor>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 560:	4a e0       	ldi	r20, 0x0A	; 10
 562:	be 01       	movw	r22, r28
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 56c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 570:	0e 94 37 05 	call	0xa6e	; 0xa6e <__itoa_ncheck>
			itoa(percentage1, numberString1, 10);
			LCD_Print(numberString1);
 574:	ce 01       	movw	r24, r28
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Print>
			LCD_SetCursor(12, 1);
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	8c e0       	ldi	r24, 0x0C	; 12
 580:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_SetCursor>
			LCD_Print("%");
 584:	88 e6       	ldi	r24, 0x68	; 104
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Print>
			
			previous_distance1 = distance1;
 58c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <distance1>
 590:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <distance1+0x1>
 594:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <previous_distance1+0x1>
 598:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <previous_distance1>
 59c:	2f ef       	ldi	r18, 0xFF	; 255
 59e:	86 e7       	ldi	r24, 0x76	; 118
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	21 50       	subi	r18, 0x01	; 1
 5a4:	80 40       	sbci	r24, 0x00	; 0
 5a6:	90 40       	sbci	r25, 0x00	; 0
 5a8:	e1 f7       	brne	.-8      	; 0x5a2 <main+0x100>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <main+0x10a>
 5ac:	00 00       	nop
			_delay_ms(30);
			
			
			distance2=(r2*0.034/2.0);
 5ae:	b8 01       	movw	r22, r16
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__floatunsisf>
 5b8:	26 e9       	ldi	r18, 0x96	; 150
 5ba:	33 e4       	ldi	r19, 0x43	; 67
 5bc:	4b e0       	ldi	r20, 0x0B	; 11
 5be:	5d e3       	ldi	r21, 0x3D	; 61
 5c0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3>
 5c4:	20 e0       	ldi	r18, 0x00	; 0
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	5f e3       	ldi	r21, 0x3F	; 63
 5cc:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3>
 5d0:	0e 94 ba 03 	call	0x774	; 0x774 <__fixsfsi>
 5d4:	8b 01       	movw	r16, r22
 5d6:	9c 01       	movw	r18, r24
 5d8:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <distance2+0x1>
 5dc:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <distance2>
			percentage2= distance2*100/75;
 5e0:	44 e6       	ldi	r20, 0x64	; 100
 5e2:	40 9f       	mul	r20, r16
 5e4:	c0 01       	movw	r24, r0
 5e6:	41 9f       	mul	r20, r17
 5e8:	90 0d       	add	r25, r0
 5ea:	11 24       	eor	r1, r1
 5ec:	6b e4       	ldi	r22, 0x4B	; 75
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__divmodhi4>
 5f4:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <percentage2+0x1>
 5f8:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <percentage2>
			
			if (distance2 != previous_distance2)
 5fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <previous_distance2>
 600:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <previous_distance2+0x1>
 604:	80 17       	cp	r24, r16
 606:	91 07       	cpc	r25, r17
 608:	11 f0       	breq	.+4      	; 0x60e <main+0x16c>
			{
				LCD_Clear();
 60a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Clear>
			}
			
			LCD_SetCursor(1, 2);
 60e:	62 e0       	ldi	r22, 0x02	; 2
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_SetCursor>
			LCD_Print("Bin 02:");
 616:	8a e6       	ldi	r24, 0x6A	; 106
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Print>
			LCD_SetCursor(9, 2);
 61e:	62 e0       	ldi	r22, 0x02	; 2
 620:	89 e0       	ldi	r24, 0x09	; 9
 622:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_SetCursor>
 626:	4a e0       	ldi	r20, 0x0A	; 10
 628:	be 01       	movw	r22, r28
 62a:	6b 5f       	subi	r22, 0xFB	; 251
 62c:	7f 4f       	sbci	r23, 0xFF	; 255
 62e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <percentage2>
 632:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <percentage2+0x1>
 636:	0e 94 37 05 	call	0xa6e	; 0xa6e <__itoa_ncheck>
			itoa(percentage2, numberString2, 10);
			LCD_Print(numberString2);
 63a:	ce 01       	movw	r24, r28
 63c:	05 96       	adiw	r24, 0x05	; 5
 63e:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Print>
			LCD_SetCursor(12, 2);
 642:	62 e0       	ldi	r22, 0x02	; 2
 644:	8c e0       	ldi	r24, 0x0C	; 12
 646:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_SetCursor>
			LCD_Print("%");
 64a:	88 e6       	ldi	r24, 0x68	; 104
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Print>
			
			previous_distance2 = distance2;
 652:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <distance2>
 656:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <distance2+0x1>
 65a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <previous_distance2+0x1>
 65e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <previous_distance2>
 662:	2f ef       	ldi	r18, 0xFF	; 255
 664:	86 e7       	ldi	r24, 0x76	; 118
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	21 50       	subi	r18, 0x01	; 1
 66a:	80 40       	sbci	r24, 0x00	; 0
 66c:	90 40       	sbci	r25, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <main+0x1c6>
 670:	00 c0       	rjmp	.+0      	; 0x672 <main+0x1d0>
 672:	00 00       	nop
			_delay_ms(30);
			
			HCSR04Trigger3();			// Sending trigger pulse
 674:	0e 94 b3 01 	call	0x366	; 0x366 <HCSR04Trigger3>
			r3 = GetPulseWidth3();		// Getting pulse duration
 678:	0e 94 c7 01 	call	0x38e	; 0x38e <GetPulseWidth3>
 67c:	7c 01       	movw	r14, r24
			
			HCSR04Trigger4();
 67e:	0e 94 bd 01 	call	0x37a	; 0x37a <HCSR04Trigger4>
			r4 = GetPulseWidth4();
 682:	0e 94 0c 02 	call	0x418	; 0x418 <GetPulseWidth4>
 686:	8c 01       	movw	r16, r24

			distance3=(r3*0.035/2.0);
 688:	b7 01       	movw	r22, r14
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__floatunsisf>
 692:	29 e2       	ldi	r18, 0x29	; 41
 694:	3c e5       	ldi	r19, 0x5C	; 92
 696:	4f e0       	ldi	r20, 0x0F	; 15
 698:	5d e3       	ldi	r21, 0x3D	; 61
 69a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3>
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	40 e0       	ldi	r20, 0x00	; 0
 6a4:	5f e3       	ldi	r21, 0x3F	; 63
 6a6:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3>
 6aa:	0e 94 ba 03 	call	0x774	; 0x774 <__fixsfsi>
 6ae:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <distance3+0x1>
 6b2:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <distance3>
			
			previous_distance3 = distance3;
 6b6:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <previous_distance3+0x1>
 6ba:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <previous_distance3>
 6be:	2f ef       	ldi	r18, 0xFF	; 255
 6c0:	86 e7       	ldi	r24, 0x76	; 118
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	21 50       	subi	r18, 0x01	; 1
 6c6:	80 40       	sbci	r24, 0x00	; 0
 6c8:	90 40       	sbci	r25, 0x00	; 0
 6ca:	e1 f7       	brne	.-8      	; 0x6c4 <main+0x222>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <main+0x22c>
 6ce:	00 00       	nop
			_delay_ms(30);
			
			distance4=(r4*0.035/2.0);
 6d0:	b8 01       	movw	r22, r16
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__floatunsisf>
 6da:	29 e2       	ldi	r18, 0x29	; 41
 6dc:	3c e5       	ldi	r19, 0x5C	; 92
 6de:	4f e0       	ldi	r20, 0x0F	; 15
 6e0:	5d e3       	ldi	r21, 0x3D	; 61
 6e2:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3>
 6e6:	20 e0       	ldi	r18, 0x00	; 0
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	40 e0       	ldi	r20, 0x00	; 0
 6ec:	5f e3       	ldi	r21, 0x3F	; 63
 6ee:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3>
 6f2:	0e 94 ba 03 	call	0x774	; 0x774 <__fixsfsi>
 6f6:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <distance4+0x1>
 6fa:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <distance4>
			
			previous_distance4 = distance4;
 6fe:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <previous_distance4+0x1>
 702:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <previous_distance4>
 706:	2f ef       	ldi	r18, 0xFF	; 255
 708:	86 e7       	ldi	r24, 0x76	; 118
 70a:	91 e0       	ldi	r25, 0x01	; 1
 70c:	21 50       	subi	r18, 0x01	; 1
 70e:	80 40       	sbci	r24, 0x00	; 0
 710:	90 40       	sbci	r25, 0x00	; 0
 712:	e1 f7       	brne	.-8      	; 0x70c <main+0x26a>
 714:	00 c0       	rjmp	.+0      	; 0x716 <main+0x274>
 716:	00 00       	nop
			_delay_ms(30);
			
			if (distance3 < 30.0 || distance4 < 30.0)
 718:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <distance3>
 71c:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <distance3+0x1>
 720:	07 2e       	mov	r0, r23
 722:	00 0c       	add	r0, r0
 724:	88 0b       	sbc	r24, r24
 726:	99 0b       	sbc	r25, r25
 728:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__floatsisf>
 72c:	20 e0       	ldi	r18, 0x00	; 0
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	40 ef       	ldi	r20, 0xF0	; 240
 732:	51 e4       	ldi	r21, 0x41	; 65
 734:	0e 94 b5 03 	call	0x76a	; 0x76a <__cmpsf2>
 738:	88 23       	and	r24, r24
 73a:	94 f0       	brlt	.+36     	; 0x760 <main+0x2be>
 73c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <distance4>
 740:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <distance4+0x1>
 744:	07 2e       	mov	r0, r23
 746:	00 0c       	add	r0, r0
 748:	88 0b       	sbc	r24, r24
 74a:	99 0b       	sbc	r25, r25
 74c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__floatsisf>
 750:	20 e0       	ldi	r18, 0x00	; 0
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	40 ef       	ldi	r20, 0xF0	; 240
 756:	51 e4       	ldi	r21, 0x41	; 65
 758:	0e 94 b5 03 	call	0x76a	; 0x76a <__cmpsf2>
 75c:	88 23       	and	r24, r24
 75e:	1c f4       	brge	.+6      	; 0x766 <main+0x2c4>
			{
				PORTD = 0xFF;
 760:	8f ef       	ldi	r24, 0xFF	; 255
 762:	82 bb       	out	0x12, r24	; 18
 764:	b7 ce       	rjmp	.-658    	; 0x4d4 <main+0x32>
			}
			else{
				PORTD= 0x00;
 766:	12 ba       	out	0x12, r1	; 18
 768:	b5 ce       	rjmp	.-662    	; 0x4d4 <main+0x32>

0000076a <__cmpsf2>:
 76a:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_cmp>
 76e:	08 f4       	brcc	.+2      	; 0x772 <__cmpsf2+0x8>
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	08 95       	ret

00000774 <__fixsfsi>:
 774:	0e 94 c1 03 	call	0x782	; 0x782 <__fixunssfsi>
 778:	68 94       	set
 77a:	b1 11       	cpse	r27, r1
 77c:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__fp_szero>
 780:	08 95       	ret

00000782 <__fixunssfsi>:
 782:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_splitA>
 786:	88 f0       	brcs	.+34     	; 0x7aa <__fixunssfsi+0x28>
 788:	9f 57       	subi	r25, 0x7F	; 127
 78a:	98 f0       	brcs	.+38     	; 0x7b2 <__fixunssfsi+0x30>
 78c:	b9 2f       	mov	r27, r25
 78e:	99 27       	eor	r25, r25
 790:	b7 51       	subi	r27, 0x17	; 23
 792:	b0 f0       	brcs	.+44     	; 0x7c0 <__fixunssfsi+0x3e>
 794:	e1 f0       	breq	.+56     	; 0x7ce <__fixunssfsi+0x4c>
 796:	66 0f       	add	r22, r22
 798:	77 1f       	adc	r23, r23
 79a:	88 1f       	adc	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	1a f0       	brmi	.+6      	; 0x7a6 <__fixunssfsi+0x24>
 7a0:	ba 95       	dec	r27
 7a2:	c9 f7       	brne	.-14     	; 0x796 <__fixunssfsi+0x14>
 7a4:	14 c0       	rjmp	.+40     	; 0x7ce <__fixunssfsi+0x4c>
 7a6:	b1 30       	cpi	r27, 0x01	; 1
 7a8:	91 f0       	breq	.+36     	; 0x7ce <__fixunssfsi+0x4c>
 7aa:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_zero>
 7ae:	b1 e0       	ldi	r27, 0x01	; 1
 7b0:	08 95       	ret
 7b2:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__fp_zero>
 7b6:	67 2f       	mov	r22, r23
 7b8:	78 2f       	mov	r23, r24
 7ba:	88 27       	eor	r24, r24
 7bc:	b8 5f       	subi	r27, 0xF8	; 248
 7be:	39 f0       	breq	.+14     	; 0x7ce <__fixunssfsi+0x4c>
 7c0:	b9 3f       	cpi	r27, 0xF9	; 249
 7c2:	cc f3       	brlt	.-14     	; 0x7b6 <__fixunssfsi+0x34>
 7c4:	86 95       	lsr	r24
 7c6:	77 95       	ror	r23
 7c8:	67 95       	ror	r22
 7ca:	b3 95       	inc	r27
 7cc:	d9 f7       	brne	.-10     	; 0x7c4 <__fixunssfsi+0x42>
 7ce:	3e f4       	brtc	.+14     	; 0x7de <__fixunssfsi+0x5c>
 7d0:	90 95       	com	r25
 7d2:	80 95       	com	r24
 7d4:	70 95       	com	r23
 7d6:	61 95       	neg	r22
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	8f 4f       	sbci	r24, 0xFF	; 255
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	08 95       	ret

000007e0 <__floatunsisf>:
 7e0:	e8 94       	clt
 7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <__floatsisf+0x12>

000007e4 <__floatsisf>:
 7e4:	97 fb       	bst	r25, 7
 7e6:	3e f4       	brtc	.+14     	; 0x7f6 <__floatsisf+0x12>
 7e8:	90 95       	com	r25
 7ea:	80 95       	com	r24
 7ec:	70 95       	com	r23
 7ee:	61 95       	neg	r22
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	99 23       	and	r25, r25
 7f8:	a9 f0       	breq	.+42     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7fa:	f9 2f       	mov	r31, r25
 7fc:	96 e9       	ldi	r25, 0x96	; 150
 7fe:	bb 27       	eor	r27, r27
 800:	93 95       	inc	r25
 802:	f6 95       	lsr	r31
 804:	87 95       	ror	r24
 806:	77 95       	ror	r23
 808:	67 95       	ror	r22
 80a:	b7 95       	ror	r27
 80c:	f1 11       	cpse	r31, r1
 80e:	f8 cf       	rjmp	.-16     	; 0x800 <__DATA_REGION_LENGTH__>
 810:	fa f4       	brpl	.+62     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 812:	bb 0f       	add	r27, r27
 814:	11 f4       	brne	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 816:	60 ff       	sbrs	r22, 0
 818:	1b c0       	rjmp	.+54     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 81a:	6f 5f       	subi	r22, 0xFF	; 255
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	8f 4f       	sbci	r24, 0xFF	; 255
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	16 c0       	rjmp	.+44     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 824:	88 23       	and	r24, r24
 826:	11 f0       	breq	.+4      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 828:	96 e9       	ldi	r25, 0x96	; 150
 82a:	11 c0       	rjmp	.+34     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 82c:	77 23       	and	r23, r23
 82e:	21 f0       	breq	.+8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 830:	9e e8       	ldi	r25, 0x8E	; 142
 832:	87 2f       	mov	r24, r23
 834:	76 2f       	mov	r23, r22
 836:	05 c0       	rjmp	.+10     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 838:	66 23       	and	r22, r22
 83a:	71 f0       	breq	.+28     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 83c:	96 e8       	ldi	r25, 0x86	; 134
 83e:	86 2f       	mov	r24, r22
 840:	70 e0       	ldi	r23, 0x00	; 0
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	2a f0       	brmi	.+10     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 846:	9a 95       	dec	r25
 848:	66 0f       	add	r22, r22
 84a:	77 1f       	adc	r23, r23
 84c:	88 1f       	adc	r24, r24
 84e:	da f7       	brpl	.-10     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 850:	88 0f       	add	r24, r24
 852:	96 95       	lsr	r25
 854:	87 95       	ror	r24
 856:	97 f9       	bld	r25, 7
 858:	08 95       	ret

0000085a <__fp_cmp>:
 85a:	99 0f       	add	r25, r25
 85c:	00 08       	sbc	r0, r0
 85e:	55 0f       	add	r21, r21
 860:	aa 0b       	sbc	r26, r26
 862:	e0 e8       	ldi	r30, 0x80	; 128
 864:	fe ef       	ldi	r31, 0xFE	; 254
 866:	16 16       	cp	r1, r22
 868:	17 06       	cpc	r1, r23
 86a:	e8 07       	cpc	r30, r24
 86c:	f9 07       	cpc	r31, r25
 86e:	c0 f0       	brcs	.+48     	; 0x8a0 <__stack+0x41>
 870:	12 16       	cp	r1, r18
 872:	13 06       	cpc	r1, r19
 874:	e4 07       	cpc	r30, r20
 876:	f5 07       	cpc	r31, r21
 878:	98 f0       	brcs	.+38     	; 0x8a0 <__stack+0x41>
 87a:	62 1b       	sub	r22, r18
 87c:	73 0b       	sbc	r23, r19
 87e:	84 0b       	sbc	r24, r20
 880:	95 0b       	sbc	r25, r21
 882:	39 f4       	brne	.+14     	; 0x892 <__stack+0x33>
 884:	0a 26       	eor	r0, r26
 886:	61 f0       	breq	.+24     	; 0x8a0 <__stack+0x41>
 888:	23 2b       	or	r18, r19
 88a:	24 2b       	or	r18, r20
 88c:	25 2b       	or	r18, r21
 88e:	21 f4       	brne	.+8      	; 0x898 <__stack+0x39>
 890:	08 95       	ret
 892:	0a 26       	eor	r0, r26
 894:	09 f4       	brne	.+2      	; 0x898 <__stack+0x39>
 896:	a1 40       	sbci	r26, 0x01	; 1
 898:	a6 95       	lsr	r26
 89a:	8f ef       	ldi	r24, 0xFF	; 255
 89c:	81 1d       	adc	r24, r1
 89e:	81 1d       	adc	r24, r1
 8a0:	08 95       	ret

000008a2 <__fp_split3>:
 8a2:	57 fd       	sbrc	r21, 7
 8a4:	90 58       	subi	r25, 0x80	; 128
 8a6:	44 0f       	add	r20, r20
 8a8:	55 1f       	adc	r21, r21
 8aa:	59 f0       	breq	.+22     	; 0x8c2 <__fp_splitA+0x10>
 8ac:	5f 3f       	cpi	r21, 0xFF	; 255
 8ae:	71 f0       	breq	.+28     	; 0x8cc <__fp_splitA+0x1a>
 8b0:	47 95       	ror	r20

000008b2 <__fp_splitA>:
 8b2:	88 0f       	add	r24, r24
 8b4:	97 fb       	bst	r25, 7
 8b6:	99 1f       	adc	r25, r25
 8b8:	61 f0       	breq	.+24     	; 0x8d2 <__fp_splitA+0x20>
 8ba:	9f 3f       	cpi	r25, 0xFF	; 255
 8bc:	79 f0       	breq	.+30     	; 0x8dc <__fp_splitA+0x2a>
 8be:	87 95       	ror	r24
 8c0:	08 95       	ret
 8c2:	12 16       	cp	r1, r18
 8c4:	13 06       	cpc	r1, r19
 8c6:	14 06       	cpc	r1, r20
 8c8:	55 1f       	adc	r21, r21
 8ca:	f2 cf       	rjmp	.-28     	; 0x8b0 <__fp_split3+0xe>
 8cc:	46 95       	lsr	r20
 8ce:	f1 df       	rcall	.-30     	; 0x8b2 <__fp_splitA>
 8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <__fp_splitA+0x30>
 8d2:	16 16       	cp	r1, r22
 8d4:	17 06       	cpc	r1, r23
 8d6:	18 06       	cpc	r1, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	f1 cf       	rjmp	.-30     	; 0x8be <__fp_splitA+0xc>
 8dc:	86 95       	lsr	r24
 8de:	71 05       	cpc	r23, r1
 8e0:	61 05       	cpc	r22, r1
 8e2:	08 94       	sec
 8e4:	08 95       	ret

000008e6 <__fp_zero>:
 8e6:	e8 94       	clt

000008e8 <__fp_szero>:
 8e8:	bb 27       	eor	r27, r27
 8ea:	66 27       	eor	r22, r22
 8ec:	77 27       	eor	r23, r23
 8ee:	cb 01       	movw	r24, r22
 8f0:	97 f9       	bld	r25, 7
 8f2:	08 95       	ret

000008f4 <__mulsf3>:
 8f4:	0e 94 8d 04 	call	0x91a	; 0x91a <__mulsf3x>
 8f8:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_round>
 8fc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fp_pscA>
 900:	38 f0       	brcs	.+14     	; 0x910 <__mulsf3+0x1c>
 902:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fp_pscB>
 906:	20 f0       	brcs	.+8      	; 0x910 <__mulsf3+0x1c>
 908:	95 23       	and	r25, r21
 90a:	11 f0       	breq	.+4      	; 0x910 <__mulsf3+0x1c>
 90c:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_inf>
 910:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__fp_nan>
 914:	11 24       	eor	r1, r1
 916:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__fp_szero>

0000091a <__mulsf3x>:
 91a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fp_split3>
 91e:	70 f3       	brcs	.-36     	; 0x8fc <__mulsf3+0x8>

00000920 <__mulsf3_pse>:
 920:	95 9f       	mul	r25, r21
 922:	c1 f3       	breq	.-16     	; 0x914 <__mulsf3+0x20>
 924:	95 0f       	add	r25, r21
 926:	50 e0       	ldi	r21, 0x00	; 0
 928:	55 1f       	adc	r21, r21
 92a:	62 9f       	mul	r22, r18
 92c:	f0 01       	movw	r30, r0
 92e:	72 9f       	mul	r23, r18
 930:	bb 27       	eor	r27, r27
 932:	f0 0d       	add	r31, r0
 934:	b1 1d       	adc	r27, r1
 936:	63 9f       	mul	r22, r19
 938:	aa 27       	eor	r26, r26
 93a:	f0 0d       	add	r31, r0
 93c:	b1 1d       	adc	r27, r1
 93e:	aa 1f       	adc	r26, r26
 940:	64 9f       	mul	r22, r20
 942:	66 27       	eor	r22, r22
 944:	b0 0d       	add	r27, r0
 946:	a1 1d       	adc	r26, r1
 948:	66 1f       	adc	r22, r22
 94a:	82 9f       	mul	r24, r18
 94c:	22 27       	eor	r18, r18
 94e:	b0 0d       	add	r27, r0
 950:	a1 1d       	adc	r26, r1
 952:	62 1f       	adc	r22, r18
 954:	73 9f       	mul	r23, r19
 956:	b0 0d       	add	r27, r0
 958:	a1 1d       	adc	r26, r1
 95a:	62 1f       	adc	r22, r18
 95c:	83 9f       	mul	r24, r19
 95e:	a0 0d       	add	r26, r0
 960:	61 1d       	adc	r22, r1
 962:	22 1f       	adc	r18, r18
 964:	74 9f       	mul	r23, r20
 966:	33 27       	eor	r19, r19
 968:	a0 0d       	add	r26, r0
 96a:	61 1d       	adc	r22, r1
 96c:	23 1f       	adc	r18, r19
 96e:	84 9f       	mul	r24, r20
 970:	60 0d       	add	r22, r0
 972:	21 1d       	adc	r18, r1
 974:	82 2f       	mov	r24, r18
 976:	76 2f       	mov	r23, r22
 978:	6a 2f       	mov	r22, r26
 97a:	11 24       	eor	r1, r1
 97c:	9f 57       	subi	r25, 0x7F	; 127
 97e:	50 40       	sbci	r21, 0x00	; 0
 980:	9a f0       	brmi	.+38     	; 0x9a8 <__mulsf3_pse+0x88>
 982:	f1 f0       	breq	.+60     	; 0x9c0 <__mulsf3_pse+0xa0>
 984:	88 23       	and	r24, r24
 986:	4a f0       	brmi	.+18     	; 0x99a <__mulsf3_pse+0x7a>
 988:	ee 0f       	add	r30, r30
 98a:	ff 1f       	adc	r31, r31
 98c:	bb 1f       	adc	r27, r27
 98e:	66 1f       	adc	r22, r22
 990:	77 1f       	adc	r23, r23
 992:	88 1f       	adc	r24, r24
 994:	91 50       	subi	r25, 0x01	; 1
 996:	50 40       	sbci	r21, 0x00	; 0
 998:	a9 f7       	brne	.-22     	; 0x984 <__mulsf3_pse+0x64>
 99a:	9e 3f       	cpi	r25, 0xFE	; 254
 99c:	51 05       	cpc	r21, r1
 99e:	80 f0       	brcs	.+32     	; 0x9c0 <__mulsf3_pse+0xa0>
 9a0:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_inf>
 9a4:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__fp_szero>
 9a8:	5f 3f       	cpi	r21, 0xFF	; 255
 9aa:	e4 f3       	brlt	.-8      	; 0x9a4 <__mulsf3_pse+0x84>
 9ac:	98 3e       	cpi	r25, 0xE8	; 232
 9ae:	d4 f3       	brlt	.-12     	; 0x9a4 <__mulsf3_pse+0x84>
 9b0:	86 95       	lsr	r24
 9b2:	77 95       	ror	r23
 9b4:	67 95       	ror	r22
 9b6:	b7 95       	ror	r27
 9b8:	f7 95       	ror	r31
 9ba:	e7 95       	ror	r30
 9bc:	9f 5f       	subi	r25, 0xFF	; 255
 9be:	c1 f7       	brne	.-16     	; 0x9b0 <__mulsf3_pse+0x90>
 9c0:	fe 2b       	or	r31, r30
 9c2:	88 0f       	add	r24, r24
 9c4:	91 1d       	adc	r25, r1
 9c6:	96 95       	lsr	r25
 9c8:	87 95       	ror	r24
 9ca:	97 f9       	bld	r25, 7
 9cc:	08 95       	ret

000009ce <__fp_inf>:
 9ce:	97 f9       	bld	r25, 7
 9d0:	9f 67       	ori	r25, 0x7F	; 127
 9d2:	80 e8       	ldi	r24, 0x80	; 128
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	60 e0       	ldi	r22, 0x00	; 0
 9d8:	08 95       	ret

000009da <__fp_nan>:
 9da:	9f ef       	ldi	r25, 0xFF	; 255
 9dc:	80 ec       	ldi	r24, 0xC0	; 192
 9de:	08 95       	ret

000009e0 <__fp_pscA>:
 9e0:	00 24       	eor	r0, r0
 9e2:	0a 94       	dec	r0
 9e4:	16 16       	cp	r1, r22
 9e6:	17 06       	cpc	r1, r23
 9e8:	18 06       	cpc	r1, r24
 9ea:	09 06       	cpc	r0, r25
 9ec:	08 95       	ret

000009ee <__fp_pscB>:
 9ee:	00 24       	eor	r0, r0
 9f0:	0a 94       	dec	r0
 9f2:	12 16       	cp	r1, r18
 9f4:	13 06       	cpc	r1, r19
 9f6:	14 06       	cpc	r1, r20
 9f8:	05 06       	cpc	r0, r21
 9fa:	08 95       	ret

000009fc <__fp_round>:
 9fc:	09 2e       	mov	r0, r25
 9fe:	03 94       	inc	r0
 a00:	00 0c       	add	r0, r0
 a02:	11 f4       	brne	.+4      	; 0xa08 <__fp_round+0xc>
 a04:	88 23       	and	r24, r24
 a06:	52 f0       	brmi	.+20     	; 0xa1c <__fp_round+0x20>
 a08:	bb 0f       	add	r27, r27
 a0a:	40 f4       	brcc	.+16     	; 0xa1c <__fp_round+0x20>
 a0c:	bf 2b       	or	r27, r31
 a0e:	11 f4       	brne	.+4      	; 0xa14 <__fp_round+0x18>
 a10:	60 ff       	sbrs	r22, 0
 a12:	04 c0       	rjmp	.+8      	; 0xa1c <__fp_round+0x20>
 a14:	6f 5f       	subi	r22, 0xFF	; 255
 a16:	7f 4f       	sbci	r23, 0xFF	; 255
 a18:	8f 4f       	sbci	r24, 0xFF	; 255
 a1a:	9f 4f       	sbci	r25, 0xFF	; 255
 a1c:	08 95       	ret

00000a1e <__divmodhi4>:
 a1e:	97 fb       	bst	r25, 7
 a20:	07 2e       	mov	r0, r23
 a22:	16 f4       	brtc	.+4      	; 0xa28 <__divmodhi4+0xa>
 a24:	00 94       	com	r0
 a26:	07 d0       	rcall	.+14     	; 0xa36 <__divmodhi4_neg1>
 a28:	77 fd       	sbrc	r23, 7
 a2a:	09 d0       	rcall	.+18     	; 0xa3e <__divmodhi4_neg2>
 a2c:	0e 94 23 05 	call	0xa46	; 0xa46 <__udivmodhi4>
 a30:	07 fc       	sbrc	r0, 7
 a32:	05 d0       	rcall	.+10     	; 0xa3e <__divmodhi4_neg2>
 a34:	3e f4       	brtc	.+14     	; 0xa44 <__divmodhi4_exit>

00000a36 <__divmodhi4_neg1>:
 a36:	90 95       	com	r25
 a38:	81 95       	neg	r24
 a3a:	9f 4f       	sbci	r25, 0xFF	; 255
 a3c:	08 95       	ret

00000a3e <__divmodhi4_neg2>:
 a3e:	70 95       	com	r23
 a40:	61 95       	neg	r22
 a42:	7f 4f       	sbci	r23, 0xFF	; 255

00000a44 <__divmodhi4_exit>:
 a44:	08 95       	ret

00000a46 <__udivmodhi4>:
 a46:	aa 1b       	sub	r26, r26
 a48:	bb 1b       	sub	r27, r27
 a4a:	51 e1       	ldi	r21, 0x11	; 17
 a4c:	07 c0       	rjmp	.+14     	; 0xa5c <__udivmodhi4_ep>

00000a4e <__udivmodhi4_loop>:
 a4e:	aa 1f       	adc	r26, r26
 a50:	bb 1f       	adc	r27, r27
 a52:	a6 17       	cp	r26, r22
 a54:	b7 07       	cpc	r27, r23
 a56:	10 f0       	brcs	.+4      	; 0xa5c <__udivmodhi4_ep>
 a58:	a6 1b       	sub	r26, r22
 a5a:	b7 0b       	sbc	r27, r23

00000a5c <__udivmodhi4_ep>:
 a5c:	88 1f       	adc	r24, r24
 a5e:	99 1f       	adc	r25, r25
 a60:	5a 95       	dec	r21
 a62:	a9 f7       	brne	.-22     	; 0xa4e <__udivmodhi4_loop>
 a64:	80 95       	com	r24
 a66:	90 95       	com	r25
 a68:	bc 01       	movw	r22, r24
 a6a:	cd 01       	movw	r24, r26
 a6c:	08 95       	ret

00000a6e <__itoa_ncheck>:
 a6e:	bb 27       	eor	r27, r27
 a70:	4a 30       	cpi	r20, 0x0A	; 10
 a72:	31 f4       	brne	.+12     	; 0xa80 <__itoa_ncheck+0x12>
 a74:	99 23       	and	r25, r25
 a76:	22 f4       	brpl	.+8      	; 0xa80 <__itoa_ncheck+0x12>
 a78:	bd e2       	ldi	r27, 0x2D	; 45
 a7a:	90 95       	com	r25
 a7c:	81 95       	neg	r24
 a7e:	9f 4f       	sbci	r25, 0xFF	; 255
 a80:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__utoa_common>

00000a84 <__utoa_ncheck>:
 a84:	bb 27       	eor	r27, r27

00000a86 <__utoa_common>:
 a86:	fb 01       	movw	r30, r22
 a88:	55 27       	eor	r21, r21
 a8a:	aa 27       	eor	r26, r26
 a8c:	88 0f       	add	r24, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	aa 1f       	adc	r26, r26
 a92:	a4 17       	cp	r26, r20
 a94:	10 f0       	brcs	.+4      	; 0xa9a <__utoa_common+0x14>
 a96:	a4 1b       	sub	r26, r20
 a98:	83 95       	inc	r24
 a9a:	50 51       	subi	r21, 0x10	; 16
 a9c:	b9 f7       	brne	.-18     	; 0xa8c <__utoa_common+0x6>
 a9e:	a0 5d       	subi	r26, 0xD0	; 208
 aa0:	aa 33       	cpi	r26, 0x3A	; 58
 aa2:	08 f0       	brcs	.+2      	; 0xaa6 <__utoa_common+0x20>
 aa4:	a9 5d       	subi	r26, 0xD9	; 217
 aa6:	a1 93       	st	Z+, r26
 aa8:	00 97       	sbiw	r24, 0x00	; 0
 aaa:	79 f7       	brne	.-34     	; 0xa8a <__utoa_common+0x4>
 aac:	b1 11       	cpse	r27, r1
 aae:	b1 93       	st	Z+, r27
 ab0:	11 92       	st	Z+, r1
 ab2:	cb 01       	movw	r24, r22
 ab4:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <strrev>

00000ab8 <strrev>:
 ab8:	dc 01       	movw	r26, r24
 aba:	fc 01       	movw	r30, r24
 abc:	67 2f       	mov	r22, r23
 abe:	71 91       	ld	r23, Z+
 ac0:	77 23       	and	r23, r23
 ac2:	e1 f7       	brne	.-8      	; 0xabc <strrev+0x4>
 ac4:	32 97       	sbiw	r30, 0x02	; 2
 ac6:	04 c0       	rjmp	.+8      	; 0xad0 <strrev+0x18>
 ac8:	7c 91       	ld	r23, X
 aca:	6d 93       	st	X+, r22
 acc:	70 83       	st	Z, r23
 ace:	62 91       	ld	r22, -Z
 ad0:	ae 17       	cp	r26, r30
 ad2:	bf 07       	cpc	r27, r31
 ad4:	c8 f3       	brcs	.-14     	; 0xac8 <strrev+0x10>
 ad6:	08 95       	ret

00000ad8 <_exit>:
 ad8:	f8 94       	cli

00000ada <__stop_program>:
 ada:	ff cf       	rjmp	.-2      	; 0xada <__stop_program>
