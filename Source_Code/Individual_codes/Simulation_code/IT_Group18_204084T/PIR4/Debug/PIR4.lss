
PIR4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056e  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001eb  00000000  00000000  00000bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d1  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define F_CPU 16000000UL

int main(void)
{
   DDRB = DDRB | (1<<3);		//Make PB3 as output pin
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	88 60       	ori	r24, 0x08	; 8
  70:	87 bb       	out	0x17, r24	; 23
   DDRD = DDRD | (1<<7);		//Make PD7 as output pin
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 68       	ori	r24, 0x80	; 128
  76:	81 bb       	out	0x11, r24	; 17
   DDRA = DDRA & (~(1<<4));		//Make PA4 as input pin
  78:	8a b3       	in	r24, 0x1a	; 26
  7a:	8f 7e       	andi	r24, 0xEF	; 239
  7c:	8a bb       	out	0x1a, r24	; 26
   DDRA = DDRA & (~(1<<5));		//Make PA5 as input pin
  7e:	8a b3       	in	r24, 0x1a	; 26
  80:	8f 7d       	andi	r24, 0xDF	; 223
  82:	8a bb       	out	0x1a, r24	; 26
   
    while (1) 
    {
		if (PINA & (1<<4))
  84:	cc 9b       	sbis	0x19, 4	; 25
  86:	04 c0       	rjmp	.+8      	; 0x90 <main+0x24>
		{
			PORTB = PORTB | (1<<3);
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	88 60       	ori	r24, 0x08	; 8
  8c:	88 bb       	out	0x18, r24	; 24
  8e:	03 c0       	rjmp	.+6      	; 0x96 <main+0x2a>
		}
		else
		{
			PORTB = PORTB & (~(1<<3));
  90:	88 b3       	in	r24, 0x18	; 24
  92:	87 7f       	andi	r24, 0xF7	; 247
  94:	88 bb       	out	0x18, r24	; 24
		}
		
		if (PINA & (1<<5))
  96:	cd 9b       	sbis	0x19, 5	; 25
  98:	04 c0       	rjmp	.+8      	; 0xa2 <main+0x36>
		{
			PORTD = PORTD | (1<<7);
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	f1 cf       	rjmp	.-30     	; 0x84 <main+0x18>
		}
		else
		{
			PORTD = PORTD & (~(1<<7));
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	ed cf       	rjmp	.-38     	; 0x84 <main+0x18>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
