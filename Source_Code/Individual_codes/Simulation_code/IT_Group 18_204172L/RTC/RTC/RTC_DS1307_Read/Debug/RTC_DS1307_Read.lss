
RTC_DS1307_Read.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  0000021e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ce  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ad  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000484  00000000  00000000  00001397  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000432  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ee  00000000  00000000  00001d56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 36       	cpi	r26, 0x6E	; 110
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <I2C_Init>:
			I2C_Stop();										/* If not then generate stop condition */
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
}
  7c:	11 b8       	out	0x01, r1	; 1
  7e:	88 e4       	ldi	r24, 0x48	; 72
  80:	80 b9       	out	0x00, r24	; 0
  82:	08 95       	ret

00000084 <I2C_Start>:
  84:	94 ea       	ldi	r25, 0xA4	; 164
  86:	96 bf       	out	0x36, r25	; 54
  88:	06 b6       	in	r0, 0x36	; 54
  8a:	07 fe       	sbrs	r0, 7
  8c:	fd cf       	rjmp	.-6      	; 0x88 <I2C_Start+0x4>
  8e:	91 b1       	in	r25, 0x01	; 1
  90:	98 7f       	andi	r25, 0xF8	; 248
  92:	98 30       	cpi	r25, 0x08	; 8
  94:	71 f4       	brne	.+28     	; 0xb2 <I2C_Start+0x2e>
  96:	83 b9       	out	0x03, r24	; 3
  98:	84 e8       	ldi	r24, 0x84	; 132
  9a:	86 bf       	out	0x36, r24	; 54
  9c:	06 b6       	in	r0, 0x36	; 54
  9e:	07 fe       	sbrs	r0, 7
  a0:	fd cf       	rjmp	.-6      	; 0x9c <I2C_Start+0x18>
  a2:	81 b1       	in	r24, 0x01	; 1
  a4:	88 7f       	andi	r24, 0xF8	; 248
  a6:	88 31       	cpi	r24, 0x18	; 24
  a8:	31 f0       	breq	.+12     	; 0xb6 <I2C_Start+0x32>
  aa:	80 32       	cpi	r24, 0x20	; 32
  ac:	31 f0       	breq	.+12     	; 0xba <I2C_Start+0x36>
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	08 95       	ret
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	08 95       	ret
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	08 95       	ret
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	08 95       	ret

000000be <I2C_Repeated_Start>:
  be:	94 ea       	ldi	r25, 0xA4	; 164
  c0:	96 bf       	out	0x36, r25	; 54
  c2:	06 b6       	in	r0, 0x36	; 54
  c4:	07 fe       	sbrs	r0, 7
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <I2C_Repeated_Start+0x4>
  c8:	91 b1       	in	r25, 0x01	; 1
  ca:	98 7f       	andi	r25, 0xF8	; 248
  cc:	90 31       	cpi	r25, 0x10	; 16
  ce:	71 f4       	brne	.+28     	; 0xec <I2C_Repeated_Start+0x2e>
  d0:	83 b9       	out	0x03, r24	; 3
  d2:	84 e8       	ldi	r24, 0x84	; 132
  d4:	86 bf       	out	0x36, r24	; 54
  d6:	06 b6       	in	r0, 0x36	; 54
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <I2C_Repeated_Start+0x18>
  dc:	81 b1       	in	r24, 0x01	; 1
  de:	88 7f       	andi	r24, 0xF8	; 248
  e0:	80 34       	cpi	r24, 0x40	; 64
  e2:	31 f0       	breq	.+12     	; 0xf0 <I2C_Repeated_Start+0x32>
  e4:	80 32       	cpi	r24, 0x20	; 32
  e6:	31 f0       	breq	.+12     	; 0xf4 <I2C_Repeated_Start+0x36>
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	08 95       	ret
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	08 95       	ret

000000f8 <I2C_Stop>:
  f8:	84 e9       	ldi	r24, 0x94	; 148
  fa:	86 bf       	out	0x36, r24	; 54
  fc:	06 b6       	in	r0, 0x36	; 54
  fe:	04 fc       	sbrc	r0, 4
 100:	fd cf       	rjmp	.-6      	; 0xfc <I2C_Stop+0x4>
 102:	08 95       	ret

00000104 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
 104:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 106:	84 e8       	ldi	r24, 0x84	; 132
 108:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 10a:	06 b6       	in	r0, 0x36	; 54
 10c:	07 fe       	sbrs	r0, 7
 10e:	fd cf       	rjmp	.-6      	; 0x10a <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 110:	81 b1       	in	r24, 0x01	; 1
 112:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
 114:	88 32       	cpi	r24, 0x28	; 40
 116:	21 f0       	breq	.+8      	; 0x120 <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
 118:	80 33       	cpi	r24, 0x30	; 48
 11a:	21 f0       	breq	.+8      	; 0x124 <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
 124:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
 126:	08 95       	ret

00000128 <I2C_Read_Ack>:

int I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
 128:	84 ec       	ldi	r24, 0xC4	; 196
 12a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 12c:	06 b6       	in	r0, 0x36	; 54
 12e:	07 fe       	sbrs	r0, 7
 130:	fd cf       	rjmp	.-6      	; 0x12c <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
 132:	83 b1       	in	r24, 0x03	; 3
}	
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	08 95       	ret

00000138 <I2C_Read_Nack>:

int I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
 138:	84 e8       	ldi	r24, 0x84	; 132
 13a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 13c:	06 b6       	in	r0, 0x36	; 54
 13e:	07 fe       	sbrs	r0, 7
 140:	fd cf       	rjmp	.-6      	; 0x13c <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
 142:	83 b1       	in	r24, 0x03	; 3
}	
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	08 95       	ret

00000148 <RTC_Read_Clock>:
	day = I2C_Read_Ack();							/* Read day */ 
	date = I2C_Read_Ack();							/* Read date */
	month = I2C_Read_Ack();							/* Read month */
	year = I2C_Read_Nack();							/* Read the year with Nack */
	I2C_Stop();										/* Stop i2C communication */
}
 148:	cf 93       	push	r28
 14a:	c8 2f       	mov	r28, r24
 14c:	80 ed       	ldi	r24, 0xD0	; 208
 14e:	0e 94 42 00 	call	0x84	; 0x84 <I2C_Start>
 152:	8c 2f       	mov	r24, r28
 154:	0e 94 82 00 	call	0x104	; 0x104 <I2C_Write>
 158:	81 ed       	ldi	r24, 0xD1	; 209
 15a:	0e 94 5f 00 	call	0xbe	; 0xbe <I2C_Repeated_Start>
 15e:	0e 94 94 00 	call	0x128	; 0x128 <I2C_Read_Ack>
 162:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <second+0x1>
 166:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <second>
 16a:	0e 94 94 00 	call	0x128	; 0x128 <I2C_Read_Ack>
 16e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <minute+0x1>
 172:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <minute>
 176:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Nack>
 17a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <hour+0x1>
 17e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <hour>
 182:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Stop>
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <main>:

int main(void)
{
	
	I2C_Init();										/* Initialize I2C */
 18a:	0e 94 3e 00 	call	0x7c	; 0x7c <I2C_Init>


    while(1)
    {
		RTC_Read_Clock(0);							/* Read the clock with second address i.e location is 0 */
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	0e 94 a4 00 	call	0x148	; 0x148 <RTC_Read_Clock>
		if (hour & TimeFormat12)	
 194:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <hour>
 198:	86 ff       	sbrs	r24, 6
 19a:	f9 cf       	rjmp	.-14     	; 0x18e <main+0x4>
		{
			if(hour=9 & AMPM){
 19c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <hour+0x1>
 1a0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <hour>
 1a4:	f4 cf       	rjmp	.-24     	; 0x18e <main+0x4>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
