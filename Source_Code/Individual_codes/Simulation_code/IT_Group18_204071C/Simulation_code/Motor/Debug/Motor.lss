
Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000b42  00000bd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080006a  0080006a  00000be0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001011  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000862  00000000  00000000  00001d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b2  00000000  00000000  00002577  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047b  00000000  00000000  00002f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000768  00000000  00000000  00003383  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003aeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 00 02 	jmp	0x400	; 0x400 <__vector_1>
   8:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3e 02 	call	0x47c	; 0x47c <main>
  8a:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <buzzer>:

void LCD_Clear()
{
	LCD_Command (0x01);         //Clear the display
	_delay_ms(2);
	LCD_Command (0x80);         //Force the cursor to the beginning of the 1st line
  92:	81 b3       	in	r24, 0x11	; 17
  94:	80 64       	ori	r24, 0x40	; 64
  96:	81 bb       	out	0x11, r24	; 17
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	82 bb       	out	0x12, r24	; 18
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	83 ed       	ldi	r24, 0xD3	; 211
  a2:	90 e3       	ldi	r25, 0x30	; 48
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <buzzer+0x12>
  ac:	00 c0       	rjmp	.+0      	; 0xae <buzzer+0x1c>
  ae:	00 00       	nop
  b0:	82 b3       	in	r24, 0x12	; 18
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	82 bb       	out	0x12, r24	; 18
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	83 ed       	ldi	r24, 0xD3	; 211
  ba:	90 e3       	ldi	r25, 0x30	; 48
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <buzzer+0x2a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <buzzer+0x34>
  c6:	00 00       	nop
  c8:	e7 cf       	rjmp	.-50     	; 0x98 <buzzer+0x6>

000000ca <LCD_Command>:
  ca:	98 b3       	in	r25, 0x18	; 24
  cc:	9f 70       	andi	r25, 0x0F	; 15
  ce:	28 2f       	mov	r18, r24
  d0:	20 7f       	andi	r18, 0xF0	; 240
  d2:	92 2b       	or	r25, r18
  d4:	98 bb       	out	0x18, r25	; 24
  d6:	98 b3       	in	r25, 0x18	; 24
  d8:	9e 7f       	andi	r25, 0xFE	; 254
  da:	98 bb       	out	0x18, r25	; 24
  dc:	98 b3       	in	r25, 0x18	; 24
  de:	92 60       	ori	r25, 0x02	; 2
  e0:	98 bb       	out	0x18, r25	; 24
  e2:	35 e0       	ldi	r19, 0x05	; 5
  e4:	3a 95       	dec	r19
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_Command+0x1a>
  e8:	00 00       	nop
  ea:	98 b3       	in	r25, 0x18	; 24
  ec:	9d 7f       	andi	r25, 0xFD	; 253
  ee:	98 bb       	out	0x18, r25	; 24
  f0:	ef e1       	ldi	r30, 0x1F	; 31
  f2:	f3 e0       	ldi	r31, 0x03	; 3
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_Command+0x2a>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_Command+0x30>
  fa:	00 00       	nop
  fc:	28 b3       	in	r18, 0x18	; 24
  fe:	f0 e1       	ldi	r31, 0x10	; 16
 100:	8f 9f       	mul	r24, r31
 102:	c0 01       	movw	r24, r0
 104:	11 24       	eor	r1, r1
 106:	92 2f       	mov	r25, r18
 108:	9f 70       	andi	r25, 0x0F	; 15
 10a:	89 2b       	or	r24, r25
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	82 60       	ori	r24, 0x02	; 2
 112:	88 bb       	out	0x18, r24	; 24
 114:	35 e0       	ldi	r19, 0x05	; 5
 116:	3a 95       	dec	r19
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Command+0x4c>
 11a:	00 00       	nop
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	8d 7f       	andi	r24, 0xFD	; 253
 120:	88 bb       	out	0x18, r24	; 24
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	9f e1       	ldi	r25, 0x1F	; 31
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_Command+0x5c>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <LCD_Command+0x62>
 12c:	00 00       	nop
 12e:	08 95       	ret

00000130 <LCD_Init>:
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	87 bb       	out	0x17, r24	; 23
 134:	8f e5       	ldi	r24, 0x5F	; 95
 136:	9a ee       	ldi	r25, 0xEA	; 234
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_Init+0x8>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_Init+0xe>
 13e:	00 00       	nop
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 65 00 	call	0xca	; 0xca <LCD_Command>
 146:	88 e2       	ldi	r24, 0x28	; 40
 148:	0e 94 65 00 	call	0xca	; 0xca <LCD_Command>
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	0e 94 65 00 	call	0xca	; 0xca <LCD_Command>
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	0e 94 65 00 	call	0xca	; 0xca <LCD_Command>
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 65 00 	call	0xca	; 0xca <LCD_Command>
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9f e1       	ldi	r25, 0x1F	; 31
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_Init+0x32>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_Init+0x38>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <LCD_Print>:
}


void LCD_Print (char *str)
{
 16c:	fc 01       	movw	r30, r24
	int i;
	for(i=0; str[i]!=0; i++)
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	34 c0       	rjmp	.+104    	; 0x1dc <LCD_Print+0x70>
	{
		LCD_Port = (LCD_Port & 0x0F) | (str[i] & 0xF0);
 174:	88 b3       	in	r24, 0x18	; 24
 176:	8f 70       	andi	r24, 0x0F	; 15
 178:	90 7f       	andi	r25, 0xF0	; 240
 17a:	98 2b       	or	r25, r24
 17c:	98 bb       	out	0x18, r25	; 24
		LCD_Port |= (1<<RS);
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	81 60       	ori	r24, 0x01	; 1
 182:	88 bb       	out	0x18, r24	; 24
		LCD_Port|= (1<<EN);
 184:	88 b3       	in	r24, 0x18	; 24
 186:	82 60       	ori	r24, 0x02	; 2
 188:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	85 e0       	ldi	r24, 0x05	; 5
 18c:	8a 95       	dec	r24
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_Print+0x20>
 190:	00 00       	nop
		_delay_us(1);
		LCD_Port &= ~ (1<<EN);
 192:	88 b3       	in	r24, 0x18	; 24
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	88 bb       	out	0x18, r24	; 24
 198:	8f e1       	ldi	r24, 0x1F	; 31
 19a:	93 e0       	ldi	r25, 0x03	; 3
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Print+0x30>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Print+0x36>
 1a2:	00 00       	nop
		_delay_us(200);
		LCD_Port = (LCD_Port & 0x0F) | (str[i] << 4);
 1a4:	48 b3       	in	r20, 0x18	; 24
 1a6:	9c 91       	ld	r25, X
 1a8:	80 e1       	ldi	r24, 0x10	; 16
 1aa:	98 9f       	mul	r25, r24
 1ac:	90 01       	movw	r18, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	94 2f       	mov	r25, r20
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	29 2b       	or	r18, r25
 1b6:	28 bb       	out	0x18, r18	; 24
		LCD_Port |= (1<<EN);
 1b8:	98 b3       	in	r25, 0x18	; 24
 1ba:	92 60       	ori	r25, 0x02	; 2
 1bc:	98 bb       	out	0x18, r25	; 24
 1be:	95 e0       	ldi	r25, 0x05	; 5
 1c0:	9a 95       	dec	r25
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_Print+0x54>
 1c4:	00 00       	nop
		_delay_us(1);
		LCD_Port &= ~(1<<EN);
 1c6:	98 b3       	in	r25, 0x18	; 24
 1c8:	9d 7f       	andi	r25, 0xFD	; 253
 1ca:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	8f e3       	ldi	r24, 0x3F	; 63
 1ce:	9f e1       	ldi	r25, 0x1F	; 31
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCD_Print+0x64>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <LCD_Print+0x6a>
 1d6:	00 00       	nop


void LCD_Print (char *str)
{
	int i;
	for(i=0; str[i]!=0; i++)
 1d8:	6f 5f       	subi	r22, 0xFF	; 255
 1da:	7f 4f       	sbci	r23, 0xFF	; 255
 1dc:	df 01       	movw	r26, r30
 1de:	a6 0f       	add	r26, r22
 1e0:	b7 1f       	adc	r27, r23
 1e2:	9c 91       	ld	r25, X
 1e4:	91 11       	cpse	r25, r1
 1e6:	c6 cf       	rjmp	.-116    	; 0x174 <LCD_Print+0x8>
		LCD_Port |= (1<<EN);
		_delay_us(1);
		LCD_Port &= ~(1<<EN);
		_delay_ms(2);
	}
}
 1e8:	08 95       	ret

000001ea <LCD_SetCursor>:


void LCD_SetCursor(unsigned char x, unsigned char y)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <LCD_SetCursor+0x6>
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
	unsigned char adr[] = {0x80, 0xC0};
 1f4:	90 e8       	ldi	r25, 0x80	; 128
 1f6:	99 83       	std	Y+1, r25	; 0x01
 1f8:	90 ec       	ldi	r25, 0xC0	; 192
 1fa:	9a 83       	std	Y+2, r25	; 0x02
	LCD_Command(adr[y-1] + x-1);
 1fc:	e6 2f       	mov	r30, r22
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	21 e0       	ldi	r18, 0x01	; 1
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	2c 0f       	add	r18, r28
 208:	3d 1f       	adc	r19, r29
 20a:	e2 0f       	add	r30, r18
 20c:	f3 1f       	adc	r31, r19
 20e:	90 81       	ld	r25, Z
 210:	89 0f       	add	r24, r25
 212:	81 50       	subi	r24, 0x01	; 1
 214:	0e 94 65 00 	call	0xca	; 0xca <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	8f e8       	ldi	r24, 0x8F	; 143
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_SetCursor+0x32>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_SetCursor+0x38>
 222:	00 00       	nop
	_delay_us(100);
}
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <EncoderInit>:
}

void EncoderInit(void)
{
	//set pins as input
	DDRD &= ~((1<<PD2)|(1<<PD3));
 22e:	81 b3       	in	r24, 0x11	; 17
 230:	83 7f       	andi	r24, 0xF3	; 243
 232:	81 bb       	out	0x11, r24	; 17
	//enable interrnal pullups;
	PORTD |= (1<<PD2)|(1<<PD3);
 234:	82 b3       	in	r24, 0x12	; 18
 236:	8c 60       	ori	r24, 0x0C	; 12
 238:	82 bb       	out	0x12, r24	; 18
 23a:	08 95       	ret

0000023c <CheckEncoders>:
}

void CheckEncoders(void)
{
 23c:	cf 92       	push	r12
 23e:	df 92       	push	r13
 240:	ef 92       	push	r14
 242:	ff 92       	push	r15
	disRight += (countRight/PPR) * WHEELCIRCUMFERENCE;
 244:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <countRight>
 248:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <countRight+0x1>
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatunsisf>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 ea       	ldi	r20, 0xA0	; 160
 25a:	51 e4       	ldi	r21, 0x41	; 65
 25c:	0e 94 ac 03 	call	0x758	; 0x758 <__divsf3>
 260:	29 e2       	ldi	r18, 0x29	; 41
 262:	3c e5       	ldi	r19, 0x5C	; 92
 264:	43 e2       	ldi	r20, 0x23	; 35
 266:	52 e4       	ldi	r21, 0x42	; 66
 268:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__mulsf3>
 26c:	6b 01       	movw	r12, r22
 26e:	7c 01       	movw	r14, r24
 270:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <__data_end>
 274:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <__data_end+0x1>
 278:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end+0x2>
 27c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x3>
 280:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatunsisf>
 284:	a7 01       	movw	r20, r14
 286:	96 01       	movw	r18, r12
 288:	0e 94 40 03 	call	0x680	; 0x680 <__addsf3>
 28c:	0e 94 1e 04 	call	0x83c	; 0x83c <__fixunssfsi>
 290:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <__data_end>
 294:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <__data_end+0x1>
 298:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end+0x2>
 29c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x3>
	disLeft += (countLeft/PPR) * WHEELCIRCUMFERENCE;
 2a0:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <countLeft>
 2a4:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <countLeft+0x1>
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatunsisf>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 ea       	ldi	r20, 0xA0	; 160
 2b6:	51 e4       	ldi	r21, 0x41	; 65
 2b8:	0e 94 ac 03 	call	0x758	; 0x758 <__divsf3>
 2bc:	29 e2       	ldi	r18, 0x29	; 41
 2be:	3c e5       	ldi	r19, 0x5C	; 92
 2c0:	43 e2       	ldi	r20, 0x23	; 35
 2c2:	52 e4       	ldi	r21, 0x42	; 66
 2c4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__mulsf3>
 2c8:	6b 01       	movw	r12, r22
 2ca:	7c 01       	movw	r14, r24
 2cc:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <disLeft>
 2d0:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <disLeft+0x1>
 2d4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <disLeft+0x2>
 2d8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <disLeft+0x3>
 2dc:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatunsisf>
 2e0:	a7 01       	movw	r20, r14
 2e2:	96 01       	movw	r18, r12
 2e4:	0e 94 40 03 	call	0x680	; 0x680 <__addsf3>
 2e8:	0e 94 1e 04 	call	0x83c	; 0x83c <__fixunssfsi>
 2ec:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <disLeft>
 2f0:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <disLeft+0x1>
 2f4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <disLeft+0x2>
 2f8:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <disLeft+0x3>
	speedRight = ((countRight/(Time_Interval*GearRatio))/PPR)*60.0;   // Speed equation
 2fc:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <countRight>
 300:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <countRight+0x1>
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatunsisf>
 30c:	2e e7       	ldi	r18, 0x7E	; 126
 30e:	3a e6       	ldi	r19, 0x6A	; 106
 310:	4c e3       	ldi	r20, 0x3C	; 60
 312:	5f e3       	ldi	r21, 0x3F	; 63
 314:	0e 94 ac 03 	call	0x758	; 0x758 <__divsf3>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	40 ea       	ldi	r20, 0xA0	; 160
 31e:	51 e4       	ldi	r21, 0x41	; 65
 320:	0e 94 ac 03 	call	0x758	; 0x758 <__divsf3>
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 e7       	ldi	r20, 0x70	; 112
 32a:	52 e4       	ldi	r21, 0x42	; 66
 32c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__mulsf3>
 330:	0e 94 1e 04 	call	0x83c	; 0x83c <__fixunssfsi>
 334:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <speedRight>
 338:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <speedRight+0x1>
 33c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <speedRight+0x2>
 340:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <speedRight+0x3>
	speedLeft= ((countLeft/(Time_Interval*GearRatio))/PPR)*60.0;
 344:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <countLeft>
 348:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <countLeft+0x1>
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatunsisf>
 354:	2e e7       	ldi	r18, 0x7E	; 126
 356:	3a e6       	ldi	r19, 0x6A	; 106
 358:	4c e3       	ldi	r20, 0x3C	; 60
 35a:	5f e3       	ldi	r21, 0x3F	; 63
 35c:	0e 94 ac 03 	call	0x758	; 0x758 <__divsf3>
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	40 ea       	ldi	r20, 0xA0	; 160
 366:	51 e4       	ldi	r21, 0x41	; 65
 368:	0e 94 ac 03 	call	0x758	; 0x758 <__divsf3>
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	40 e7       	ldi	r20, 0x70	; 112
 372:	52 e4       	ldi	r21, 0x42	; 66
 374:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__mulsf3>
 378:	0e 94 1e 04 	call	0x83c	; 0x83c <__fixunssfsi>
 37c:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <speedLeft>
 380:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <speedLeft+0x1>
 384:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <speedLeft+0x2>
 388:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <speedLeft+0x3>
	countRight = 0;
 38c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <countRight+0x1>
 390:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <countRight>
	countLeft = 0;
 394:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <countLeft+0x1>
 398:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <countLeft>
	TCNT0 = Init_ticks;
 39c:	84 e6       	ldi	r24, 0x64	; 100
 39e:	82 bf       	out	0x32, r24	; 50
	
}
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	cf 90       	pop	r12
 3a8:	08 95       	ret

000003aa <Timer0_Start>:

void Timer0_Start(void)
{
	TCNT0 = Init_ticks;  		/* Load TCNT0, count for 10ms*/
 3aa:	84 e6       	ldi	r24, 0x64	; 100
 3ac:	82 bf       	out	0x32, r24	; 50
	TCCR0 = (1<<CS02) | (1<<CS00); /* Start timer0 with /1024 prescaler*/
 3ae:	85 e0       	ldi	r24, 0x05	; 5
 3b0:	83 bf       	out	0x33, r24	; 51
	TIMSK=(1<<TOIE0);  	/* Enable Timer0 overflow interrupts */
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	89 bf       	out	0x39, r24	; 57
 3b6:	08 95       	ret

000003b8 <__vector_11>:
}

ISR(TIMER0_OVF_vect)
{
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 93       	push	r18
 3c4:	3f 93       	push	r19
 3c6:	4f 93       	push	r20
 3c8:	5f 93       	push	r21
 3ca:	6f 93       	push	r22
 3cc:	7f 93       	push	r23
 3ce:	8f 93       	push	r24
 3d0:	9f 93       	push	r25
 3d2:	af 93       	push	r26
 3d4:	bf 93       	push	r27
 3d6:	ef 93       	push	r30
 3d8:	ff 93       	push	r31
	//reading Encoders
	CheckEncoders();
 3da:	0e 94 1e 01 	call	0x23c	; 0x23c <CheckEncoders>
}
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	7f 91       	pop	r23
 3ec:	6f 91       	pop	r22
 3ee:	5f 91       	pop	r21
 3f0:	4f 91       	pop	r20
 3f2:	3f 91       	pop	r19
 3f4:	2f 91       	pop	r18
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <__vector_1>:

/* Interrupt Service Routine for INT0 to count each pulse from encoder */
ISR(INT0_vect)
{
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	8f 93       	push	r24
 40c:	9f 93       	push	r25
	countRight++;
 40e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <countRight>
 412:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <countRight+0x1>
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <countRight+0x1>
 41c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <countRight>
	
}
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <__vector_2>:

/* EX PIN ISR to count each pulse from encoder */
ISR(INT1_vect)
{
 42e:	1f 92       	push	r1
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	11 24       	eor	r1, r1
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
	countLeft++;
 43c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <countLeft>
 440:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <countLeft+0x1>
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <countLeft+0x1>
 44a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <countLeft>
	
}
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <init_system>:

void init_system(){
	
	//Initialize motor subsystem
	MotorInit();
 45c:	0e 94 ef 02 	call	0x5de	; 0x5de <MotorInit>
	EncoderInit();
 460:	0e 94 17 01 	call	0x22e	; 0x22e <EncoderInit>
	sei();
 464:	78 94       	sei
	GICR = 1<<INT0;		/* Enable INT0*/
 466:	80 e4       	ldi	r24, 0x40	; 64
 468:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 | 1<<ISC00;  /* Trigger INT0 on rising edge */
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	85 bf       	out	0x35, r24	; 53
	
	GICR = 1<<INT1;		/* Enable INT1*/
 46e:	80 e8       	ldi	r24, 0x80	; 128
 470:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC11 | 1<<ISC10;  /* Trigger INT1 on rising edge */
 472:	8c e0       	ldi	r24, 0x0C	; 12
 474:	85 bf       	out	0x35, r24	; 53
	
	Timer0_Start();
 476:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Timer0_Start>
 47a:	08 95       	ret

0000047c <main>:

void EncoderInit(void);
void init_system();

int main()
{
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	00 d0       	rcall	.+0      	; 0x482 <main+0x6>
 482:	00 d0       	rcall	.+0      	; 0x484 <main+0x8>
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
	init_system();
 488:	0e 94 2e 02 	call	0x45c	; 0x45c <init_system>
	LCD_Init();
 48c:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Init>
	
	while(1){
		

		char numberString[4];
		LCD_SetCursor(1, 1);
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_SetCursor>
		LCD_Print("DISTANCE:");
 498:	80 e6       	ldi	r24, 0x60	; 96
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_Print>
		LCD_SetCursor(10, 1);
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	8a e0       	ldi	r24, 0x0A	; 10
 4a4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_SetCursor>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4a8:	4a e0       	ldi	r20, 0x0A	; 10
 4aa:	be 01       	movw	r22, r28
 4ac:	6f 5f       	subi	r22, 0xFF	; 255
 4ae:	7f 4f       	sbci	r23, 0xFF	; 255
 4b0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <disLeft>
 4b4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <disLeft+0x1>
 4b8:	0e 94 6a 05 	call	0xad4	; 0xad4 <__itoa_ncheck>
		itoa(disLeft, numberString, 10);
		LCD_Print(numberString);
 4bc:	ce 01       	movw	r24, r28
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_Print>
		
		
		if (disLeft <= 1000)
 4c4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <disLeft>
 4c8:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <disLeft+0x1>
 4cc:	a0 91 70 00 	lds	r26, 0x0070	; 0x800070 <disLeft+0x2>
 4d0:	b0 91 71 00 	lds	r27, 0x0071	; 0x800071 <disLeft+0x3>
 4d4:	89 3e       	cpi	r24, 0xE9	; 233
 4d6:	03 e0       	ldi	r16, 0x03	; 3
 4d8:	90 07       	cpc	r25, r16
 4da:	a1 05       	cpc	r26, r1
 4dc:	b1 05       	cpc	r27, r1
 4de:	08 f0       	brcs	.+2      	; 0x4e2 <main+0x66>
 4e0:	74 c0       	rjmp	.+232    	; 0x5ca <main+0x14e>
		{
			if(disLeft < 500){
 4e2:	84 3f       	cpi	r24, 0xF4	; 244
 4e4:	11 e0       	ldi	r17, 0x01	; 1
 4e6:	91 07       	cpc	r25, r17
 4e8:	a1 05       	cpc	r26, r1
 4ea:	b1 05       	cpc	r27, r1
 4ec:	d8 f5       	brcc	.+118    	; 0x564 <main+0xe8>
				
				//Start Moving Forward
				MotorA(MOTOR_CW,255);
 4ee:	6f ef       	ldi	r22, 0xFF	; 255
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MotorA>
				MotorB(MOTOR_CCW,255);
 4f6:	6f ef       	ldi	r22, 0xFF	; 255
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	0e 94 1e 03 	call	0x63c	; 0x63c <MotorB>
				uint8_t wheelspeed;
				
				if(disLeft > 380){
 4fe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <disLeft>
 502:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <disLeft+0x1>
 506:	a0 91 70 00 	lds	r26, 0x0070	; 0x800070 <disLeft+0x2>
 50a:	b0 91 71 00 	lds	r27, 0x0071	; 0x800071 <disLeft+0x3>
 50e:	8d 37       	cpi	r24, 0x7D	; 125
 510:	21 e0       	ldi	r18, 0x01	; 1
 512:	92 07       	cpc	r25, r18
 514:	a1 05       	cpc	r26, r1
 516:	b1 05       	cpc	r27, r1
 518:	08 f4       	brcc	.+2      	; 0x51c <main+0xa0>
 51a:	ba cf       	rjmp	.-140    	; 0x490 <main+0x14>
					
					wheelspeed = 10 * ((500 - disLeft)/10);
 51c:	44 ef       	ldi	r20, 0xF4	; 244
 51e:	51 e0       	ldi	r21, 0x01	; 1
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	8a 01       	movw	r16, r20
 526:	9b 01       	movw	r18, r22
 528:	08 1b       	sub	r16, r24
 52a:	19 0b       	sbc	r17, r25
 52c:	2a 0b       	sbc	r18, r26
 52e:	3b 0b       	sbc	r19, r27
 530:	c9 01       	movw	r24, r18
 532:	b8 01       	movw	r22, r16
 534:	2a e0       	ldi	r18, 0x0A	; 10
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	50 e0       	ldi	r21, 0x00	; 0
 53c:	0e 94 48 05 	call	0xa90	; 0xa90 <__udivmodsi4>
 540:	12 2f       	mov	r17, r18
 542:	11 0f       	add	r17, r17
 544:	81 2f       	mov	r24, r17
 546:	88 0f       	add	r24, r24
 548:	88 0f       	add	r24, r24
 54a:	18 0f       	add	r17, r24
					if(wheelspeed < 5){
 54c:	15 30       	cpi	r17, 0x05	; 5
 54e:	08 f4       	brcc	.+2      	; 0x552 <main+0xd6>
						wheelspeed = 0;
 550:	10 e0       	ldi	r17, 0x00	; 0
					}
					MotorA(MOTOR_CW,wheelspeed);
 552:	61 2f       	mov	r22, r17
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MotorA>
					MotorB(MOTOR_CCW,wheelspeed);
 55a:	61 2f       	mov	r22, r17
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	0e 94 1e 03 	call	0x63c	; 0x63c <MotorB>
 562:	96 cf       	rjmp	.-212    	; 0x490 <main+0x14>
				}
				
			}
			else if (500 <= disLeft && disLeft < 580)
 564:	ac 01       	movw	r20, r24
 566:	bd 01       	movw	r22, r26
 568:	44 5f       	subi	r20, 0xF4	; 244
 56a:	51 40       	sbci	r21, 0x01	; 1
 56c:	61 09       	sbc	r22, r1
 56e:	71 09       	sbc	r23, r1
 570:	40 35       	cpi	r20, 0x50	; 80
 572:	51 05       	cpc	r21, r1
 574:	61 05       	cpc	r22, r1
 576:	71 05       	cpc	r23, r1
 578:	48 f4       	brcc	.+18     	; 0x58c <main+0x110>
			{
				MotorA(MOTOR_STOP,0);
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MotorA>
				MotorB(MOTOR_CCW,150);
 582:	66 e9       	ldi	r22, 0x96	; 150
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	0e 94 1e 03 	call	0x63c	; 0x63c <MotorB>
 58a:	82 cf       	rjmp	.-252    	; 0x490 <main+0x14>
			}
			else if(disLeft == 580)
 58c:	84 34       	cpi	r24, 0x44	; 68
 58e:	92 40       	sbci	r25, 0x02	; 2
 590:	a1 05       	cpc	r26, r1
 592:	b1 05       	cpc	r27, r1
 594:	89 f4       	brne	.+34     	; 0x5b8 <main+0x13c>
			{
				MotorA(MOTOR_STOP,0);
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MotorA>
				MotorB(MOTOR_STOP,0);
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	0e 94 1e 03 	call	0x63c	; 0x63c <MotorB>
				//Start Moving Forward
				MotorA(MOTOR_CW,255);
 5a6:	6f ef       	ldi	r22, 0xFF	; 255
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MotorA>
				MotorB(MOTOR_CCW,255);
 5ae:	6f ef       	ldi	r22, 0xFF	; 255
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	0e 94 1e 03 	call	0x63c	; 0x63c <MotorB>
 5b6:	6c cf       	rjmp	.-296    	; 0x490 <main+0x14>
			}
			else{
				//Start Moving Forward
				MotorA(MOTOR_CW,255);
 5b8:	6f ef       	ldi	r22, 0xFF	; 255
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MotorA>
				MotorB(MOTOR_CCW,255);
 5c0:	6f ef       	ldi	r22, 0xFF	; 255
 5c2:	82 e0       	ldi	r24, 0x02	; 2
 5c4:	0e 94 1e 03 	call	0x63c	; 0x63c <MotorB>
			MotorA(MOTOR_STOP,0);
			MotorB(MOTOR_STOP,0);
			buzzer();
		}
		
	} 
 5c8:	63 cf       	rjmp	.-314    	; 0x490 <main+0x14>
				MotorA(MOTOR_CW,255);
				MotorB(MOTOR_CCW,255);
			}
		}
		else{
			MotorA(MOTOR_STOP,0);
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MotorA>
			MotorB(MOTOR_STOP,0);
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 1e 03 	call	0x63c	; 0x63c <MotorB>
			buzzer();
 5da:	0e 94 49 00 	call	0x92	; 0x92 <buzzer>

000005de <MotorInit>:
void MotorInit()
{

	//set up pwm for speed control - PWM Phase Correct - 8 bit - Inverted

	TCCR1A=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM10); //Timer counter control Reg ,Set OC1A/OC1B on compare match when upcounting. Clear OC1A/OC1B on compare match when downcounting.
 5de:	81 ea       	ldi	r24, 0xA1	; 161
 5e0:	8f bd       	out	0x2f, r24	; 47



	//clk=fcpu/64

	TCCR1B=(1<<CS11)|(1<<CS10);
 5e2:	83 e0       	ldi	r24, 0x03	; 3
 5e4:	8e bd       	out	0x2e, r24	; 46

	//Set the corresponding port pin to output

	DDR(OC1A_PORT)|=(1<<OC1A_PIN);
 5e6:	81 b3       	in	r24, 0x11	; 17
 5e8:	80 62       	ori	r24, 0x20	; 32
 5ea:	81 bb       	out	0x11, r24	; 17
	DDR(OC1B_PORT)|=(1<<OC1B_PIN);
 5ec:	81 b3       	in	r24, 0x11	; 17
 5ee:	80 61       	ori	r24, 0x10	; 16
 5f0:	81 bb       	out	0x11, r24	; 17

	//Set the direction control PINs to OUT
	DDRC|=0X3C;	//PC2 to PC5 as output
 5f2:	84 b3       	in	r24, 0x14	; 20
 5f4:	8c 63       	ori	r24, 0x3C	; 60
 5f6:	84 bb       	out	0x14, r24	; 20
 5f8:	08 95       	ret

000005fa <MotorA>:


void MotorA(uint8_t dir,uint8_t speed)
{
	//Direction
	if(dir == MOTOR_STOP)
 5fa:	81 11       	cpse	r24, r1
 5fc:	07 c0       	rjmp	.+14     	; 0x60c <MotorA+0x12>
	{
		PORTC&=(~(1<<PC2));
 5fe:	85 b3       	in	r24, 0x15	; 21
 600:	8b 7f       	andi	r24, 0xFB	; 251
 602:	85 bb       	out	0x15, r24	; 21
		PORTC&=(~(1<<PC3));
 604:	85 b3       	in	r24, 0x15	; 21
 606:	87 7f       	andi	r24, 0xF7	; 247
 608:	85 bb       	out	0x15, r24	; 21
 60a:	11 c0       	rjmp	.+34     	; 0x62e <MotorA+0x34>
	}

	else if(dir == MOTOR_CCW)
 60c:	82 30       	cpi	r24, 0x02	; 2
 60e:	39 f4       	brne	.+14     	; 0x61e <MotorA+0x24>
	{
		PORTC&=(~(1<<PC2));
 610:	85 b3       	in	r24, 0x15	; 21
 612:	8b 7f       	andi	r24, 0xFB	; 251
 614:	85 bb       	out	0x15, r24	; 21
		PORTC|=(1<<PC3);
 616:	85 b3       	in	r24, 0x15	; 21
 618:	88 60       	ori	r24, 0x08	; 8
 61a:	85 bb       	out	0x15, r24	; 21
 61c:	08 c0       	rjmp	.+16     	; 0x62e <MotorA+0x34>
	}
	else if(dir == MOTOR_CW)
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	31 f4       	brne	.+12     	; 0x62e <MotorA+0x34>
	{
		PORTC&=(~(1<<PC3));
 622:	85 b3       	in	r24, 0x15	; 21
 624:	87 7f       	andi	r24, 0xF7	; 247
 626:	85 bb       	out	0x15, r24	; 21
		PORTC|=(1<<PC2);
 628:	85 b3       	in	r24, 0x15	; 21
 62a:	84 60       	ori	r24, 0x04	; 4
 62c:	85 bb       	out	0x15, r24	; 21
	}

	//Speed
	uint8_t sreg=SREG; //store SREG value
 62e:	8f b7       	in	r24, 0x3f	; 63
	cli();   //Disable Interrupts during times sequence
 630:	f8 94       	cli

	OCR1A=speed;
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	7b bd       	out	0x2b, r23	; 43
 636:	6a bd       	out	0x2a, r22	; 42

	SREG=sreg;  //Restore SREG value(I-bit)
 638:	8f bf       	out	0x3f, r24	; 63
 63a:	08 95       	ret

0000063c <MotorB>:


void MotorB(uint8_t dir,uint8_t speed)
{
	//Direction
	if(dir == MOTOR_STOP)
 63c:	81 11       	cpse	r24, r1
 63e:	07 c0       	rjmp	.+14     	; 0x64e <MotorB+0x12>
	{
		PORTC&=(~(1<<PC4));
 640:	85 b3       	in	r24, 0x15	; 21
 642:	8f 7e       	andi	r24, 0xEF	; 239
 644:	85 bb       	out	0x15, r24	; 21
		PORTC&=(~(1<<PC5));
 646:	85 b3       	in	r24, 0x15	; 21
 648:	8f 7d       	andi	r24, 0xDF	; 223
 64a:	85 bb       	out	0x15, r24	; 21
 64c:	11 c0       	rjmp	.+34     	; 0x670 <MotorB+0x34>
	}

	else if(dir == MOTOR_CCW)
 64e:	82 30       	cpi	r24, 0x02	; 2
 650:	39 f4       	brne	.+14     	; 0x660 <MotorB+0x24>
	{
		PORTC&=(~(1<<PC4)); //Define pull ups and set output low
 652:	85 b3       	in	r24, 0x15	; 21
 654:	8f 7e       	andi	r24, 0xEF	; 239
 656:	85 bb       	out	0x15, r24	; 21
		PORTC|=(1<<PC5);  //Define pull ups and set output high
 658:	85 b3       	in	r24, 0x15	; 21
 65a:	80 62       	ori	r24, 0x20	; 32
 65c:	85 bb       	out	0x15, r24	; 21
 65e:	08 c0       	rjmp	.+16     	; 0x670 <MotorB+0x34>
	}
	else if(dir == MOTOR_CW)
 660:	81 30       	cpi	r24, 0x01	; 1
 662:	31 f4       	brne	.+12     	; 0x670 <MotorB+0x34>
	{
		PORTC&=(~(1<<PC5));
 664:	85 b3       	in	r24, 0x15	; 21
 666:	8f 7d       	andi	r24, 0xDF	; 223
 668:	85 bb       	out	0x15, r24	; 21
		PORTC|=(1<<PC4);
 66a:	85 b3       	in	r24, 0x15	; 21
 66c:	80 61       	ori	r24, 0x10	; 16
 66e:	85 bb       	out	0x15, r24	; 21
	}

	//Speed
	uint8_t sreg=SREG;
 670:	8f b7       	in	r24, 0x3f	; 63
	cli();
 672:	f8 94       	cli

	OCR1B=speed;
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	79 bd       	out	0x29, r23	; 41
 678:	68 bd       	out	0x28, r22	; 40

	SREG=sreg;
 67a:	8f bf       	out	0x3f, r24	; 63
 67c:	08 95       	ret

0000067e <__subsf3>:
 67e:	50 58       	subi	r21, 0x80	; 128

00000680 <__addsf3>:
 680:	bb 27       	eor	r27, r27
 682:	aa 27       	eor	r26, r26
 684:	0e 94 57 03 	call	0x6ae	; 0x6ae <__addsf3x>
 688:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_round>
 68c:	0e 94 93 04 	call	0x926	; 0x926 <__fp_pscA>
 690:	38 f0       	brcs	.+14     	; 0x6a0 <__addsf3+0x20>
 692:	0e 94 9a 04 	call	0x934	; 0x934 <__fp_pscB>
 696:	20 f0       	brcs	.+8      	; 0x6a0 <__addsf3+0x20>
 698:	39 f4       	brne	.+14     	; 0x6a8 <__addsf3+0x28>
 69a:	9f 3f       	cpi	r25, 0xFF	; 255
 69c:	19 f4       	brne	.+6      	; 0x6a4 <__addsf3+0x24>
 69e:	26 f4       	brtc	.+8      	; 0x6a8 <__addsf3+0x28>
 6a0:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_nan>
 6a4:	0e f4       	brtc	.+2      	; 0x6a8 <__addsf3+0x28>
 6a6:	e0 95       	com	r30
 6a8:	e7 fb       	bst	r30, 7
 6aa:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_inf>

000006ae <__addsf3x>:
 6ae:	e9 2f       	mov	r30, r25
 6b0:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_split3>
 6b4:	58 f3       	brcs	.-42     	; 0x68c <__addsf3+0xc>
 6b6:	ba 17       	cp	r27, r26
 6b8:	62 07       	cpc	r22, r18
 6ba:	73 07       	cpc	r23, r19
 6bc:	84 07       	cpc	r24, r20
 6be:	95 07       	cpc	r25, r21
 6c0:	20 f0       	brcs	.+8      	; 0x6ca <__addsf3x+0x1c>
 6c2:	79 f4       	brne	.+30     	; 0x6e2 <__addsf3x+0x34>
 6c4:	a6 f5       	brtc	.+104    	; 0x72e <__addsf3x+0x80>
 6c6:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_zero>
 6ca:	0e f4       	brtc	.+2      	; 0x6ce <__addsf3x+0x20>
 6cc:	e0 95       	com	r30
 6ce:	0b 2e       	mov	r0, r27
 6d0:	ba 2f       	mov	r27, r26
 6d2:	a0 2d       	mov	r26, r0
 6d4:	0b 01       	movw	r0, r22
 6d6:	b9 01       	movw	r22, r18
 6d8:	90 01       	movw	r18, r0
 6da:	0c 01       	movw	r0, r24
 6dc:	ca 01       	movw	r24, r20
 6de:	a0 01       	movw	r20, r0
 6e0:	11 24       	eor	r1, r1
 6e2:	ff 27       	eor	r31, r31
 6e4:	59 1b       	sub	r21, r25
 6e6:	99 f0       	breq	.+38     	; 0x70e <__addsf3x+0x60>
 6e8:	59 3f       	cpi	r21, 0xF9	; 249
 6ea:	50 f4       	brcc	.+20     	; 0x700 <__addsf3x+0x52>
 6ec:	50 3e       	cpi	r21, 0xE0	; 224
 6ee:	68 f1       	brcs	.+90     	; 0x74a <__addsf3x+0x9c>
 6f0:	1a 16       	cp	r1, r26
 6f2:	f0 40       	sbci	r31, 0x00	; 0
 6f4:	a2 2f       	mov	r26, r18
 6f6:	23 2f       	mov	r18, r19
 6f8:	34 2f       	mov	r19, r20
 6fa:	44 27       	eor	r20, r20
 6fc:	58 5f       	subi	r21, 0xF8	; 248
 6fe:	f3 cf       	rjmp	.-26     	; 0x6e6 <__addsf3x+0x38>
 700:	46 95       	lsr	r20
 702:	37 95       	ror	r19
 704:	27 95       	ror	r18
 706:	a7 95       	ror	r26
 708:	f0 40       	sbci	r31, 0x00	; 0
 70a:	53 95       	inc	r21
 70c:	c9 f7       	brne	.-14     	; 0x700 <__addsf3x+0x52>
 70e:	7e f4       	brtc	.+30     	; 0x72e <__addsf3x+0x80>
 710:	1f 16       	cp	r1, r31
 712:	ba 0b       	sbc	r27, r26
 714:	62 0b       	sbc	r22, r18
 716:	73 0b       	sbc	r23, r19
 718:	84 0b       	sbc	r24, r20
 71a:	ba f0       	brmi	.+46     	; 0x74a <__addsf3x+0x9c>
 71c:	91 50       	subi	r25, 0x01	; 1
 71e:	a1 f0       	breq	.+40     	; 0x748 <__addsf3x+0x9a>
 720:	ff 0f       	add	r31, r31
 722:	bb 1f       	adc	r27, r27
 724:	66 1f       	adc	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	88 1f       	adc	r24, r24
 72a:	c2 f7       	brpl	.-16     	; 0x71c <__addsf3x+0x6e>
 72c:	0e c0       	rjmp	.+28     	; 0x74a <__addsf3x+0x9c>
 72e:	ba 0f       	add	r27, r26
 730:	62 1f       	adc	r22, r18
 732:	73 1f       	adc	r23, r19
 734:	84 1f       	adc	r24, r20
 736:	48 f4       	brcc	.+18     	; 0x74a <__addsf3x+0x9c>
 738:	87 95       	ror	r24
 73a:	77 95       	ror	r23
 73c:	67 95       	ror	r22
 73e:	b7 95       	ror	r27
 740:	f7 95       	ror	r31
 742:	9e 3f       	cpi	r25, 0xFE	; 254
 744:	08 f0       	brcs	.+2      	; 0x748 <__addsf3x+0x9a>
 746:	b0 cf       	rjmp	.-160    	; 0x6a8 <__addsf3+0x28>
 748:	93 95       	inc	r25
 74a:	88 0f       	add	r24, r24
 74c:	08 f0       	brcs	.+2      	; 0x750 <__addsf3x+0xa2>
 74e:	99 27       	eor	r25, r25
 750:	ee 0f       	add	r30, r30
 752:	97 95       	ror	r25
 754:	87 95       	ror	r24
 756:	08 95       	ret

00000758 <__divsf3>:
 758:	0e 94 c0 03 	call	0x780	; 0x780 <__divsf3x>
 75c:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_round>
 760:	0e 94 9a 04 	call	0x934	; 0x934 <__fp_pscB>
 764:	58 f0       	brcs	.+22     	; 0x77c <__divsf3+0x24>
 766:	0e 94 93 04 	call	0x926	; 0x926 <__fp_pscA>
 76a:	40 f0       	brcs	.+16     	; 0x77c <__divsf3+0x24>
 76c:	29 f4       	brne	.+10     	; 0x778 <__divsf3+0x20>
 76e:	5f 3f       	cpi	r21, 0xFF	; 255
 770:	29 f0       	breq	.+10     	; 0x77c <__divsf3+0x24>
 772:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_inf>
 776:	51 11       	cpse	r21, r1
 778:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_szero>
 77c:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_nan>

00000780 <__divsf3x>:
 780:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_split3>
 784:	68 f3       	brcs	.-38     	; 0x760 <__divsf3+0x8>

00000786 <__divsf3_pse>:
 786:	99 23       	and	r25, r25
 788:	b1 f3       	breq	.-20     	; 0x776 <__divsf3+0x1e>
 78a:	55 23       	and	r21, r21
 78c:	91 f3       	breq	.-28     	; 0x772 <__divsf3+0x1a>
 78e:	95 1b       	sub	r25, r21
 790:	55 0b       	sbc	r21, r21
 792:	bb 27       	eor	r27, r27
 794:	aa 27       	eor	r26, r26
 796:	62 17       	cp	r22, r18
 798:	73 07       	cpc	r23, r19
 79a:	84 07       	cpc	r24, r20
 79c:	38 f0       	brcs	.+14     	; 0x7ac <__divsf3_pse+0x26>
 79e:	9f 5f       	subi	r25, 0xFF	; 255
 7a0:	5f 4f       	sbci	r21, 0xFF	; 255
 7a2:	22 0f       	add	r18, r18
 7a4:	33 1f       	adc	r19, r19
 7a6:	44 1f       	adc	r20, r20
 7a8:	aa 1f       	adc	r26, r26
 7aa:	a9 f3       	breq	.-22     	; 0x796 <__divsf3_pse+0x10>
 7ac:	35 d0       	rcall	.+106    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7ae:	0e 2e       	mov	r0, r30
 7b0:	3a f0       	brmi	.+14     	; 0x7c0 <__divsf3_pse+0x3a>
 7b2:	e0 e8       	ldi	r30, 0x80	; 128
 7b4:	32 d0       	rcall	.+100    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7b6:	91 50       	subi	r25, 0x01	; 1
 7b8:	50 40       	sbci	r21, 0x00	; 0
 7ba:	e6 95       	lsr	r30
 7bc:	00 1c       	adc	r0, r0
 7be:	ca f7       	brpl	.-14     	; 0x7b2 <__divsf3_pse+0x2c>
 7c0:	2b d0       	rcall	.+86     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7c2:	fe 2f       	mov	r31, r30
 7c4:	29 d0       	rcall	.+82     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7c6:	66 0f       	add	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	bb 1f       	adc	r27, r27
 7ce:	26 17       	cp	r18, r22
 7d0:	37 07       	cpc	r19, r23
 7d2:	48 07       	cpc	r20, r24
 7d4:	ab 07       	cpc	r26, r27
 7d6:	b0 e8       	ldi	r27, 0x80	; 128
 7d8:	09 f0       	breq	.+2      	; 0x7dc <__divsf3_pse+0x56>
 7da:	bb 0b       	sbc	r27, r27
 7dc:	80 2d       	mov	r24, r0
 7de:	bf 01       	movw	r22, r30
 7e0:	ff 27       	eor	r31, r31
 7e2:	93 58       	subi	r25, 0x83	; 131
 7e4:	5f 4f       	sbci	r21, 0xFF	; 255
 7e6:	3a f0       	brmi	.+14     	; 0x7f6 <__divsf3_pse+0x70>
 7e8:	9e 3f       	cpi	r25, 0xFE	; 254
 7ea:	51 05       	cpc	r21, r1
 7ec:	78 f0       	brcs	.+30     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7ee:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_inf>
 7f2:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_szero>
 7f6:	5f 3f       	cpi	r21, 0xFF	; 255
 7f8:	e4 f3       	brlt	.-8      	; 0x7f2 <__divsf3_pse+0x6c>
 7fa:	98 3e       	cpi	r25, 0xE8	; 232
 7fc:	d4 f3       	brlt	.-12     	; 0x7f2 <__divsf3_pse+0x6c>
 7fe:	86 95       	lsr	r24
 800:	77 95       	ror	r23
 802:	67 95       	ror	r22
 804:	b7 95       	ror	r27
 806:	f7 95       	ror	r31
 808:	9f 5f       	subi	r25, 0xFF	; 255
 80a:	c9 f7       	brne	.-14     	; 0x7fe <__divsf3_pse+0x78>
 80c:	88 0f       	add	r24, r24
 80e:	91 1d       	adc	r25, r1
 810:	96 95       	lsr	r25
 812:	87 95       	ror	r24
 814:	97 f9       	bld	r25, 7
 816:	08 95       	ret
 818:	e1 e0       	ldi	r30, 0x01	; 1
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	bb 1f       	adc	r27, r27
 822:	62 17       	cp	r22, r18
 824:	73 07       	cpc	r23, r19
 826:	84 07       	cpc	r24, r20
 828:	ba 07       	cpc	r27, r26
 82a:	20 f0       	brcs	.+8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 82c:	62 1b       	sub	r22, r18
 82e:	73 0b       	sbc	r23, r19
 830:	84 0b       	sbc	r24, r20
 832:	ba 0b       	sbc	r27, r26
 834:	ee 1f       	adc	r30, r30
 836:	88 f7       	brcc	.-30     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 838:	e0 95       	com	r30
 83a:	08 95       	ret

0000083c <__fixunssfsi>:
 83c:	0e 94 ba 04 	call	0x974	; 0x974 <__fp_splitA>
 840:	88 f0       	brcs	.+34     	; 0x864 <__stack+0x5>
 842:	9f 57       	subi	r25, 0x7F	; 127
 844:	98 f0       	brcs	.+38     	; 0x86c <__stack+0xd>
 846:	b9 2f       	mov	r27, r25
 848:	99 27       	eor	r25, r25
 84a:	b7 51       	subi	r27, 0x17	; 23
 84c:	b0 f0       	brcs	.+44     	; 0x87a <__stack+0x1b>
 84e:	e1 f0       	breq	.+56     	; 0x888 <__stack+0x29>
 850:	66 0f       	add	r22, r22
 852:	77 1f       	adc	r23, r23
 854:	88 1f       	adc	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	1a f0       	brmi	.+6      	; 0x860 <__stack+0x1>
 85a:	ba 95       	dec	r27
 85c:	c9 f7       	brne	.-14     	; 0x850 <__fixunssfsi+0x14>
 85e:	14 c0       	rjmp	.+40     	; 0x888 <__stack+0x29>
 860:	b1 30       	cpi	r27, 0x01	; 1
 862:	91 f0       	breq	.+36     	; 0x888 <__stack+0x29>
 864:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__fp_zero>
 868:	b1 e0       	ldi	r27, 0x01	; 1
 86a:	08 95       	ret
 86c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_zero>
 870:	67 2f       	mov	r22, r23
 872:	78 2f       	mov	r23, r24
 874:	88 27       	eor	r24, r24
 876:	b8 5f       	subi	r27, 0xF8	; 248
 878:	39 f0       	breq	.+14     	; 0x888 <__stack+0x29>
 87a:	b9 3f       	cpi	r27, 0xF9	; 249
 87c:	cc f3       	brlt	.-14     	; 0x870 <__stack+0x11>
 87e:	86 95       	lsr	r24
 880:	77 95       	ror	r23
 882:	67 95       	ror	r22
 884:	b3 95       	inc	r27
 886:	d9 f7       	brne	.-10     	; 0x87e <__stack+0x1f>
 888:	3e f4       	brtc	.+14     	; 0x898 <__stack+0x39>
 88a:	90 95       	com	r25
 88c:	80 95       	com	r24
 88e:	70 95       	com	r23
 890:	61 95       	neg	r22
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	8f 4f       	sbci	r24, 0xFF	; 255
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	08 95       	ret

0000089a <__floatunsisf>:
 89a:	e8 94       	clt
 89c:	09 c0       	rjmp	.+18     	; 0x8b0 <__floatsisf+0x12>

0000089e <__floatsisf>:
 89e:	97 fb       	bst	r25, 7
 8a0:	3e f4       	brtc	.+14     	; 0x8b0 <__floatsisf+0x12>
 8a2:	90 95       	com	r25
 8a4:	80 95       	com	r24
 8a6:	70 95       	com	r23
 8a8:	61 95       	neg	r22
 8aa:	7f 4f       	sbci	r23, 0xFF	; 255
 8ac:	8f 4f       	sbci	r24, 0xFF	; 255
 8ae:	9f 4f       	sbci	r25, 0xFF	; 255
 8b0:	99 23       	and	r25, r25
 8b2:	a9 f0       	breq	.+42     	; 0x8de <__floatsisf+0x40>
 8b4:	f9 2f       	mov	r31, r25
 8b6:	96 e9       	ldi	r25, 0x96	; 150
 8b8:	bb 27       	eor	r27, r27
 8ba:	93 95       	inc	r25
 8bc:	f6 95       	lsr	r31
 8be:	87 95       	ror	r24
 8c0:	77 95       	ror	r23
 8c2:	67 95       	ror	r22
 8c4:	b7 95       	ror	r27
 8c6:	f1 11       	cpse	r31, r1
 8c8:	f8 cf       	rjmp	.-16     	; 0x8ba <__floatsisf+0x1c>
 8ca:	fa f4       	brpl	.+62     	; 0x90a <__floatsisf+0x6c>
 8cc:	bb 0f       	add	r27, r27
 8ce:	11 f4       	brne	.+4      	; 0x8d4 <__floatsisf+0x36>
 8d0:	60 ff       	sbrs	r22, 0
 8d2:	1b c0       	rjmp	.+54     	; 0x90a <__floatsisf+0x6c>
 8d4:	6f 5f       	subi	r22, 0xFF	; 255
 8d6:	7f 4f       	sbci	r23, 0xFF	; 255
 8d8:	8f 4f       	sbci	r24, 0xFF	; 255
 8da:	9f 4f       	sbci	r25, 0xFF	; 255
 8dc:	16 c0       	rjmp	.+44     	; 0x90a <__floatsisf+0x6c>
 8de:	88 23       	and	r24, r24
 8e0:	11 f0       	breq	.+4      	; 0x8e6 <__floatsisf+0x48>
 8e2:	96 e9       	ldi	r25, 0x96	; 150
 8e4:	11 c0       	rjmp	.+34     	; 0x908 <__floatsisf+0x6a>
 8e6:	77 23       	and	r23, r23
 8e8:	21 f0       	breq	.+8      	; 0x8f2 <__floatsisf+0x54>
 8ea:	9e e8       	ldi	r25, 0x8E	; 142
 8ec:	87 2f       	mov	r24, r23
 8ee:	76 2f       	mov	r23, r22
 8f0:	05 c0       	rjmp	.+10     	; 0x8fc <__floatsisf+0x5e>
 8f2:	66 23       	and	r22, r22
 8f4:	71 f0       	breq	.+28     	; 0x912 <__floatsisf+0x74>
 8f6:	96 e8       	ldi	r25, 0x86	; 134
 8f8:	86 2f       	mov	r24, r22
 8fa:	70 e0       	ldi	r23, 0x00	; 0
 8fc:	60 e0       	ldi	r22, 0x00	; 0
 8fe:	2a f0       	brmi	.+10     	; 0x90a <__floatsisf+0x6c>
 900:	9a 95       	dec	r25
 902:	66 0f       	add	r22, r22
 904:	77 1f       	adc	r23, r23
 906:	88 1f       	adc	r24, r24
 908:	da f7       	brpl	.-10     	; 0x900 <__floatsisf+0x62>
 90a:	88 0f       	add	r24, r24
 90c:	96 95       	lsr	r25
 90e:	87 95       	ror	r24
 910:	97 f9       	bld	r25, 7
 912:	08 95       	ret

00000914 <__fp_inf>:
 914:	97 f9       	bld	r25, 7
 916:	9f 67       	ori	r25, 0x7F	; 127
 918:	80 e8       	ldi	r24, 0x80	; 128
 91a:	70 e0       	ldi	r23, 0x00	; 0
 91c:	60 e0       	ldi	r22, 0x00	; 0
 91e:	08 95       	ret

00000920 <__fp_nan>:
 920:	9f ef       	ldi	r25, 0xFF	; 255
 922:	80 ec       	ldi	r24, 0xC0	; 192
 924:	08 95       	ret

00000926 <__fp_pscA>:
 926:	00 24       	eor	r0, r0
 928:	0a 94       	dec	r0
 92a:	16 16       	cp	r1, r22
 92c:	17 06       	cpc	r1, r23
 92e:	18 06       	cpc	r1, r24
 930:	09 06       	cpc	r0, r25
 932:	08 95       	ret

00000934 <__fp_pscB>:
 934:	00 24       	eor	r0, r0
 936:	0a 94       	dec	r0
 938:	12 16       	cp	r1, r18
 93a:	13 06       	cpc	r1, r19
 93c:	14 06       	cpc	r1, r20
 93e:	05 06       	cpc	r0, r21
 940:	08 95       	ret

00000942 <__fp_round>:
 942:	09 2e       	mov	r0, r25
 944:	03 94       	inc	r0
 946:	00 0c       	add	r0, r0
 948:	11 f4       	brne	.+4      	; 0x94e <__fp_round+0xc>
 94a:	88 23       	and	r24, r24
 94c:	52 f0       	brmi	.+20     	; 0x962 <__fp_round+0x20>
 94e:	bb 0f       	add	r27, r27
 950:	40 f4       	brcc	.+16     	; 0x962 <__fp_round+0x20>
 952:	bf 2b       	or	r27, r31
 954:	11 f4       	brne	.+4      	; 0x95a <__fp_round+0x18>
 956:	60 ff       	sbrs	r22, 0
 958:	04 c0       	rjmp	.+8      	; 0x962 <__fp_round+0x20>
 95a:	6f 5f       	subi	r22, 0xFF	; 255
 95c:	7f 4f       	sbci	r23, 0xFF	; 255
 95e:	8f 4f       	sbci	r24, 0xFF	; 255
 960:	9f 4f       	sbci	r25, 0xFF	; 255
 962:	08 95       	ret

00000964 <__fp_split3>:
 964:	57 fd       	sbrc	r21, 7
 966:	90 58       	subi	r25, 0x80	; 128
 968:	44 0f       	add	r20, r20
 96a:	55 1f       	adc	r21, r21
 96c:	59 f0       	breq	.+22     	; 0x984 <__fp_splitA+0x10>
 96e:	5f 3f       	cpi	r21, 0xFF	; 255
 970:	71 f0       	breq	.+28     	; 0x98e <__fp_splitA+0x1a>
 972:	47 95       	ror	r20

00000974 <__fp_splitA>:
 974:	88 0f       	add	r24, r24
 976:	97 fb       	bst	r25, 7
 978:	99 1f       	adc	r25, r25
 97a:	61 f0       	breq	.+24     	; 0x994 <__fp_splitA+0x20>
 97c:	9f 3f       	cpi	r25, 0xFF	; 255
 97e:	79 f0       	breq	.+30     	; 0x99e <__fp_splitA+0x2a>
 980:	87 95       	ror	r24
 982:	08 95       	ret
 984:	12 16       	cp	r1, r18
 986:	13 06       	cpc	r1, r19
 988:	14 06       	cpc	r1, r20
 98a:	55 1f       	adc	r21, r21
 98c:	f2 cf       	rjmp	.-28     	; 0x972 <__fp_split3+0xe>
 98e:	46 95       	lsr	r20
 990:	f1 df       	rcall	.-30     	; 0x974 <__fp_splitA>
 992:	08 c0       	rjmp	.+16     	; 0x9a4 <__fp_splitA+0x30>
 994:	16 16       	cp	r1, r22
 996:	17 06       	cpc	r1, r23
 998:	18 06       	cpc	r1, r24
 99a:	99 1f       	adc	r25, r25
 99c:	f1 cf       	rjmp	.-30     	; 0x980 <__fp_splitA+0xc>
 99e:	86 95       	lsr	r24
 9a0:	71 05       	cpc	r23, r1
 9a2:	61 05       	cpc	r22, r1
 9a4:	08 94       	sec
 9a6:	08 95       	ret

000009a8 <__fp_zero>:
 9a8:	e8 94       	clt

000009aa <__fp_szero>:
 9aa:	bb 27       	eor	r27, r27
 9ac:	66 27       	eor	r22, r22
 9ae:	77 27       	eor	r23, r23
 9b0:	cb 01       	movw	r24, r22
 9b2:	97 f9       	bld	r25, 7
 9b4:	08 95       	ret

000009b6 <__mulsf3>:
 9b6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__mulsf3x>
 9ba:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_round>
 9be:	0e 94 93 04 	call	0x926	; 0x926 <__fp_pscA>
 9c2:	38 f0       	brcs	.+14     	; 0x9d2 <__mulsf3+0x1c>
 9c4:	0e 94 9a 04 	call	0x934	; 0x934 <__fp_pscB>
 9c8:	20 f0       	brcs	.+8      	; 0x9d2 <__mulsf3+0x1c>
 9ca:	95 23       	and	r25, r21
 9cc:	11 f0       	breq	.+4      	; 0x9d2 <__mulsf3+0x1c>
 9ce:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_inf>
 9d2:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_nan>
 9d6:	11 24       	eor	r1, r1
 9d8:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_szero>

000009dc <__mulsf3x>:
 9dc:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_split3>
 9e0:	70 f3       	brcs	.-36     	; 0x9be <__mulsf3+0x8>

000009e2 <__mulsf3_pse>:
 9e2:	95 9f       	mul	r25, r21
 9e4:	c1 f3       	breq	.-16     	; 0x9d6 <__mulsf3+0x20>
 9e6:	95 0f       	add	r25, r21
 9e8:	50 e0       	ldi	r21, 0x00	; 0
 9ea:	55 1f       	adc	r21, r21
 9ec:	62 9f       	mul	r22, r18
 9ee:	f0 01       	movw	r30, r0
 9f0:	72 9f       	mul	r23, r18
 9f2:	bb 27       	eor	r27, r27
 9f4:	f0 0d       	add	r31, r0
 9f6:	b1 1d       	adc	r27, r1
 9f8:	63 9f       	mul	r22, r19
 9fa:	aa 27       	eor	r26, r26
 9fc:	f0 0d       	add	r31, r0
 9fe:	b1 1d       	adc	r27, r1
 a00:	aa 1f       	adc	r26, r26
 a02:	64 9f       	mul	r22, r20
 a04:	66 27       	eor	r22, r22
 a06:	b0 0d       	add	r27, r0
 a08:	a1 1d       	adc	r26, r1
 a0a:	66 1f       	adc	r22, r22
 a0c:	82 9f       	mul	r24, r18
 a0e:	22 27       	eor	r18, r18
 a10:	b0 0d       	add	r27, r0
 a12:	a1 1d       	adc	r26, r1
 a14:	62 1f       	adc	r22, r18
 a16:	73 9f       	mul	r23, r19
 a18:	b0 0d       	add	r27, r0
 a1a:	a1 1d       	adc	r26, r1
 a1c:	62 1f       	adc	r22, r18
 a1e:	83 9f       	mul	r24, r19
 a20:	a0 0d       	add	r26, r0
 a22:	61 1d       	adc	r22, r1
 a24:	22 1f       	adc	r18, r18
 a26:	74 9f       	mul	r23, r20
 a28:	33 27       	eor	r19, r19
 a2a:	a0 0d       	add	r26, r0
 a2c:	61 1d       	adc	r22, r1
 a2e:	23 1f       	adc	r18, r19
 a30:	84 9f       	mul	r24, r20
 a32:	60 0d       	add	r22, r0
 a34:	21 1d       	adc	r18, r1
 a36:	82 2f       	mov	r24, r18
 a38:	76 2f       	mov	r23, r22
 a3a:	6a 2f       	mov	r22, r26
 a3c:	11 24       	eor	r1, r1
 a3e:	9f 57       	subi	r25, 0x7F	; 127
 a40:	50 40       	sbci	r21, 0x00	; 0
 a42:	9a f0       	brmi	.+38     	; 0xa6a <__mulsf3_pse+0x88>
 a44:	f1 f0       	breq	.+60     	; 0xa82 <__mulsf3_pse+0xa0>
 a46:	88 23       	and	r24, r24
 a48:	4a f0       	brmi	.+18     	; 0xa5c <__mulsf3_pse+0x7a>
 a4a:	ee 0f       	add	r30, r30
 a4c:	ff 1f       	adc	r31, r31
 a4e:	bb 1f       	adc	r27, r27
 a50:	66 1f       	adc	r22, r22
 a52:	77 1f       	adc	r23, r23
 a54:	88 1f       	adc	r24, r24
 a56:	91 50       	subi	r25, 0x01	; 1
 a58:	50 40       	sbci	r21, 0x00	; 0
 a5a:	a9 f7       	brne	.-22     	; 0xa46 <__mulsf3_pse+0x64>
 a5c:	9e 3f       	cpi	r25, 0xFE	; 254
 a5e:	51 05       	cpc	r21, r1
 a60:	80 f0       	brcs	.+32     	; 0xa82 <__mulsf3_pse+0xa0>
 a62:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_inf>
 a66:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_szero>
 a6a:	5f 3f       	cpi	r21, 0xFF	; 255
 a6c:	e4 f3       	brlt	.-8      	; 0xa66 <__mulsf3_pse+0x84>
 a6e:	98 3e       	cpi	r25, 0xE8	; 232
 a70:	d4 f3       	brlt	.-12     	; 0xa66 <__mulsf3_pse+0x84>
 a72:	86 95       	lsr	r24
 a74:	77 95       	ror	r23
 a76:	67 95       	ror	r22
 a78:	b7 95       	ror	r27
 a7a:	f7 95       	ror	r31
 a7c:	e7 95       	ror	r30
 a7e:	9f 5f       	subi	r25, 0xFF	; 255
 a80:	c1 f7       	brne	.-16     	; 0xa72 <__mulsf3_pse+0x90>
 a82:	fe 2b       	or	r31, r30
 a84:	88 0f       	add	r24, r24
 a86:	91 1d       	adc	r25, r1
 a88:	96 95       	lsr	r25
 a8a:	87 95       	ror	r24
 a8c:	97 f9       	bld	r25, 7
 a8e:	08 95       	ret

00000a90 <__udivmodsi4>:
 a90:	a1 e2       	ldi	r26, 0x21	; 33
 a92:	1a 2e       	mov	r1, r26
 a94:	aa 1b       	sub	r26, r26
 a96:	bb 1b       	sub	r27, r27
 a98:	fd 01       	movw	r30, r26
 a9a:	0d c0       	rjmp	.+26     	; 0xab6 <__udivmodsi4_ep>

00000a9c <__udivmodsi4_loop>:
 a9c:	aa 1f       	adc	r26, r26
 a9e:	bb 1f       	adc	r27, r27
 aa0:	ee 1f       	adc	r30, r30
 aa2:	ff 1f       	adc	r31, r31
 aa4:	a2 17       	cp	r26, r18
 aa6:	b3 07       	cpc	r27, r19
 aa8:	e4 07       	cpc	r30, r20
 aaa:	f5 07       	cpc	r31, r21
 aac:	20 f0       	brcs	.+8      	; 0xab6 <__udivmodsi4_ep>
 aae:	a2 1b       	sub	r26, r18
 ab0:	b3 0b       	sbc	r27, r19
 ab2:	e4 0b       	sbc	r30, r20
 ab4:	f5 0b       	sbc	r31, r21

00000ab6 <__udivmodsi4_ep>:
 ab6:	66 1f       	adc	r22, r22
 ab8:	77 1f       	adc	r23, r23
 aba:	88 1f       	adc	r24, r24
 abc:	99 1f       	adc	r25, r25
 abe:	1a 94       	dec	r1
 ac0:	69 f7       	brne	.-38     	; 0xa9c <__udivmodsi4_loop>
 ac2:	60 95       	com	r22
 ac4:	70 95       	com	r23
 ac6:	80 95       	com	r24
 ac8:	90 95       	com	r25
 aca:	9b 01       	movw	r18, r22
 acc:	ac 01       	movw	r20, r24
 ace:	bd 01       	movw	r22, r26
 ad0:	cf 01       	movw	r24, r30
 ad2:	08 95       	ret

00000ad4 <__itoa_ncheck>:
 ad4:	bb 27       	eor	r27, r27
 ad6:	4a 30       	cpi	r20, 0x0A	; 10
 ad8:	31 f4       	brne	.+12     	; 0xae6 <__itoa_ncheck+0x12>
 ada:	99 23       	and	r25, r25
 adc:	22 f4       	brpl	.+8      	; 0xae6 <__itoa_ncheck+0x12>
 ade:	bd e2       	ldi	r27, 0x2D	; 45
 ae0:	90 95       	com	r25
 ae2:	81 95       	neg	r24
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	0c 94 76 05 	jmp	0xaec	; 0xaec <__utoa_common>

00000aea <__utoa_ncheck>:
 aea:	bb 27       	eor	r27, r27

00000aec <__utoa_common>:
 aec:	fb 01       	movw	r30, r22
 aee:	55 27       	eor	r21, r21
 af0:	aa 27       	eor	r26, r26
 af2:	88 0f       	add	r24, r24
 af4:	99 1f       	adc	r25, r25
 af6:	aa 1f       	adc	r26, r26
 af8:	a4 17       	cp	r26, r20
 afa:	10 f0       	brcs	.+4      	; 0xb00 <__utoa_common+0x14>
 afc:	a4 1b       	sub	r26, r20
 afe:	83 95       	inc	r24
 b00:	50 51       	subi	r21, 0x10	; 16
 b02:	b9 f7       	brne	.-18     	; 0xaf2 <__utoa_common+0x6>
 b04:	a0 5d       	subi	r26, 0xD0	; 208
 b06:	aa 33       	cpi	r26, 0x3A	; 58
 b08:	08 f0       	brcs	.+2      	; 0xb0c <__utoa_common+0x20>
 b0a:	a9 5d       	subi	r26, 0xD9	; 217
 b0c:	a1 93       	st	Z+, r26
 b0e:	00 97       	sbiw	r24, 0x00	; 0
 b10:	79 f7       	brne	.-34     	; 0xaf0 <__utoa_common+0x4>
 b12:	b1 11       	cpse	r27, r1
 b14:	b1 93       	st	Z+, r27
 b16:	11 92       	st	Z+, r1
 b18:	cb 01       	movw	r24, r22
 b1a:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <strrev>

00000b1e <strrev>:
 b1e:	dc 01       	movw	r26, r24
 b20:	fc 01       	movw	r30, r24
 b22:	67 2f       	mov	r22, r23
 b24:	71 91       	ld	r23, Z+
 b26:	77 23       	and	r23, r23
 b28:	e1 f7       	brne	.-8      	; 0xb22 <strrev+0x4>
 b2a:	32 97       	sbiw	r30, 0x02	; 2
 b2c:	04 c0       	rjmp	.+8      	; 0xb36 <strrev+0x18>
 b2e:	7c 91       	ld	r23, X
 b30:	6d 93       	st	X+, r22
 b32:	70 83       	st	Z, r23
 b34:	62 91       	ld	r22, -Z
 b36:	ae 17       	cp	r26, r30
 b38:	bf 07       	cpc	r27, r31
 b3a:	c8 f3       	brcs	.-14     	; 0xb2e <strrev+0x10>
 b3c:	08 95       	ret

00000b3e <_exit>:
 b3e:	f8 94       	cli

00000b40 <__stop_program>:
 b40:	ff cf       	rjmp	.-2      	; 0xb40 <__stop_program>
