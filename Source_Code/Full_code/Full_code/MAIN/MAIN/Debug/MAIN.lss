
MAIN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00001296  0000132a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000b2  008000b2  0000137c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fdb  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e5  00000000  00000000  000024cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f5  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000035ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b6  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e3  00000000  00000000  00003cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000042ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_1>
       8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d7 02 	call	0x5ae	; 0x5ae <main>
      8a:	0c 94 49 09 	jmp	0x1292	; 0x1292 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_init>:

#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void USART_init(unsigned long USART_BAUDRATE)				/* USART initialize function */
{
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);	/* Enable USART transmitter and receiver */
      92:	2a b1       	in	r18, 0x0a	; 10
      94:	28 69       	ori	r18, 0x98	; 152
      96:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */
      98:	20 b5       	in	r18, 0x20	; 32
      9a:	26 68       	ori	r18, 0x86	; 134
      9c:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
      9e:	dc 01       	movw	r26, r24
      a0:	cb 01       	movw	r24, r22
      a2:	88 0f       	add	r24, r24
      a4:	99 1f       	adc	r25, r25
      a6:	aa 1f       	adc	r26, r26
      a8:	bb 1f       	adc	r27, r27
      aa:	88 0f       	add	r24, r24
      ac:	99 1f       	adc	r25, r25
      ae:	aa 1f       	adc	r26, r26
      b0:	bb 1f       	adc	r27, r27
      b2:	9c 01       	movw	r18, r24
      b4:	ad 01       	movw	r20, r26
      b6:	22 0f       	add	r18, r18
      b8:	33 1f       	adc	r19, r19
      ba:	44 1f       	adc	r20, r20
      bc:	55 1f       	adc	r21, r21
      be:	22 0f       	add	r18, r18
      c0:	33 1f       	adc	r19, r19
      c2:	44 1f       	adc	r20, r20
      c4:	55 1f       	adc	r21, r21
      c6:	60 e0       	ldi	r22, 0x00	; 0
      c8:	74 e2       	ldi	r23, 0x24	; 36
      ca:	84 ef       	ldi	r24, 0xF4	; 244
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodsi4>
      d2:	8f ef       	ldi	r24, 0xFF	; 255
      d4:	82 0f       	add	r24, r18
      d6:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
      d8:	da 01       	movw	r26, r20
      da:	c9 01       	movw	r24, r18
      dc:	01 97       	sbiw	r24, 0x01	; 1
      de:	a1 09       	sbc	r26, r1
      e0:	b1 09       	sbc	r27, r1
      e2:	89 2f       	mov	r24, r25
      e4:	9a 2f       	mov	r25, r26
      e6:	ab 2f       	mov	r26, r27
      e8:	bb 27       	eor	r27, r27
      ea:	80 bd       	out	0x20, r24	; 32
      ec:	08 95       	ret

000000ee <USART_RxChar>:
}

unsigned char USART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0); /*Do nothing until data have been received*/
      ee:	5f 9b       	sbis	0x0b, 7	; 11
      f0:	fe cf       	rjmp	.-4      	; 0xee <USART_RxChar>
	return(UDR);				/* return the byte*/
      f2:	8c b1       	in	r24, 0x0c	; 12
}
      f4:	08 95       	ret

000000f6 <USART_TxChar>:

void USART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE))); /*Wait for empty transmit buffer*/
      f6:	5d 9b       	sbis	0x0b, 5	; 11
      f8:	fe cf       	rjmp	.-4      	; 0xf6 <USART_TxChar>
	UDR = ch ;
      fa:	8c b9       	out	0x0c, r24	; 12
      fc:	08 95       	ret

000000fe <USART_SendString>:
}

void USART_SendString(char *str)
{
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	8c 01       	movw	r16, r24
	unsigned char j=0;
     106:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (str[j]!=0)	/*send string up to null */
     108:	03 c0       	rjmp	.+6      	; 0x110 <USART_SendString+0x12>
	{
		USART_TxChar(str[j]);
     10a:	0e 94 7b 00 	call	0xf6	; 0xf6 <USART_TxChar>
		j++;
     10e:	cf 5f       	subi	r28, 0xFF	; 255

void USART_SendString(char *str)
{
	unsigned char j=0;
	
	while (str[j]!=0)	/*send string up to null */
     110:	f8 01       	movw	r30, r16
     112:	ec 0f       	add	r30, r28
     114:	f1 1d       	adc	r31, r1
     116:	80 81       	ld	r24, Z
     118:	81 11       	cpse	r24, r1
     11a:	f7 cf       	rjmp	.-18     	; 0x10a <USART_SendString+0xc>
	{
		USART_TxChar(str[j]);
		j++;
	}
}
     11c:	cf 91       	pop	r28
     11e:	1f 91       	pop	r17
     120:	0f 91       	pop	r16
     122:	08 95       	ret

00000124 <delay_ms>:
}

void delay_ms(unsigned int de)
{
	unsigned int rr,rr1;
	for (rr=0;rr<de;rr++)
     124:	40 e0       	ldi	r20, 0x00	; 0
     126:	50 e0       	ldi	r21, 0x00	; 0
     128:	0b c0       	rjmp	.+22     	; 0x140 <delay_ms+0x1c>
	{
		
		for(rr1=0;rr1<30;rr1++)
		{
			asm("nop");
     12a:	00 00       	nop
{
	unsigned int rr,rr1;
	for (rr=0;rr<de;rr++)
	{
		
		for(rr1=0;rr1<30;rr1++)
     12c:	2f 5f       	subi	r18, 0xFF	; 255
     12e:	3f 4f       	sbci	r19, 0xFF	; 255
     130:	02 c0       	rjmp	.+4      	; 0x136 <delay_ms+0x12>
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	2e 31       	cpi	r18, 0x1E	; 30
     138:	31 05       	cpc	r19, r1
     13a:	b8 f3       	brcs	.-18     	; 0x12a <delay_ms+0x6>
}

void delay_ms(unsigned int de)
{
	unsigned int rr,rr1;
	for (rr=0;rr<de;rr++)
     13c:	4f 5f       	subi	r20, 0xFF	; 255
     13e:	5f 4f       	sbci	r21, 0xFF	; 255
     140:	48 17       	cp	r20, r24
     142:	59 07       	cpc	r21, r25
     144:	b0 f3       	brcs	.-20     	; 0x132 <delay_ms+0xe>
		{
			asm("nop");
		}
		
	}
}
     146:	08 95       	ret

00000148 <USART_Transmit>:


void USART_Transmit(char data )
{
	UDR = data;
     148:	8c b9       	out	0x0c, r24	; 12
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
     14a:	5d 9b       	sbis	0x0b, 5	; 11
     14c:	fe cf       	rjmp	.-4      	; 0x14a <USART_Transmit+0x2>
	;
	/* Put data into buffer, sends the data */
}
     14e:	08 95       	ret

00000150 <senddata>:

void senddata(char string[16])
{
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	7c 01       	movw	r14, r24
	int len,count;
	len = strlen(string);
     15e:	fc 01       	movw	r30, r24
     160:	01 90       	ld	r0, Z+
     162:	00 20       	and	r0, r0
     164:	e9 f7       	brne	.-6      	; 0x160 <senddata+0x10>
     166:	31 97       	sbiw	r30, 0x01	; 1
     168:	8f 01       	movw	r16, r30
     16a:	08 1b       	sub	r16, r24
     16c:	19 0b       	sbc	r17, r25

	for (count=0;count<len;count++)
     16e:	c0 e0       	ldi	r28, 0x00	; 0
     170:	d0 e0       	ldi	r29, 0x00	; 0
     172:	07 c0       	rjmp	.+14     	; 0x182 <senddata+0x32>
	{
		USART_Transmit(string[count]);
     174:	f7 01       	movw	r30, r14
     176:	ec 0f       	add	r30, r28
     178:	fd 1f       	adc	r31, r29
     17a:	80 81       	ld	r24, Z
     17c:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
void senddata(char string[16])
{
	int len,count;
	len = strlen(string);

	for (count=0;count<len;count++)
     180:	21 96       	adiw	r28, 0x01	; 1
     182:	c0 17       	cp	r28, r16
     184:	d1 07       	cpc	r29, r17
     186:	b4 f3       	brlt	.-20     	; 0x174 <senddata+0x24>
	{
		USART_Transmit(string[count]);
	}
}
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	1f 91       	pop	r17
     18e:	0f 91       	pop	r16
     190:	ff 90       	pop	r15
     192:	ef 90       	pop	r14
     194:	08 95       	ret

00000196 <sendSMS>:
void delay_ms(unsigned int de);
void sendSMS();

void sendSMS()
{
	senddata("AT+CMGD=1");
     196:	84 e6       	ldi	r24, 0x64	; 100
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 a8 00 	call	0x150	; 0x150 <senddata>
	USART_Transmit(13);
     19e:	8d e0       	ldi	r24, 0x0D	; 13
     1a0:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
	USART_Transmit(10);
     1a4:	8a e0       	ldi	r24, 0x0A	; 10
     1a6:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
	delay_ms(1000);
     1aa:	88 ee       	ldi	r24, 0xE8	; 232
     1ac:	93 e0       	ldi	r25, 0x03	; 3
     1ae:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
	
	senddata("AT+CMGF=1");
     1b2:	8e e6       	ldi	r24, 0x6E	; 110
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 a8 00 	call	0x150	; 0x150 <senddata>
	USART_Transmit(13);
     1ba:	8d e0       	ldi	r24, 0x0D	; 13
     1bc:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
	USART_Transmit(10);
     1c0:	8a e0       	ldi	r24, 0x0A	; 10
     1c2:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
	delay_ms(1000);
     1c6:	88 ee       	ldi	r24, 0xE8	; 232
     1c8:	93 e0       	ldi	r25, 0x03	; 3
     1ca:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
	
	senddata("AT+CMGW=");
     1ce:	88 e7       	ldi	r24, 0x78	; 120
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 a8 00 	call	0x150	; 0x150 <senddata>
	USART_Transmit(34);
     1d6:	82 e2       	ldi	r24, 0x22	; 34
     1d8:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
	senddata("+919812345678");  //Enter Your Mobile number
     1dc:	81 e8       	ldi	r24, 0x81	; 129
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 a8 00 	call	0x150	; 0x150 <senddata>
	USART_Transmit(34);
     1e4:	82 e2       	ldi	r24, 0x22	; 34
     1e6:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
	USART_Transmit(13);
     1ea:	8d e0       	ldi	r24, 0x0D	; 13
     1ec:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
	USART_Transmit(10);
     1f0:	8a e0       	ldi	r24, 0x0A	; 10
     1f2:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
	delay_ms(1000);
     1f6:	88 ee       	ldi	r24, 0xE8	; 232
     1f8:	93 e0       	ldi	r25, 0x03	; 3
     1fa:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
	
	senddata("Robot is here");
     1fe:	8f e8       	ldi	r24, 0x8F	; 143
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 a8 00 	call	0x150	; 0x150 <senddata>
	USART_Transmit(13);
     206:	8d e0       	ldi	r24, 0x0D	; 13
     208:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
	USART_Transmit(10);
     20c:	8a e0       	ldi	r24, 0x0A	; 10
     20e:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
	delay_ms(1000);
     212:	88 ee       	ldi	r24, 0xE8	; 232
     214:	93 e0       	ldi	r25, 0x03	; 3
     216:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>

	USART_Transmit(26); //Cntrl+Z
     21a:	8a e1       	ldi	r24, 0x1A	; 26
     21c:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
	delay_ms(1000);
     220:	88 ee       	ldi	r24, 0xE8	; 232
     222:	93 e0       	ldi	r25, 0x03	; 3
     224:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
	delay_ms(1000);
     228:	88 ee       	ldi	r24, 0xE8	; 232
     22a:	93 e0       	ldi	r25, 0x03	; 3
     22c:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>

	senddata("AT+CMSS=1");
     230:	8d e9       	ldi	r24, 0x9D	; 157
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 a8 00 	call	0x150	; 0x150 <senddata>
	USART_Transmit(13);
     238:	8d e0       	ldi	r24, 0x0D	; 13
     23a:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
	USART_Transmit(10);
     23e:	8a e0       	ldi	r24, 0x0A	; 10
     240:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit>
	delay_ms(1000);
     244:	88 ee       	ldi	r24, 0xE8	; 232
     246:	93 e0       	ldi	r25, 0x03	; 3
     248:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
     24c:	08 95       	ret

0000024e <USART_Init1>:
}

void USART_Init1()
{
	/* Set baud rate */
	UBRRH = 0x00;  //12, 9600 Baud At 1MHz
     24e:	10 bc       	out	0x20, r1	; 32
	UBRRL =12;
     250:	8c e0       	ldi	r24, 0x0C	; 12
     252:	89 b9       	out	0x09, r24	; 9
	//Set double speed enabled
	UCSRA |= (1<<U2X);
     254:	8b b1       	in	r24, 0x0b	; 11
     256:	82 60       	ori	r24, 0x02	; 2
     258:	8b b9       	out	0x0b, r24	; 11
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
     25a:	88 e1       	ldi	r24, 0x18	; 24
     25c:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     25e:	8e e8       	ldi	r24, 0x8E	; 142
     260:	80 bd       	out	0x20, r24	; 32
     262:	08 95       	ret

00000264 <receiveData>:
		}
		
	}
}

void receiveData(){
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	00 d0       	rcall	.+0      	; 0x26e <receiveData+0xa>
     26e:	00 d0       	rcall	.+0      	; 0x270 <receiveData+0xc>
     270:	1f 92       	push	r1
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
	USART_SendString("\rD\r");//send special character to get data from the other atmega
     276:	87 ea       	ldi	r24, 0xA7	; 167
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 7f 00 	call	0xfe	; 0xfe <USART_SendString>
	char recChar = USART_RxChar();
     27e:	0e 94 77 00 	call	0xee	; 0xee <USART_RxChar>
	char data[5];
	int count = 0;
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
	while(recChar!=','){//read until first comma
     286:	0d c0       	rjmp	.+26     	; 0x2a2 <receiveData+0x3e>
		data[count++] = recChar;
     288:	89 01       	movw	r16, r18
     28a:	0f 5f       	subi	r16, 0xFF	; 255
     28c:	1f 4f       	sbci	r17, 0xFF	; 255
     28e:	e1 e0       	ldi	r30, 0x01	; 1
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	ec 0f       	add	r30, r28
     294:	fd 1f       	adc	r31, r29
     296:	e2 0f       	add	r30, r18
     298:	f3 1f       	adc	r31, r19
     29a:	80 83       	st	Z, r24
		recChar = USART_RxChar();
     29c:	0e 94 77 00 	call	0xee	; 0xee <USART_RxChar>
	USART_SendString("\rD\r");//send special character to get data from the other atmega
	char recChar = USART_RxChar();
	char data[5];
	int count = 0;
	while(recChar!=','){//read until first comma
		data[count++] = recChar;
     2a0:	98 01       	movw	r18, r16
void receiveData(){
	USART_SendString("\rD\r");//send special character to get data from the other atmega
	char recChar = USART_RxChar();
	char data[5];
	int count = 0;
	while(recChar!=','){//read until first comma
     2a2:	8c 32       	cpi	r24, 0x2C	; 44
     2a4:	89 f7       	brne	.-30     	; 0x288 <receiveData+0x24>
		data[count++] = recChar;
		recChar = USART_RxChar();
	}
	data[count] = '\0';
     2a6:	8e 01       	movw	r16, r28
     2a8:	0f 5f       	subi	r16, 0xFF	; 255
     2aa:	1f 4f       	sbci	r17, 0xFF	; 255
     2ac:	f8 01       	movw	r30, r16
     2ae:	e2 0f       	add	r30, r18
     2b0:	f3 1f       	adc	r31, r19
     2b2:	10 82       	st	Z, r1
	distances[0] = atoi(data);
     2b4:	c8 01       	movw	r24, r16
     2b6:	0e 94 39 06 	call	0xc72	; 0xc72 <atoi>
     2ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     2be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	memset(data, 0, 5);//clear data char array
     2c2:	85 e0       	ldi	r24, 0x05	; 5
     2c4:	f8 01       	movw	r30, r16
     2c6:	11 92       	st	Z+, r1
     2c8:	8a 95       	dec	r24
     2ca:	e9 f7       	brne	.-6      	; 0x2c6 <receiveData+0x62>
	count =0;
	recChar = USART_RxChar();
     2cc:	0e 94 77 00 	call	0xee	; 0xee <USART_RxChar>
		recChar = USART_RxChar();
	}
	data[count] = '\0';
	distances[0] = atoi(data);
	memset(data, 0, 5);//clear data char array
	count =0;
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
	recChar = USART_RxChar();
	while(recChar!='\n'){//read until new line
     2d4:	0d c0       	rjmp	.+26     	; 0x2f0 <receiveData+0x8c>
		data[count++] = recChar;
     2d6:	89 01       	movw	r16, r18
     2d8:	0f 5f       	subi	r16, 0xFF	; 255
     2da:	1f 4f       	sbci	r17, 0xFF	; 255
     2dc:	e1 e0       	ldi	r30, 0x01	; 1
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	ec 0f       	add	r30, r28
     2e2:	fd 1f       	adc	r31, r29
     2e4:	e2 0f       	add	r30, r18
     2e6:	f3 1f       	adc	r31, r19
     2e8:	80 83       	st	Z, r24
		recChar = USART_RxChar();
     2ea:	0e 94 77 00 	call	0xee	; 0xee <USART_RxChar>
	distances[0] = atoi(data);
	memset(data, 0, 5);//clear data char array
	count =0;
	recChar = USART_RxChar();
	while(recChar!='\n'){//read until new line
		data[count++] = recChar;
     2ee:	98 01       	movw	r18, r16
	data[count] = '\0';
	distances[0] = atoi(data);
	memset(data, 0, 5);//clear data char array
	count =0;
	recChar = USART_RxChar();
	while(recChar!='\n'){//read until new line
     2f0:	8a 30       	cpi	r24, 0x0A	; 10
     2f2:	89 f7       	brne	.-30     	; 0x2d6 <receiveData+0x72>
		data[count++] = recChar;
		recChar = USART_RxChar();
	}
	data[count] = '\0';
     2f4:	e1 e0       	ldi	r30, 0x01	; 1
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	ec 0f       	add	r30, r28
     2fa:	fd 1f       	adc	r31, r29
     2fc:	e2 0f       	add	r30, r18
     2fe:	f3 1f       	adc	r31, r19
     300:	10 82       	st	Z, r1
	distances[1] = atoi(data);
     302:	ce 01       	movw	r24, r28
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	0e 94 39 06 	call	0xc72	; 0xc72 <atoi>
     30a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     30e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
}
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	08 95       	ret

00000326 <EncoderInit>:

void EncoderInit(void)
{
	//set pins as input
	DDRD &= ~((1<<PD2)|(1<<PD3));
     326:	81 b3       	in	r24, 0x11	; 17
     328:	83 7f       	andi	r24, 0xF3	; 243
     32a:	81 bb       	out	0x11, r24	; 17
	//enable interrnal pullups;
	PORTD |= (1<<PD2)|(1<<PD3);
     32c:	82 b3       	in	r24, 0x12	; 18
     32e:	8c 60       	ori	r24, 0x0C	; 12
     330:	82 bb       	out	0x12, r24	; 18
     332:	08 95       	ret

00000334 <CheckEncoders>:
}

void CheckEncoders(void)
{
     334:	cf 92       	push	r12
     336:	df 92       	push	r13
     338:	ef 92       	push	r14
     33a:	ff 92       	push	r15
	disRight += (countRight/PPR) * WHEELCIRCUMFERENCE;
     33c:	60 91 ba 00 	lds	r22, 0x00BA	; 0x8000ba <countRight>
     340:	70 91 bb 00 	lds	r23, 0x00BB	; 0x8000bb <countRight+0x1>
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 1c 05 	call	0xa38	; 0xa38 <__floatunsisf>
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	40 ea       	ldi	r20, 0xA0	; 160
     352:	51 e4       	ldi	r21, 0x41	; 65
     354:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__divsf3>
     358:	29 e2       	ldi	r18, 0x29	; 41
     35a:	3c e5       	ldi	r19, 0x5C	; 92
     35c:	43 e2       	ldi	r20, 0x23	; 35
     35e:	52 e4       	ldi	r21, 0x42	; 66
     360:	0e 94 aa 05 	call	0xb54	; 0xb54 <__mulsf3>
     364:	6b 01       	movw	r12, r22
     366:	7c 01       	movw	r14, r24
     368:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__data_end>
     36c:	70 91 b3 00 	lds	r23, 0x00B3	; 0x8000b3 <__data_end+0x1>
     370:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end+0x2>
     374:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <__data_end+0x3>
     378:	0e 94 1c 05 	call	0xa38	; 0xa38 <__floatunsisf>
     37c:	a7 01       	movw	r20, r14
     37e:	96 01       	movw	r18, r12
     380:	0e 94 0f 04 	call	0x81e	; 0x81e <__addsf3>
     384:	0e 94 ed 04 	call	0x9da	; 0x9da <__fixunssfsi>
     388:	60 93 b2 00 	sts	0x00B2, r22	; 0x8000b2 <__data_end>
     38c:	70 93 b3 00 	sts	0x00B3, r23	; 0x8000b3 <__data_end+0x1>
     390:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__data_end+0x2>
     394:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <__data_end+0x3>
	disLeft += (countLeft/PPR) * WHEELCIRCUMFERENCE;
     398:	60 91 bc 00 	lds	r22, 0x00BC	; 0x8000bc <countLeft>
     39c:	70 91 bd 00 	lds	r23, 0x00BD	; 0x8000bd <countLeft+0x1>
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 1c 05 	call	0xa38	; 0xa38 <__floatunsisf>
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	40 ea       	ldi	r20, 0xA0	; 160
     3ae:	51 e4       	ldi	r21, 0x41	; 65
     3b0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__divsf3>
     3b4:	29 e2       	ldi	r18, 0x29	; 41
     3b6:	3c e5       	ldi	r19, 0x5C	; 92
     3b8:	43 e2       	ldi	r20, 0x23	; 35
     3ba:	52 e4       	ldi	r21, 0x42	; 66
     3bc:	0e 94 aa 05 	call	0xb54	; 0xb54 <__mulsf3>
     3c0:	6b 01       	movw	r12, r22
     3c2:	7c 01       	movw	r14, r24
     3c4:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <disLeft>
     3c8:	70 91 b7 00 	lds	r23, 0x00B7	; 0x8000b7 <disLeft+0x1>
     3cc:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <disLeft+0x2>
     3d0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <disLeft+0x3>
     3d4:	0e 94 1c 05 	call	0xa38	; 0xa38 <__floatunsisf>
     3d8:	a7 01       	movw	r20, r14
     3da:	96 01       	movw	r18, r12
     3dc:	0e 94 0f 04 	call	0x81e	; 0x81e <__addsf3>
     3e0:	0e 94 ed 04 	call	0x9da	; 0x9da <__fixunssfsi>
     3e4:	60 93 b6 00 	sts	0x00B6, r22	; 0x8000b6 <disLeft>
     3e8:	70 93 b7 00 	sts	0x00B7, r23	; 0x8000b7 <disLeft+0x1>
     3ec:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <disLeft+0x2>
     3f0:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <disLeft+0x3>
	speedRight = ((countRight/(Time_Interval*GearRatio))/PPR)*60.0;   // Speed equation
     3f4:	60 91 ba 00 	lds	r22, 0x00BA	; 0x8000ba <countRight>
     3f8:	70 91 bb 00 	lds	r23, 0x00BB	; 0x8000bb <countRight+0x1>
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 1c 05 	call	0xa38	; 0xa38 <__floatunsisf>
     404:	2e e7       	ldi	r18, 0x7E	; 126
     406:	3a e6       	ldi	r19, 0x6A	; 106
     408:	4c e3       	ldi	r20, 0x3C	; 60
     40a:	5f e3       	ldi	r21, 0x3F	; 63
     40c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__divsf3>
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	40 ea       	ldi	r20, 0xA0	; 160
     416:	51 e4       	ldi	r21, 0x41	; 65
     418:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__divsf3>
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e7       	ldi	r20, 0x70	; 112
     422:	52 e4       	ldi	r21, 0x42	; 66
     424:	0e 94 aa 05 	call	0xb54	; 0xb54 <__mulsf3>
     428:	0e 94 ed 04 	call	0x9da	; 0x9da <__fixunssfsi>
     42c:	60 93 be 00 	sts	0x00BE, r22	; 0x8000be <speedRight>
     430:	70 93 bf 00 	sts	0x00BF, r23	; 0x8000bf <speedRight+0x1>
     434:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <speedRight+0x2>
     438:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <speedRight+0x3>
	speedLeft= ((countLeft/(Time_Interval*GearRatio))/PPR)*60.0;
     43c:	60 91 bc 00 	lds	r22, 0x00BC	; 0x8000bc <countLeft>
     440:	70 91 bd 00 	lds	r23, 0x00BD	; 0x8000bd <countLeft+0x1>
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 1c 05 	call	0xa38	; 0xa38 <__floatunsisf>
     44c:	2e e7       	ldi	r18, 0x7E	; 126
     44e:	3a e6       	ldi	r19, 0x6A	; 106
     450:	4c e3       	ldi	r20, 0x3C	; 60
     452:	5f e3       	ldi	r21, 0x3F	; 63
     454:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__divsf3>
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 ea       	ldi	r20, 0xA0	; 160
     45e:	51 e4       	ldi	r21, 0x41	; 65
     460:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__divsf3>
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 e7       	ldi	r20, 0x70	; 112
     46a:	52 e4       	ldi	r21, 0x42	; 66
     46c:	0e 94 aa 05 	call	0xb54	; 0xb54 <__mulsf3>
     470:	0e 94 ed 04 	call	0x9da	; 0x9da <__fixunssfsi>
     474:	60 93 c2 00 	sts	0x00C2, r22	; 0x8000c2 <speedLeft>
     478:	70 93 c3 00 	sts	0x00C3, r23	; 0x8000c3 <speedLeft+0x1>
     47c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <speedLeft+0x2>
     480:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <speedLeft+0x3>
	countRight = 0;
     484:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <countRight+0x1>
     488:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <countRight>
	countLeft = 0;
     48c:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <countLeft+0x1>
     490:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <countLeft>
	TCNT0 = Init_ticks;
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	82 bf       	out	0x32, r24	; 50
	
}
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	df 90       	pop	r13
     49e:	cf 90       	pop	r12
     4a0:	08 95       	ret

000004a2 <obstacle_detect>:
void obstacle_detect(void){
	if (distances[0] <= 30 || distances[1] <= 30 )
     4a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4a6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4aa:	4f 97       	sbiw	r24, 0x1f	; 31
     4ac:	34 f0       	brlt	.+12     	; 0x4ba <obstacle_detect+0x18>
     4ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     4b2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     4b6:	4f 97       	sbiw	r24, 0x1f	; 31
     4b8:	64 f4       	brge	.+24     	; 0x4d2 <obstacle_detect+0x30>
	{
		MotorA(MOTOR_STOP,0);
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 c6 03 	call	0x78c	; 0x78c <MotorA>
		MotorB(MOTOR_STOP,0);
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <MotorB>
		PORTD |= (1 << PIND6); //To sound the buzzer
     4ca:	82 b3       	in	r24, 0x12	; 18
     4cc:	80 64       	ori	r24, 0x40	; 64
     4ce:	82 bb       	out	0x12, r24	; 18
     4d0:	08 95       	ret
	}
	else{	
		PORTD &= ~(1 << PIND6); 
     4d2:	82 b3       	in	r24, 0x12	; 18
     4d4:	8f 7b       	andi	r24, 0xBF	; 191
     4d6:	82 bb       	out	0x12, r24	; 18
     4d8:	08 95       	ret

000004da <Timer0_Start>:

}

void Timer0_Start(void)
{
	TCNT0 = Init_ticks;  		/* Load TCNT0, count for 10ms*/
     4da:	84 e6       	ldi	r24, 0x64	; 100
     4dc:	82 bf       	out	0x32, r24	; 50
	TCCR0 = (1<<CS02) | (1<<CS00); /* Start timer0 with /1024 prescaler*/
     4de:	85 e0       	ldi	r24, 0x05	; 5
     4e0:	83 bf       	out	0x33, r24	; 51
	TIMSK=(1<<TOIE0);  	/* Enable Timer0 overflow interrupts */
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	89 bf       	out	0x39, r24	; 57
     4e6:	08 95       	ret

000004e8 <__vector_11>:
}

ISR(TIMER0_OVF_vect)
{
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	2f 93       	push	r18
     4f4:	3f 93       	push	r19
     4f6:	4f 93       	push	r20
     4f8:	5f 93       	push	r21
     4fa:	6f 93       	push	r22
     4fc:	7f 93       	push	r23
     4fe:	8f 93       	push	r24
     500:	9f 93       	push	r25
     502:	af 93       	push	r26
     504:	bf 93       	push	r27
     506:	ef 93       	push	r30
     508:	ff 93       	push	r31
	//reading Encoders
	CheckEncoders();
     50a:	0e 94 9a 01 	call	0x334	; 0x334 <CheckEncoders>
	obstacle_detect();
     50e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <obstacle_detect>
}
     512:	ff 91       	pop	r31
     514:	ef 91       	pop	r30
     516:	bf 91       	pop	r27
     518:	af 91       	pop	r26
     51a:	9f 91       	pop	r25
     51c:	8f 91       	pop	r24
     51e:	7f 91       	pop	r23
     520:	6f 91       	pop	r22
     522:	5f 91       	pop	r21
     524:	4f 91       	pop	r20
     526:	3f 91       	pop	r19
     528:	2f 91       	pop	r18
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <__vector_1>:


/* Interrupt Service Routine for INT0 to count each pulse from encoder */
ISR(INT0_vect)
{
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	11 24       	eor	r1, r1
     53e:	8f 93       	push	r24
     540:	9f 93       	push	r25
	countRight++;
     542:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <countRight>
     546:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <countRight+0x1>
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <countRight+0x1>
     550:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <countRight>
	
}
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	0f 90       	pop	r0
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	0f 90       	pop	r0
     55e:	1f 90       	pop	r1
     560:	18 95       	reti

00000562 <__vector_2>:

/* EX PIN ISR to count each pulse from encoder */
ISR(INT1_vect)
{
     562:	1f 92       	push	r1
     564:	0f 92       	push	r0
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	0f 92       	push	r0
     56a:	11 24       	eor	r1, r1
     56c:	8f 93       	push	r24
     56e:	9f 93       	push	r25
	countLeft++;
     570:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <countLeft>
     574:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <countLeft+0x1>
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <countLeft+0x1>
     57e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <countLeft>
	
}
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	0f 90       	pop	r0
     588:	0f be       	out	0x3f, r0	; 63
     58a:	0f 90       	pop	r0
     58c:	1f 90       	pop	r1
     58e:	18 95       	reti

00000590 <init_system>:

void init_system(){
	
	//Initialize motor subsystem
	MotorInit();
     590:	0e 94 b8 03 	call	0x770	; 0x770 <MotorInit>
	EncoderInit();
     594:	0e 94 93 01 	call	0x326	; 0x326 <EncoderInit>
	GICR = 1<<INT0;		/* Enable INT0*/
     598:	80 e4       	ldi	r24, 0x40	; 64
     59a:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 | 1<<ISC00;  /* Trigger INT0 on rising edge */
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	85 bf       	out	0x35, r24	; 53
	
	GICR = 1<<INT1;		/* Enable INT1*/
     5a0:	80 e8       	ldi	r24, 0x80	; 128
     5a2:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC11 | 1<<ISC10;  /* Trigger INT1 on rising edge */
     5a4:	8c e0       	ldi	r24, 0x0C	; 12
     5a6:	85 bf       	out	0x35, r24	; 53
	
	Timer0_Start();
     5a8:	0e 94 6d 02 	call	0x4da	; 0x4da <Timer0_Start>
     5ac:	08 95       	ret

000005ae <main>:
void Timer0_Start(void);
void CheckEncoders(void);
void obstacle_detect();

int main(void)
{
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	c4 56       	subi	r28, 0x64	; 100
     5b8:	d1 09       	sbc	r29, r1
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0x01;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	84 bb       	out	0x14, r24	; 20
	DDRB |= (1<<0);
     5c8:	87 b3       	in	r24, 0x17	; 23
     5ca:	81 60       	ori	r24, 0x01	; 1
     5cc:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<1);
     5ce:	87 b3       	in	r24, 0x17	; 23
     5d0:	82 60       	ori	r24, 0x02	; 2
     5d2:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1 << PIND6);   //make b0 output pin
     5d4:	81 b3       	in	r24, 0x11	; 17
     5d6:	80 64       	ori	r24, 0x40	; 64
     5d8:	81 bb       	out	0x11, r24	; 17
	//PORTB &= (~(1<<0));
	//PORTB &= (~(1<<1));//to communicate with other atmega32
	USART_init(9600);
     5da:	60 e8       	ldi	r22, 0x80	; 128
     5dc:	75 e2       	ldi	r23, 0x25	; 37
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 49 00 	call	0x92	; 0x92 <USART_init>
	init_system();
     5e6:	0e 94 c8 02 	call	0x590	; 0x590 <init_system>
	while (1)
	{
		PORTB &= (~(1<<0));
     5ea:	88 b3       	in	r24, 0x18	; 24
     5ec:	8e 7f       	andi	r24, 0xFE	; 254
     5ee:	88 bb       	out	0x18, r24	; 24
		PORTB &= (~(1<<1));//to communicate with other atmega32
     5f0:	88 b3       	in	r24, 0x18	; 24
     5f2:	8d 7f       	andi	r24, 0xFD	; 253
     5f4:	88 bb       	out	0x18, r24	; 24
		receiveData();
     5f6:	0e 94 32 01 	call	0x264	; 0x264 <receiveData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5fa:	8f e3       	ldi	r24, 0x3F	; 63
     5fc:	9c e9       	ldi	r25, 0x9C	; 156
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <main+0x50>
     602:	00 c0       	rjmp	.+0      	; 0x604 <main+0x56>
     604:	00 00       	nop
		_delay_ms(10);
		
		//received data is printed to make sure its received successfully
		char buffer[100];
		sprintf(buffer,"%d,%d\n",distances[0],distances[1]);//prepare data and store in buffer
     606:	e0 e6       	ldi	r30, 0x60	; 96
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	83 81       	ldd	r24, Z+3	; 0x03
     60c:	8f 93       	push	r24
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	8f 93       	push	r24
     612:	81 81       	ldd	r24, Z+1	; 0x01
     614:	8f 93       	push	r24
     616:	80 81       	ld	r24, Z
     618:	8f 93       	push	r24
     61a:	8b ea       	ldi	r24, 0xAB	; 171
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	9f 93       	push	r25
     620:	8f 93       	push	r24
     622:	8e 01       	movw	r16, r28
     624:	0f 5f       	subi	r16, 0xFF	; 255
     626:	1f 4f       	sbci	r17, 0xFF	; 255
     628:	1f 93       	push	r17
     62a:	0f 93       	push	r16
     62c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <sprintf>
		USART_SendString(buffer); //send the prepared data
     630:	c8 01       	movw	r24, r16
     632:	0e 94 7f 00 	call	0xfe	; 0xfe <USART_SendString>
		
		if (disLeft <= 1580)
     636:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <disLeft>
     63a:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <disLeft+0x1>
     63e:	a0 91 b8 00 	lds	r26, 0x00B8	; 0x8000b8 <disLeft+0x2>
     642:	b0 91 b9 00 	lds	r27, 0x00B9	; 0x8000b9 <disLeft+0x3>
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	8d 32       	cpi	r24, 0x2D	; 45
     652:	16 e0       	ldi	r17, 0x06	; 6
     654:	91 07       	cpc	r25, r17
     656:	a1 05       	cpc	r26, r1
     658:	b1 05       	cpc	r27, r1
     65a:	08 f0       	brcs	.+2      	; 0x65e <main+0xb0>
     65c:	74 c0       	rjmp	.+232    	; 0x746 <main+0x198>
		{
			if(disLeft < 500){
     65e:	84 3f       	cpi	r24, 0xF4	; 244
     660:	21 e0       	ldi	r18, 0x01	; 1
     662:	92 07       	cpc	r25, r18
     664:	a1 05       	cpc	r26, r1
     666:	b1 05       	cpc	r27, r1
     668:	d8 f5       	brcc	.+118    	; 0x6e0 <main+0x132>
				
				//Start Moving Forward
				MotorA(MOTOR_CW,255);
     66a:	6f ef       	ldi	r22, 0xFF	; 255
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	0e 94 c6 03 	call	0x78c	; 0x78c <MotorA>
				MotorB(MOTOR_CCW,255);
     672:	6f ef       	ldi	r22, 0xFF	; 255
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <MotorB>
				uint8_t wheelspeed;
				
				if(disLeft > 380){
     67a:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <disLeft>
     67e:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <disLeft+0x1>
     682:	a0 91 b8 00 	lds	r26, 0x00B8	; 0x8000b8 <disLeft+0x2>
     686:	b0 91 b9 00 	lds	r27, 0x00B9	; 0x8000b9 <disLeft+0x3>
     68a:	8d 37       	cpi	r24, 0x7D	; 125
     68c:	31 e0       	ldi	r19, 0x01	; 1
     68e:	93 07       	cpc	r25, r19
     690:	a1 05       	cpc	r26, r1
     692:	b1 05       	cpc	r27, r1
     694:	08 f4       	brcc	.+2      	; 0x698 <main+0xea>
     696:	a9 cf       	rjmp	.-174    	; 0x5ea <main+0x3c>
					
					wheelspeed = 10 * ((500 - disLeft)/10);
     698:	44 ef       	ldi	r20, 0xF4	; 244
     69a:	51 e0       	ldi	r21, 0x01	; 1
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	8a 01       	movw	r16, r20
     6a2:	9b 01       	movw	r18, r22
     6a4:	08 1b       	sub	r16, r24
     6a6:	19 0b       	sbc	r17, r25
     6a8:	2a 0b       	sbc	r18, r26
     6aa:	3b 0b       	sbc	r19, r27
     6ac:	c9 01       	movw	r24, r18
     6ae:	b8 01       	movw	r22, r16
     6b0:	2a e0       	ldi	r18, 0x0A	; 10
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	40 e0       	ldi	r20, 0x00	; 0
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodsi4>
     6bc:	12 2f       	mov	r17, r18
     6be:	11 0f       	add	r17, r17
     6c0:	81 2f       	mov	r24, r17
     6c2:	88 0f       	add	r24, r24
     6c4:	88 0f       	add	r24, r24
     6c6:	18 0f       	add	r17, r24
					if(wheelspeed < 5){
     6c8:	15 30       	cpi	r17, 0x05	; 5
     6ca:	08 f4       	brcc	.+2      	; 0x6ce <main+0x120>
						wheelspeed = 0;
     6cc:	10 e0       	ldi	r17, 0x00	; 0
					}
					MotorA(MOTOR_CW,wheelspeed);
     6ce:	61 2f       	mov	r22, r17
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	0e 94 c6 03 	call	0x78c	; 0x78c <MotorA>
					MotorB(MOTOR_CCW,wheelspeed);
     6d6:	61 2f       	mov	r22, r17
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <MotorB>
     6de:	85 cf       	rjmp	.-246    	; 0x5ea <main+0x3c>
				}
				
			}
			else if (500 <= disLeft && disLeft < 580)
     6e0:	ac 01       	movw	r20, r24
     6e2:	bd 01       	movw	r22, r26
     6e4:	44 5f       	subi	r20, 0xF4	; 244
     6e6:	51 40       	sbci	r21, 0x01	; 1
     6e8:	61 09       	sbc	r22, r1
     6ea:	71 09       	sbc	r23, r1
     6ec:	40 35       	cpi	r20, 0x50	; 80
     6ee:	51 05       	cpc	r21, r1
     6f0:	61 05       	cpc	r22, r1
     6f2:	71 05       	cpc	r23, r1
     6f4:	48 f4       	brcc	.+18     	; 0x708 <main+0x15a>
			{
				MotorA(MOTOR_STOP,0);
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	0e 94 c6 03 	call	0x78c	; 0x78c <MotorA>
				MotorB(MOTOR_CCW,150);
     6fe:	66 e9       	ldi	r22, 0x96	; 150
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <MotorB>
     706:	71 cf       	rjmp	.-286    	; 0x5ea <main+0x3c>
			}
			else if(disLeft == 580)
     708:	84 34       	cpi	r24, 0x44	; 68
     70a:	92 40       	sbci	r25, 0x02	; 2
     70c:	a1 05       	cpc	r26, r1
     70e:	b1 05       	cpc	r27, r1
     710:	89 f4       	brne	.+34     	; 0x734 <main+0x186>
			{
				MotorA(MOTOR_STOP,0);
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	0e 94 c6 03 	call	0x78c	; 0x78c <MotorA>
				MotorB(MOTOR_STOP,0);
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <MotorB>
				//Start Moving Forward
				MotorA(MOTOR_CW,255);
     722:	6f ef       	ldi	r22, 0xFF	; 255
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	0e 94 c6 03 	call	0x78c	; 0x78c <MotorA>
				MotorB(MOTOR_CCW,255);
     72a:	6f ef       	ldi	r22, 0xFF	; 255
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <MotorB>
     732:	5b cf       	rjmp	.-330    	; 0x5ea <main+0x3c>
			}
			else{
				//Start Moving Forward
				MotorA(MOTOR_CW,255);
     734:	6f ef       	ldi	r22, 0xFF	; 255
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	0e 94 c6 03 	call	0x78c	; 0x78c <MotorA>
				MotorB(MOTOR_CCW,255);
     73c:	6f ef       	ldi	r22, 0xFF	; 255
     73e:	82 e0       	ldi	r24, 0x02	; 2
     740:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <MotorB>
     744:	52 cf       	rjmp	.-348    	; 0x5ea <main+0x3c>
			}
		}
		else{
			MotorA(MOTOR_STOP,0);
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 c6 03 	call	0x78c	; 0x78c <MotorA>
			MotorB(MOTOR_STOP,0);
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <MotorB>
			PORTB &= (~(1<<0));
     756:	88 b3       	in	r24, 0x18	; 24
     758:	8e 7f       	andi	r24, 0xFE	; 254
     75a:	88 bb       	out	0x18, r24	; 24
			PORTB |= (1<<1);//to communicate with GSM
     75c:	88 b3       	in	r24, 0x18	; 24
     75e:	82 60       	ori	r24, 0x02	; 2
     760:	88 bb       	out	0x18, r24	; 24
			USART_Init1(9600);
     762:	80 e8       	ldi	r24, 0x80	; 128
     764:	95 e2       	ldi	r25, 0x25	; 37
     766:	0e 94 27 01 	call	0x24e	; 0x24e <USART_Init1>
			sendSMS();//GSM message
     76a:	0e 94 cb 00 	call	0x196	; 0x196 <sendSMS>
		}
		
	}
     76e:	3d cf       	rjmp	.-390    	; 0x5ea <main+0x3c>

00000770 <MotorInit>:
void MotorInit()
{

	//set up pwm for speed control - fast PWM

	TCCR1A=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM10); //different registers on same timer1
     770:	81 ea       	ldi	r24, 0xA1	; 161
     772:	8f bd       	out	0x2f, r24	; 47

	//clk=fcpu/64

	TCCR1B=(1<<CS11)|(1<<CS10);
     774:	83 e0       	ldi	r24, 0x03	; 3
     776:	8e bd       	out	0x2e, r24	; 46

	//Set the corresponding port pin to output

	DDR(OC1A_PORT)|=(1<<OC1A_PIN);
     778:	81 b3       	in	r24, 0x11	; 17
     77a:	80 62       	ori	r24, 0x20	; 32
     77c:	81 bb       	out	0x11, r24	; 17
	DDR(OC1B_PORT)|=(1<<OC1B_PIN);
     77e:	81 b3       	in	r24, 0x11	; 17
     780:	80 61       	ori	r24, 0x10	; 16
     782:	81 bb       	out	0x11, r24	; 17

	//Set the direction control PINs to OUT
	DDRC|=0X3C;	//PC2 to PC5 as output
     784:	84 b3       	in	r24, 0x14	; 20
     786:	8c 63       	ori	r24, 0x3C	; 60
     788:	84 bb       	out	0x14, r24	; 20
     78a:	08 95       	ret

0000078c <MotorA>:


void MotorA(uint8_t dir,uint8_t speed)
{
	//Direction
	if(dir == MOTOR_STOP)
     78c:	81 11       	cpse	r24, r1
     78e:	07 c0       	rjmp	.+14     	; 0x79e <MotorA+0x12>
	{
		PORTC&=(~(1<<PC2));
     790:	85 b3       	in	r24, 0x15	; 21
     792:	8b 7f       	andi	r24, 0xFB	; 251
     794:	85 bb       	out	0x15, r24	; 21
		PORTC&=(~(1<<PC3));
     796:	85 b3       	in	r24, 0x15	; 21
     798:	87 7f       	andi	r24, 0xF7	; 247
     79a:	85 bb       	out	0x15, r24	; 21
     79c:	11 c0       	rjmp	.+34     	; 0x7c0 <MotorA+0x34>
	}

	else if(dir == MOTOR_CCW)
     79e:	82 30       	cpi	r24, 0x02	; 2
     7a0:	39 f4       	brne	.+14     	; 0x7b0 <MotorA+0x24>
	{
		PORTC&=(~(1<<PC2));
     7a2:	85 b3       	in	r24, 0x15	; 21
     7a4:	8b 7f       	andi	r24, 0xFB	; 251
     7a6:	85 bb       	out	0x15, r24	; 21
		PORTC|=(1<<PC3);
     7a8:	85 b3       	in	r24, 0x15	; 21
     7aa:	88 60       	ori	r24, 0x08	; 8
     7ac:	85 bb       	out	0x15, r24	; 21
     7ae:	08 c0       	rjmp	.+16     	; 0x7c0 <MotorA+0x34>
	}
	else if(dir == MOTOR_CW)
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	31 f4       	brne	.+12     	; 0x7c0 <MotorA+0x34>
	{
		PORTC&=(~(1<<PC3));
     7b4:	85 b3       	in	r24, 0x15	; 21
     7b6:	87 7f       	andi	r24, 0xF7	; 247
     7b8:	85 bb       	out	0x15, r24	; 21
		PORTC|=(1<<PC2);
     7ba:	85 b3       	in	r24, 0x15	; 21
     7bc:	84 60       	ori	r24, 0x04	; 4
     7be:	85 bb       	out	0x15, r24	; 21
	}

	//Speed
	uint8_t sreg=SREG; //store SREG value
     7c0:	9f b7       	in	r25, 0x3f	; 63
	SREG |= 1<<7;
     7c2:	8f b7       	in	r24, 0x3f	; 63
     7c4:	80 68       	ori	r24, 0x80	; 128
     7c6:	8f bf       	out	0x3f, r24	; 63
	cli();   //Disable Interrupts during times sequence
     7c8:	f8 94       	cli

	OCR1A=speed;
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	7b bd       	out	0x2b, r23	; 43
     7ce:	6a bd       	out	0x2a, r22	; 42

	SREG=sreg;  //Restore SREG value(I-bit)
     7d0:	9f bf       	out	0x3f, r25	; 63
     7d2:	08 95       	ret

000007d4 <MotorB>:


void MotorB(uint8_t dir,uint8_t speed)
{
	//Direction
	if(dir == MOTOR_STOP)
     7d4:	81 11       	cpse	r24, r1
     7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <MotorB+0x12>
	{
		PORTC&=(~(1<<PC4));
     7d8:	85 b3       	in	r24, 0x15	; 21
     7da:	8f 7e       	andi	r24, 0xEF	; 239
     7dc:	85 bb       	out	0x15, r24	; 21
		PORTC&=(~(1<<PC5));
     7de:	85 b3       	in	r24, 0x15	; 21
     7e0:	8f 7d       	andi	r24, 0xDF	; 223
     7e2:	85 bb       	out	0x15, r24	; 21
     7e4:	11 c0       	rjmp	.+34     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	}

	else if(dir == MOTOR_CCW)
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	39 f4       	brne	.+14     	; 0x7f8 <MotorB+0x24>
	{
		PORTC&=(~(1<<PC4)); //Define pull ups and set output low
     7ea:	85 b3       	in	r24, 0x15	; 21
     7ec:	8f 7e       	andi	r24, 0xEF	; 239
     7ee:	85 bb       	out	0x15, r24	; 21
		PORTC|=(1<<PC5);  //Define pull ups and set output high
     7f0:	85 b3       	in	r24, 0x15	; 21
     7f2:	80 62       	ori	r24, 0x20	; 32
     7f4:	85 bb       	out	0x15, r24	; 21
     7f6:	08 c0       	rjmp	.+16     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	}
	else if(dir == MOTOR_CW)
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	31 f4       	brne	.+12     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	{
		PORTC&=(~(1<<PC5));
     7fc:	85 b3       	in	r24, 0x15	; 21
     7fe:	8f 7d       	andi	r24, 0xDF	; 223
     800:	85 bb       	out	0x15, r24	; 21
		PORTC|=(1<<PC4);
     802:	85 b3       	in	r24, 0x15	; 21
     804:	80 61       	ori	r24, 0x10	; 16
     806:	85 bb       	out	0x15, r24	; 21
	}

	//Speed
	uint8_t sreg=SREG;
     808:	9f b7       	in	r25, 0x3f	; 63
	SREG |= 1<<7;
     80a:	8f b7       	in	r24, 0x3f	; 63
     80c:	80 68       	ori	r24, 0x80	; 128
     80e:	8f bf       	out	0x3f, r24	; 63
	cli();
     810:	f8 94       	cli

	OCR1B=speed;
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	79 bd       	out	0x29, r23	; 41
     816:	68 bd       	out	0x28, r22	; 40

	SREG=sreg;
     818:	9f bf       	out	0x3f, r25	; 63
     81a:	08 95       	ret

0000081c <__subsf3>:
     81c:	50 58       	subi	r21, 0x80	; 128

0000081e <__addsf3>:
     81e:	bb 27       	eor	r27, r27
     820:	aa 27       	eor	r26, r26
     822:	0e 94 26 04 	call	0x84c	; 0x84c <__addsf3x>
     826:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_round>
     82a:	0e 94 62 05 	call	0xac4	; 0xac4 <__fp_pscA>
     82e:	38 f0       	brcs	.+14     	; 0x83e <__addsf3+0x20>
     830:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_pscB>
     834:	20 f0       	brcs	.+8      	; 0x83e <__addsf3+0x20>
     836:	39 f4       	brne	.+14     	; 0x846 <__addsf3+0x28>
     838:	9f 3f       	cpi	r25, 0xFF	; 255
     83a:	19 f4       	brne	.+6      	; 0x842 <__addsf3+0x24>
     83c:	26 f4       	brtc	.+8      	; 0x846 <__addsf3+0x28>
     83e:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_nan>
     842:	0e f4       	brtc	.+2      	; 0x846 <__addsf3+0x28>
     844:	e0 95       	com	r30
     846:	e7 fb       	bst	r30, 7
     848:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_inf>

0000084c <__addsf3x>:
     84c:	e9 2f       	mov	r30, r25
     84e:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_split3>
     852:	58 f3       	brcs	.-42     	; 0x82a <__addsf3+0xc>
     854:	ba 17       	cp	r27, r26
     856:	62 07       	cpc	r22, r18
     858:	73 07       	cpc	r23, r19
     85a:	84 07       	cpc	r24, r20
     85c:	95 07       	cpc	r25, r21
     85e:	20 f0       	brcs	.+8      	; 0x868 <__stack+0x9>
     860:	79 f4       	brne	.+30     	; 0x880 <__stack+0x21>
     862:	a6 f5       	brtc	.+104    	; 0x8cc <__stack+0x6d>
     864:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__fp_zero>
     868:	0e f4       	brtc	.+2      	; 0x86c <__stack+0xd>
     86a:	e0 95       	com	r30
     86c:	0b 2e       	mov	r0, r27
     86e:	ba 2f       	mov	r27, r26
     870:	a0 2d       	mov	r26, r0
     872:	0b 01       	movw	r0, r22
     874:	b9 01       	movw	r22, r18
     876:	90 01       	movw	r18, r0
     878:	0c 01       	movw	r0, r24
     87a:	ca 01       	movw	r24, r20
     87c:	a0 01       	movw	r20, r0
     87e:	11 24       	eor	r1, r1
     880:	ff 27       	eor	r31, r31
     882:	59 1b       	sub	r21, r25
     884:	99 f0       	breq	.+38     	; 0x8ac <__stack+0x4d>
     886:	59 3f       	cpi	r21, 0xF9	; 249
     888:	50 f4       	brcc	.+20     	; 0x89e <__stack+0x3f>
     88a:	50 3e       	cpi	r21, 0xE0	; 224
     88c:	68 f1       	brcs	.+90     	; 0x8e8 <__stack+0x89>
     88e:	1a 16       	cp	r1, r26
     890:	f0 40       	sbci	r31, 0x00	; 0
     892:	a2 2f       	mov	r26, r18
     894:	23 2f       	mov	r18, r19
     896:	34 2f       	mov	r19, r20
     898:	44 27       	eor	r20, r20
     89a:	58 5f       	subi	r21, 0xF8	; 248
     89c:	f3 cf       	rjmp	.-26     	; 0x884 <__stack+0x25>
     89e:	46 95       	lsr	r20
     8a0:	37 95       	ror	r19
     8a2:	27 95       	ror	r18
     8a4:	a7 95       	ror	r26
     8a6:	f0 40       	sbci	r31, 0x00	; 0
     8a8:	53 95       	inc	r21
     8aa:	c9 f7       	brne	.-14     	; 0x89e <__stack+0x3f>
     8ac:	7e f4       	brtc	.+30     	; 0x8cc <__stack+0x6d>
     8ae:	1f 16       	cp	r1, r31
     8b0:	ba 0b       	sbc	r27, r26
     8b2:	62 0b       	sbc	r22, r18
     8b4:	73 0b       	sbc	r23, r19
     8b6:	84 0b       	sbc	r24, r20
     8b8:	ba f0       	brmi	.+46     	; 0x8e8 <__stack+0x89>
     8ba:	91 50       	subi	r25, 0x01	; 1
     8bc:	a1 f0       	breq	.+40     	; 0x8e6 <__stack+0x87>
     8be:	ff 0f       	add	r31, r31
     8c0:	bb 1f       	adc	r27, r27
     8c2:	66 1f       	adc	r22, r22
     8c4:	77 1f       	adc	r23, r23
     8c6:	88 1f       	adc	r24, r24
     8c8:	c2 f7       	brpl	.-16     	; 0x8ba <__stack+0x5b>
     8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <__stack+0x89>
     8cc:	ba 0f       	add	r27, r26
     8ce:	62 1f       	adc	r22, r18
     8d0:	73 1f       	adc	r23, r19
     8d2:	84 1f       	adc	r24, r20
     8d4:	48 f4       	brcc	.+18     	; 0x8e8 <__stack+0x89>
     8d6:	87 95       	ror	r24
     8d8:	77 95       	ror	r23
     8da:	67 95       	ror	r22
     8dc:	b7 95       	ror	r27
     8de:	f7 95       	ror	r31
     8e0:	9e 3f       	cpi	r25, 0xFE	; 254
     8e2:	08 f0       	brcs	.+2      	; 0x8e6 <__stack+0x87>
     8e4:	b0 cf       	rjmp	.-160    	; 0x846 <__addsf3+0x28>
     8e6:	93 95       	inc	r25
     8e8:	88 0f       	add	r24, r24
     8ea:	08 f0       	brcs	.+2      	; 0x8ee <__stack+0x8f>
     8ec:	99 27       	eor	r25, r25
     8ee:	ee 0f       	add	r30, r30
     8f0:	97 95       	ror	r25
     8f2:	87 95       	ror	r24
     8f4:	08 95       	ret

000008f6 <__divsf3>:
     8f6:	0e 94 8f 04 	call	0x91e	; 0x91e <__divsf3x>
     8fa:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_round>
     8fe:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_pscB>
     902:	58 f0       	brcs	.+22     	; 0x91a <__divsf3+0x24>
     904:	0e 94 62 05 	call	0xac4	; 0xac4 <__fp_pscA>
     908:	40 f0       	brcs	.+16     	; 0x91a <__divsf3+0x24>
     90a:	29 f4       	brne	.+10     	; 0x916 <__divsf3+0x20>
     90c:	5f 3f       	cpi	r21, 0xFF	; 255
     90e:	29 f0       	breq	.+10     	; 0x91a <__divsf3+0x24>
     910:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_inf>
     914:	51 11       	cpse	r21, r1
     916:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_szero>
     91a:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_nan>

0000091e <__divsf3x>:
     91e:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_split3>
     922:	68 f3       	brcs	.-38     	; 0x8fe <__divsf3+0x8>

00000924 <__divsf3_pse>:
     924:	99 23       	and	r25, r25
     926:	b1 f3       	breq	.-20     	; 0x914 <__divsf3+0x1e>
     928:	55 23       	and	r21, r21
     92a:	91 f3       	breq	.-28     	; 0x910 <__divsf3+0x1a>
     92c:	95 1b       	sub	r25, r21
     92e:	55 0b       	sbc	r21, r21
     930:	bb 27       	eor	r27, r27
     932:	aa 27       	eor	r26, r26
     934:	62 17       	cp	r22, r18
     936:	73 07       	cpc	r23, r19
     938:	84 07       	cpc	r24, r20
     93a:	38 f0       	brcs	.+14     	; 0x94a <__divsf3_pse+0x26>
     93c:	9f 5f       	subi	r25, 0xFF	; 255
     93e:	5f 4f       	sbci	r21, 0xFF	; 255
     940:	22 0f       	add	r18, r18
     942:	33 1f       	adc	r19, r19
     944:	44 1f       	adc	r20, r20
     946:	aa 1f       	adc	r26, r26
     948:	a9 f3       	breq	.-22     	; 0x934 <__divsf3_pse+0x10>
     94a:	35 d0       	rcall	.+106    	; 0x9b6 <__divsf3_pse+0x92>
     94c:	0e 2e       	mov	r0, r30
     94e:	3a f0       	brmi	.+14     	; 0x95e <__divsf3_pse+0x3a>
     950:	e0 e8       	ldi	r30, 0x80	; 128
     952:	32 d0       	rcall	.+100    	; 0x9b8 <__divsf3_pse+0x94>
     954:	91 50       	subi	r25, 0x01	; 1
     956:	50 40       	sbci	r21, 0x00	; 0
     958:	e6 95       	lsr	r30
     95a:	00 1c       	adc	r0, r0
     95c:	ca f7       	brpl	.-14     	; 0x950 <__divsf3_pse+0x2c>
     95e:	2b d0       	rcall	.+86     	; 0x9b6 <__divsf3_pse+0x92>
     960:	fe 2f       	mov	r31, r30
     962:	29 d0       	rcall	.+82     	; 0x9b6 <__divsf3_pse+0x92>
     964:	66 0f       	add	r22, r22
     966:	77 1f       	adc	r23, r23
     968:	88 1f       	adc	r24, r24
     96a:	bb 1f       	adc	r27, r27
     96c:	26 17       	cp	r18, r22
     96e:	37 07       	cpc	r19, r23
     970:	48 07       	cpc	r20, r24
     972:	ab 07       	cpc	r26, r27
     974:	b0 e8       	ldi	r27, 0x80	; 128
     976:	09 f0       	breq	.+2      	; 0x97a <__divsf3_pse+0x56>
     978:	bb 0b       	sbc	r27, r27
     97a:	80 2d       	mov	r24, r0
     97c:	bf 01       	movw	r22, r30
     97e:	ff 27       	eor	r31, r31
     980:	93 58       	subi	r25, 0x83	; 131
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	3a f0       	brmi	.+14     	; 0x994 <__divsf3_pse+0x70>
     986:	9e 3f       	cpi	r25, 0xFE	; 254
     988:	51 05       	cpc	r21, r1
     98a:	78 f0       	brcs	.+30     	; 0x9aa <__divsf3_pse+0x86>
     98c:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_inf>
     990:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_szero>
     994:	5f 3f       	cpi	r21, 0xFF	; 255
     996:	e4 f3       	brlt	.-8      	; 0x990 <__divsf3_pse+0x6c>
     998:	98 3e       	cpi	r25, 0xE8	; 232
     99a:	d4 f3       	brlt	.-12     	; 0x990 <__divsf3_pse+0x6c>
     99c:	86 95       	lsr	r24
     99e:	77 95       	ror	r23
     9a0:	67 95       	ror	r22
     9a2:	b7 95       	ror	r27
     9a4:	f7 95       	ror	r31
     9a6:	9f 5f       	subi	r25, 0xFF	; 255
     9a8:	c9 f7       	brne	.-14     	; 0x99c <__divsf3_pse+0x78>
     9aa:	88 0f       	add	r24, r24
     9ac:	91 1d       	adc	r25, r1
     9ae:	96 95       	lsr	r25
     9b0:	87 95       	ror	r24
     9b2:	97 f9       	bld	r25, 7
     9b4:	08 95       	ret
     9b6:	e1 e0       	ldi	r30, 0x01	; 1
     9b8:	66 0f       	add	r22, r22
     9ba:	77 1f       	adc	r23, r23
     9bc:	88 1f       	adc	r24, r24
     9be:	bb 1f       	adc	r27, r27
     9c0:	62 17       	cp	r22, r18
     9c2:	73 07       	cpc	r23, r19
     9c4:	84 07       	cpc	r24, r20
     9c6:	ba 07       	cpc	r27, r26
     9c8:	20 f0       	brcs	.+8      	; 0x9d2 <__divsf3_pse+0xae>
     9ca:	62 1b       	sub	r22, r18
     9cc:	73 0b       	sbc	r23, r19
     9ce:	84 0b       	sbc	r24, r20
     9d0:	ba 0b       	sbc	r27, r26
     9d2:	ee 1f       	adc	r30, r30
     9d4:	88 f7       	brcc	.-30     	; 0x9b8 <__divsf3_pse+0x94>
     9d6:	e0 95       	com	r30
     9d8:	08 95       	ret

000009da <__fixunssfsi>:
     9da:	0e 94 89 05 	call	0xb12	; 0xb12 <__fp_splitA>
     9de:	88 f0       	brcs	.+34     	; 0xa02 <__fixunssfsi+0x28>
     9e0:	9f 57       	subi	r25, 0x7F	; 127
     9e2:	98 f0       	brcs	.+38     	; 0xa0a <__fixunssfsi+0x30>
     9e4:	b9 2f       	mov	r27, r25
     9e6:	99 27       	eor	r25, r25
     9e8:	b7 51       	subi	r27, 0x17	; 23
     9ea:	b0 f0       	brcs	.+44     	; 0xa18 <__fixunssfsi+0x3e>
     9ec:	e1 f0       	breq	.+56     	; 0xa26 <__fixunssfsi+0x4c>
     9ee:	66 0f       	add	r22, r22
     9f0:	77 1f       	adc	r23, r23
     9f2:	88 1f       	adc	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	1a f0       	brmi	.+6      	; 0x9fe <__fixunssfsi+0x24>
     9f8:	ba 95       	dec	r27
     9fa:	c9 f7       	brne	.-14     	; 0x9ee <__fixunssfsi+0x14>
     9fc:	14 c0       	rjmp	.+40     	; 0xa26 <__fixunssfsi+0x4c>
     9fe:	b1 30       	cpi	r27, 0x01	; 1
     a00:	91 f0       	breq	.+36     	; 0xa26 <__fixunssfsi+0x4c>
     a02:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_zero>
     a06:	b1 e0       	ldi	r27, 0x01	; 1
     a08:	08 95       	ret
     a0a:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__fp_zero>
     a0e:	67 2f       	mov	r22, r23
     a10:	78 2f       	mov	r23, r24
     a12:	88 27       	eor	r24, r24
     a14:	b8 5f       	subi	r27, 0xF8	; 248
     a16:	39 f0       	breq	.+14     	; 0xa26 <__fixunssfsi+0x4c>
     a18:	b9 3f       	cpi	r27, 0xF9	; 249
     a1a:	cc f3       	brlt	.-14     	; 0xa0e <__fixunssfsi+0x34>
     a1c:	86 95       	lsr	r24
     a1e:	77 95       	ror	r23
     a20:	67 95       	ror	r22
     a22:	b3 95       	inc	r27
     a24:	d9 f7       	brne	.-10     	; 0xa1c <__fixunssfsi+0x42>
     a26:	3e f4       	brtc	.+14     	; 0xa36 <__fixunssfsi+0x5c>
     a28:	90 95       	com	r25
     a2a:	80 95       	com	r24
     a2c:	70 95       	com	r23
     a2e:	61 95       	neg	r22
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	8f 4f       	sbci	r24, 0xFF	; 255
     a34:	9f 4f       	sbci	r25, 0xFF	; 255
     a36:	08 95       	ret

00000a38 <__floatunsisf>:
     a38:	e8 94       	clt
     a3a:	09 c0       	rjmp	.+18     	; 0xa4e <__floatsisf+0x12>

00000a3c <__floatsisf>:
     a3c:	97 fb       	bst	r25, 7
     a3e:	3e f4       	brtc	.+14     	; 0xa4e <__floatsisf+0x12>
     a40:	90 95       	com	r25
     a42:	80 95       	com	r24
     a44:	70 95       	com	r23
     a46:	61 95       	neg	r22
     a48:	7f 4f       	sbci	r23, 0xFF	; 255
     a4a:	8f 4f       	sbci	r24, 0xFF	; 255
     a4c:	9f 4f       	sbci	r25, 0xFF	; 255
     a4e:	99 23       	and	r25, r25
     a50:	a9 f0       	breq	.+42     	; 0xa7c <__floatsisf+0x40>
     a52:	f9 2f       	mov	r31, r25
     a54:	96 e9       	ldi	r25, 0x96	; 150
     a56:	bb 27       	eor	r27, r27
     a58:	93 95       	inc	r25
     a5a:	f6 95       	lsr	r31
     a5c:	87 95       	ror	r24
     a5e:	77 95       	ror	r23
     a60:	67 95       	ror	r22
     a62:	b7 95       	ror	r27
     a64:	f1 11       	cpse	r31, r1
     a66:	f8 cf       	rjmp	.-16     	; 0xa58 <__floatsisf+0x1c>
     a68:	fa f4       	brpl	.+62     	; 0xaa8 <__floatsisf+0x6c>
     a6a:	bb 0f       	add	r27, r27
     a6c:	11 f4       	brne	.+4      	; 0xa72 <__floatsisf+0x36>
     a6e:	60 ff       	sbrs	r22, 0
     a70:	1b c0       	rjmp	.+54     	; 0xaa8 <__floatsisf+0x6c>
     a72:	6f 5f       	subi	r22, 0xFF	; 255
     a74:	7f 4f       	sbci	r23, 0xFF	; 255
     a76:	8f 4f       	sbci	r24, 0xFF	; 255
     a78:	9f 4f       	sbci	r25, 0xFF	; 255
     a7a:	16 c0       	rjmp	.+44     	; 0xaa8 <__floatsisf+0x6c>
     a7c:	88 23       	and	r24, r24
     a7e:	11 f0       	breq	.+4      	; 0xa84 <__floatsisf+0x48>
     a80:	96 e9       	ldi	r25, 0x96	; 150
     a82:	11 c0       	rjmp	.+34     	; 0xaa6 <__floatsisf+0x6a>
     a84:	77 23       	and	r23, r23
     a86:	21 f0       	breq	.+8      	; 0xa90 <__floatsisf+0x54>
     a88:	9e e8       	ldi	r25, 0x8E	; 142
     a8a:	87 2f       	mov	r24, r23
     a8c:	76 2f       	mov	r23, r22
     a8e:	05 c0       	rjmp	.+10     	; 0xa9a <__floatsisf+0x5e>
     a90:	66 23       	and	r22, r22
     a92:	71 f0       	breq	.+28     	; 0xab0 <__floatsisf+0x74>
     a94:	96 e8       	ldi	r25, 0x86	; 134
     a96:	86 2f       	mov	r24, r22
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	2a f0       	brmi	.+10     	; 0xaa8 <__floatsisf+0x6c>
     a9e:	9a 95       	dec	r25
     aa0:	66 0f       	add	r22, r22
     aa2:	77 1f       	adc	r23, r23
     aa4:	88 1f       	adc	r24, r24
     aa6:	da f7       	brpl	.-10     	; 0xa9e <__floatsisf+0x62>
     aa8:	88 0f       	add	r24, r24
     aaa:	96 95       	lsr	r25
     aac:	87 95       	ror	r24
     aae:	97 f9       	bld	r25, 7
     ab0:	08 95       	ret

00000ab2 <__fp_inf>:
     ab2:	97 f9       	bld	r25, 7
     ab4:	9f 67       	ori	r25, 0x7F	; 127
     ab6:	80 e8       	ldi	r24, 0x80	; 128
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	08 95       	ret

00000abe <__fp_nan>:
     abe:	9f ef       	ldi	r25, 0xFF	; 255
     ac0:	80 ec       	ldi	r24, 0xC0	; 192
     ac2:	08 95       	ret

00000ac4 <__fp_pscA>:
     ac4:	00 24       	eor	r0, r0
     ac6:	0a 94       	dec	r0
     ac8:	16 16       	cp	r1, r22
     aca:	17 06       	cpc	r1, r23
     acc:	18 06       	cpc	r1, r24
     ace:	09 06       	cpc	r0, r25
     ad0:	08 95       	ret

00000ad2 <__fp_pscB>:
     ad2:	00 24       	eor	r0, r0
     ad4:	0a 94       	dec	r0
     ad6:	12 16       	cp	r1, r18
     ad8:	13 06       	cpc	r1, r19
     ada:	14 06       	cpc	r1, r20
     adc:	05 06       	cpc	r0, r21
     ade:	08 95       	ret

00000ae0 <__fp_round>:
     ae0:	09 2e       	mov	r0, r25
     ae2:	03 94       	inc	r0
     ae4:	00 0c       	add	r0, r0
     ae6:	11 f4       	brne	.+4      	; 0xaec <__fp_round+0xc>
     ae8:	88 23       	and	r24, r24
     aea:	52 f0       	brmi	.+20     	; 0xb00 <__fp_round+0x20>
     aec:	bb 0f       	add	r27, r27
     aee:	40 f4       	brcc	.+16     	; 0xb00 <__fp_round+0x20>
     af0:	bf 2b       	or	r27, r31
     af2:	11 f4       	brne	.+4      	; 0xaf8 <__fp_round+0x18>
     af4:	60 ff       	sbrs	r22, 0
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <__fp_round+0x20>
     af8:	6f 5f       	subi	r22, 0xFF	; 255
     afa:	7f 4f       	sbci	r23, 0xFF	; 255
     afc:	8f 4f       	sbci	r24, 0xFF	; 255
     afe:	9f 4f       	sbci	r25, 0xFF	; 255
     b00:	08 95       	ret

00000b02 <__fp_split3>:
     b02:	57 fd       	sbrc	r21, 7
     b04:	90 58       	subi	r25, 0x80	; 128
     b06:	44 0f       	add	r20, r20
     b08:	55 1f       	adc	r21, r21
     b0a:	59 f0       	breq	.+22     	; 0xb22 <__fp_splitA+0x10>
     b0c:	5f 3f       	cpi	r21, 0xFF	; 255
     b0e:	71 f0       	breq	.+28     	; 0xb2c <__fp_splitA+0x1a>
     b10:	47 95       	ror	r20

00000b12 <__fp_splitA>:
     b12:	88 0f       	add	r24, r24
     b14:	97 fb       	bst	r25, 7
     b16:	99 1f       	adc	r25, r25
     b18:	61 f0       	breq	.+24     	; 0xb32 <__fp_splitA+0x20>
     b1a:	9f 3f       	cpi	r25, 0xFF	; 255
     b1c:	79 f0       	breq	.+30     	; 0xb3c <__fp_splitA+0x2a>
     b1e:	87 95       	ror	r24
     b20:	08 95       	ret
     b22:	12 16       	cp	r1, r18
     b24:	13 06       	cpc	r1, r19
     b26:	14 06       	cpc	r1, r20
     b28:	55 1f       	adc	r21, r21
     b2a:	f2 cf       	rjmp	.-28     	; 0xb10 <__fp_split3+0xe>
     b2c:	46 95       	lsr	r20
     b2e:	f1 df       	rcall	.-30     	; 0xb12 <__fp_splitA>
     b30:	08 c0       	rjmp	.+16     	; 0xb42 <__fp_splitA+0x30>
     b32:	16 16       	cp	r1, r22
     b34:	17 06       	cpc	r1, r23
     b36:	18 06       	cpc	r1, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	f1 cf       	rjmp	.-30     	; 0xb1e <__fp_splitA+0xc>
     b3c:	86 95       	lsr	r24
     b3e:	71 05       	cpc	r23, r1
     b40:	61 05       	cpc	r22, r1
     b42:	08 94       	sec
     b44:	08 95       	ret

00000b46 <__fp_zero>:
     b46:	e8 94       	clt

00000b48 <__fp_szero>:
     b48:	bb 27       	eor	r27, r27
     b4a:	66 27       	eor	r22, r22
     b4c:	77 27       	eor	r23, r23
     b4e:	cb 01       	movw	r24, r22
     b50:	97 f9       	bld	r25, 7
     b52:	08 95       	ret

00000b54 <__mulsf3>:
     b54:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__mulsf3x>
     b58:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_round>
     b5c:	0e 94 62 05 	call	0xac4	; 0xac4 <__fp_pscA>
     b60:	38 f0       	brcs	.+14     	; 0xb70 <__mulsf3+0x1c>
     b62:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_pscB>
     b66:	20 f0       	brcs	.+8      	; 0xb70 <__mulsf3+0x1c>
     b68:	95 23       	and	r25, r21
     b6a:	11 f0       	breq	.+4      	; 0xb70 <__mulsf3+0x1c>
     b6c:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_inf>
     b70:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_nan>
     b74:	11 24       	eor	r1, r1
     b76:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_szero>

00000b7a <__mulsf3x>:
     b7a:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_split3>
     b7e:	70 f3       	brcs	.-36     	; 0xb5c <__mulsf3+0x8>

00000b80 <__mulsf3_pse>:
     b80:	95 9f       	mul	r25, r21
     b82:	c1 f3       	breq	.-16     	; 0xb74 <__mulsf3+0x20>
     b84:	95 0f       	add	r25, r21
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	55 1f       	adc	r21, r21
     b8a:	62 9f       	mul	r22, r18
     b8c:	f0 01       	movw	r30, r0
     b8e:	72 9f       	mul	r23, r18
     b90:	bb 27       	eor	r27, r27
     b92:	f0 0d       	add	r31, r0
     b94:	b1 1d       	adc	r27, r1
     b96:	63 9f       	mul	r22, r19
     b98:	aa 27       	eor	r26, r26
     b9a:	f0 0d       	add	r31, r0
     b9c:	b1 1d       	adc	r27, r1
     b9e:	aa 1f       	adc	r26, r26
     ba0:	64 9f       	mul	r22, r20
     ba2:	66 27       	eor	r22, r22
     ba4:	b0 0d       	add	r27, r0
     ba6:	a1 1d       	adc	r26, r1
     ba8:	66 1f       	adc	r22, r22
     baa:	82 9f       	mul	r24, r18
     bac:	22 27       	eor	r18, r18
     bae:	b0 0d       	add	r27, r0
     bb0:	a1 1d       	adc	r26, r1
     bb2:	62 1f       	adc	r22, r18
     bb4:	73 9f       	mul	r23, r19
     bb6:	b0 0d       	add	r27, r0
     bb8:	a1 1d       	adc	r26, r1
     bba:	62 1f       	adc	r22, r18
     bbc:	83 9f       	mul	r24, r19
     bbe:	a0 0d       	add	r26, r0
     bc0:	61 1d       	adc	r22, r1
     bc2:	22 1f       	adc	r18, r18
     bc4:	74 9f       	mul	r23, r20
     bc6:	33 27       	eor	r19, r19
     bc8:	a0 0d       	add	r26, r0
     bca:	61 1d       	adc	r22, r1
     bcc:	23 1f       	adc	r18, r19
     bce:	84 9f       	mul	r24, r20
     bd0:	60 0d       	add	r22, r0
     bd2:	21 1d       	adc	r18, r1
     bd4:	82 2f       	mov	r24, r18
     bd6:	76 2f       	mov	r23, r22
     bd8:	6a 2f       	mov	r22, r26
     bda:	11 24       	eor	r1, r1
     bdc:	9f 57       	subi	r25, 0x7F	; 127
     bde:	50 40       	sbci	r21, 0x00	; 0
     be0:	9a f0       	brmi	.+38     	; 0xc08 <__mulsf3_pse+0x88>
     be2:	f1 f0       	breq	.+60     	; 0xc20 <__mulsf3_pse+0xa0>
     be4:	88 23       	and	r24, r24
     be6:	4a f0       	brmi	.+18     	; 0xbfa <__mulsf3_pse+0x7a>
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	bb 1f       	adc	r27, r27
     bee:	66 1f       	adc	r22, r22
     bf0:	77 1f       	adc	r23, r23
     bf2:	88 1f       	adc	r24, r24
     bf4:	91 50       	subi	r25, 0x01	; 1
     bf6:	50 40       	sbci	r21, 0x00	; 0
     bf8:	a9 f7       	brne	.-22     	; 0xbe4 <__mulsf3_pse+0x64>
     bfa:	9e 3f       	cpi	r25, 0xFE	; 254
     bfc:	51 05       	cpc	r21, r1
     bfe:	80 f0       	brcs	.+32     	; 0xc20 <__mulsf3_pse+0xa0>
     c00:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_inf>
     c04:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_szero>
     c08:	5f 3f       	cpi	r21, 0xFF	; 255
     c0a:	e4 f3       	brlt	.-8      	; 0xc04 <__mulsf3_pse+0x84>
     c0c:	98 3e       	cpi	r25, 0xE8	; 232
     c0e:	d4 f3       	brlt	.-12     	; 0xc04 <__mulsf3_pse+0x84>
     c10:	86 95       	lsr	r24
     c12:	77 95       	ror	r23
     c14:	67 95       	ror	r22
     c16:	b7 95       	ror	r27
     c18:	f7 95       	ror	r31
     c1a:	e7 95       	ror	r30
     c1c:	9f 5f       	subi	r25, 0xFF	; 255
     c1e:	c1 f7       	brne	.-16     	; 0xc10 <__mulsf3_pse+0x90>
     c20:	fe 2b       	or	r31, r30
     c22:	88 0f       	add	r24, r24
     c24:	91 1d       	adc	r25, r1
     c26:	96 95       	lsr	r25
     c28:	87 95       	ror	r24
     c2a:	97 f9       	bld	r25, 7
     c2c:	08 95       	ret

00000c2e <__udivmodsi4>:
     c2e:	a1 e2       	ldi	r26, 0x21	; 33
     c30:	1a 2e       	mov	r1, r26
     c32:	aa 1b       	sub	r26, r26
     c34:	bb 1b       	sub	r27, r27
     c36:	fd 01       	movw	r30, r26
     c38:	0d c0       	rjmp	.+26     	; 0xc54 <__udivmodsi4_ep>

00000c3a <__udivmodsi4_loop>:
     c3a:	aa 1f       	adc	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	ee 1f       	adc	r30, r30
     c40:	ff 1f       	adc	r31, r31
     c42:	a2 17       	cp	r26, r18
     c44:	b3 07       	cpc	r27, r19
     c46:	e4 07       	cpc	r30, r20
     c48:	f5 07       	cpc	r31, r21
     c4a:	20 f0       	brcs	.+8      	; 0xc54 <__udivmodsi4_ep>
     c4c:	a2 1b       	sub	r26, r18
     c4e:	b3 0b       	sbc	r27, r19
     c50:	e4 0b       	sbc	r30, r20
     c52:	f5 0b       	sbc	r31, r21

00000c54 <__udivmodsi4_ep>:
     c54:	66 1f       	adc	r22, r22
     c56:	77 1f       	adc	r23, r23
     c58:	88 1f       	adc	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	1a 94       	dec	r1
     c5e:	69 f7       	brne	.-38     	; 0xc3a <__udivmodsi4_loop>
     c60:	60 95       	com	r22
     c62:	70 95       	com	r23
     c64:	80 95       	com	r24
     c66:	90 95       	com	r25
     c68:	9b 01       	movw	r18, r22
     c6a:	ac 01       	movw	r20, r24
     c6c:	bd 01       	movw	r22, r26
     c6e:	cf 01       	movw	r24, r30
     c70:	08 95       	ret

00000c72 <atoi>:
     c72:	fc 01       	movw	r30, r24
     c74:	88 27       	eor	r24, r24
     c76:	99 27       	eor	r25, r25
     c78:	e8 94       	clt
     c7a:	21 91       	ld	r18, Z+
     c7c:	20 32       	cpi	r18, 0x20	; 32
     c7e:	e9 f3       	breq	.-6      	; 0xc7a <atoi+0x8>
     c80:	29 30       	cpi	r18, 0x09	; 9
     c82:	10 f0       	brcs	.+4      	; 0xc88 <atoi+0x16>
     c84:	2e 30       	cpi	r18, 0x0E	; 14
     c86:	c8 f3       	brcs	.-14     	; 0xc7a <atoi+0x8>
     c88:	2b 32       	cpi	r18, 0x2B	; 43
     c8a:	41 f0       	breq	.+16     	; 0xc9c <atoi+0x2a>
     c8c:	2d 32       	cpi	r18, 0x2D	; 45
     c8e:	39 f4       	brne	.+14     	; 0xc9e <atoi+0x2c>
     c90:	68 94       	set
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <atoi+0x2a>
     c94:	0e 94 57 06 	call	0xcae	; 0xcae <__mulhi_const_10>
     c98:	82 0f       	add	r24, r18
     c9a:	91 1d       	adc	r25, r1
     c9c:	21 91       	ld	r18, Z+
     c9e:	20 53       	subi	r18, 0x30	; 48
     ca0:	2a 30       	cpi	r18, 0x0A	; 10
     ca2:	c0 f3       	brcs	.-16     	; 0xc94 <atoi+0x22>
     ca4:	1e f4       	brtc	.+6      	; 0xcac <atoi+0x3a>
     ca6:	90 95       	com	r25
     ca8:	81 95       	neg	r24
     caa:	9f 4f       	sbci	r25, 0xFF	; 255
     cac:	08 95       	ret

00000cae <__mulhi_const_10>:
     cae:	7a e0       	ldi	r23, 0x0A	; 10
     cb0:	97 9f       	mul	r25, r23
     cb2:	90 2d       	mov	r25, r0
     cb4:	87 9f       	mul	r24, r23
     cb6:	80 2d       	mov	r24, r0
     cb8:	91 0d       	add	r25, r1
     cba:	11 24       	eor	r1, r1
     cbc:	08 95       	ret

00000cbe <sprintf>:
     cbe:	ae e0       	ldi	r26, 0x0E	; 14
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e5 e6       	ldi	r30, 0x65	; 101
     cc4:	f6 e0       	ldi	r31, 0x06	; 6
     cc6:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__prologue_saves__+0x1c>
     cca:	0d 89       	ldd	r16, Y+21	; 0x15
     ccc:	1e 89       	ldd	r17, Y+22	; 0x16
     cce:	86 e0       	ldi	r24, 0x06	; 6
     cd0:	8c 83       	std	Y+4, r24	; 0x04
     cd2:	1a 83       	std	Y+2, r17	; 0x02
     cd4:	09 83       	std	Y+1, r16	; 0x01
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	9f e7       	ldi	r25, 0x7F	; 127
     cda:	9e 83       	std	Y+6, r25	; 0x06
     cdc:	8d 83       	std	Y+5, r24	; 0x05
     cde:	ae 01       	movw	r20, r28
     ce0:	47 5e       	subi	r20, 0xE7	; 231
     ce2:	5f 4f       	sbci	r21, 0xFF	; 255
     ce4:	6f 89       	ldd	r22, Y+23	; 0x17
     ce6:	78 8d       	ldd	r23, Y+24	; 0x18
     ce8:	ce 01       	movw	r24, r28
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	0e 94 81 06 	call	0xd02	; 0xd02 <vfprintf>
     cf0:	ef 81       	ldd	r30, Y+7	; 0x07
     cf2:	f8 85       	ldd	r31, Y+8	; 0x08
     cf4:	e0 0f       	add	r30, r16
     cf6:	f1 1f       	adc	r31, r17
     cf8:	10 82       	st	Z, r1
     cfa:	2e 96       	adiw	r28, 0x0e	; 14
     cfc:	e4 e0       	ldi	r30, 0x04	; 4
     cfe:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__epilogue_restores__+0x1c>

00000d02 <vfprintf>:
     d02:	ab e0       	ldi	r26, 0x0B	; 11
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e7 e8       	ldi	r30, 0x87	; 135
     d08:	f6 e0       	ldi	r31, 0x06	; 6
     d0a:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__prologue_saves__>
     d0e:	6c 01       	movw	r12, r24
     d10:	7b 01       	movw	r14, r22
     d12:	8a 01       	movw	r16, r20
     d14:	fc 01       	movw	r30, r24
     d16:	17 82       	std	Z+7, r1	; 0x07
     d18:	16 82       	std	Z+6, r1	; 0x06
     d1a:	83 81       	ldd	r24, Z+3	; 0x03
     d1c:	81 ff       	sbrs	r24, 1
     d1e:	cc c1       	rjmp	.+920    	; 0x10b8 <vfprintf+0x3b6>
     d20:	ce 01       	movw	r24, r28
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	3c 01       	movw	r6, r24
     d26:	f6 01       	movw	r30, r12
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	f7 01       	movw	r30, r14
     d2c:	93 fd       	sbrc	r25, 3
     d2e:	85 91       	lpm	r24, Z+
     d30:	93 ff       	sbrs	r25, 3
     d32:	81 91       	ld	r24, Z+
     d34:	7f 01       	movw	r14, r30
     d36:	88 23       	and	r24, r24
     d38:	09 f4       	brne	.+2      	; 0xd3c <vfprintf+0x3a>
     d3a:	ba c1       	rjmp	.+884    	; 0x10b0 <vfprintf+0x3ae>
     d3c:	85 32       	cpi	r24, 0x25	; 37
     d3e:	39 f4       	brne	.+14     	; 0xd4e <vfprintf+0x4c>
     d40:	93 fd       	sbrc	r25, 3
     d42:	85 91       	lpm	r24, Z+
     d44:	93 ff       	sbrs	r25, 3
     d46:	81 91       	ld	r24, Z+
     d48:	7f 01       	movw	r14, r30
     d4a:	85 32       	cpi	r24, 0x25	; 37
     d4c:	29 f4       	brne	.+10     	; 0xd58 <vfprintf+0x56>
     d4e:	b6 01       	movw	r22, r12
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     d56:	e7 cf       	rjmp	.-50     	; 0xd26 <vfprintf+0x24>
     d58:	91 2c       	mov	r9, r1
     d5a:	21 2c       	mov	r2, r1
     d5c:	31 2c       	mov	r3, r1
     d5e:	ff e1       	ldi	r31, 0x1F	; 31
     d60:	f3 15       	cp	r31, r3
     d62:	d8 f0       	brcs	.+54     	; 0xd9a <vfprintf+0x98>
     d64:	8b 32       	cpi	r24, 0x2B	; 43
     d66:	79 f0       	breq	.+30     	; 0xd86 <vfprintf+0x84>
     d68:	38 f4       	brcc	.+14     	; 0xd78 <vfprintf+0x76>
     d6a:	80 32       	cpi	r24, 0x20	; 32
     d6c:	79 f0       	breq	.+30     	; 0xd8c <vfprintf+0x8a>
     d6e:	83 32       	cpi	r24, 0x23	; 35
     d70:	a1 f4       	brne	.+40     	; 0xd9a <vfprintf+0x98>
     d72:	23 2d       	mov	r18, r3
     d74:	20 61       	ori	r18, 0x10	; 16
     d76:	1d c0       	rjmp	.+58     	; 0xdb2 <vfprintf+0xb0>
     d78:	8d 32       	cpi	r24, 0x2D	; 45
     d7a:	61 f0       	breq	.+24     	; 0xd94 <vfprintf+0x92>
     d7c:	80 33       	cpi	r24, 0x30	; 48
     d7e:	69 f4       	brne	.+26     	; 0xd9a <vfprintf+0x98>
     d80:	23 2d       	mov	r18, r3
     d82:	21 60       	ori	r18, 0x01	; 1
     d84:	16 c0       	rjmp	.+44     	; 0xdb2 <vfprintf+0xb0>
     d86:	83 2d       	mov	r24, r3
     d88:	82 60       	ori	r24, 0x02	; 2
     d8a:	38 2e       	mov	r3, r24
     d8c:	e3 2d       	mov	r30, r3
     d8e:	e4 60       	ori	r30, 0x04	; 4
     d90:	3e 2e       	mov	r3, r30
     d92:	2a c0       	rjmp	.+84     	; 0xde8 <vfprintf+0xe6>
     d94:	f3 2d       	mov	r31, r3
     d96:	f8 60       	ori	r31, 0x08	; 8
     d98:	1d c0       	rjmp	.+58     	; 0xdd4 <vfprintf+0xd2>
     d9a:	37 fc       	sbrc	r3, 7
     d9c:	2d c0       	rjmp	.+90     	; 0xdf8 <vfprintf+0xf6>
     d9e:	20 ed       	ldi	r18, 0xD0	; 208
     da0:	28 0f       	add	r18, r24
     da2:	2a 30       	cpi	r18, 0x0A	; 10
     da4:	40 f0       	brcs	.+16     	; 0xdb6 <vfprintf+0xb4>
     da6:	8e 32       	cpi	r24, 0x2E	; 46
     da8:	b9 f4       	brne	.+46     	; 0xdd8 <vfprintf+0xd6>
     daa:	36 fc       	sbrc	r3, 6
     dac:	81 c1       	rjmp	.+770    	; 0x10b0 <vfprintf+0x3ae>
     dae:	23 2d       	mov	r18, r3
     db0:	20 64       	ori	r18, 0x40	; 64
     db2:	32 2e       	mov	r3, r18
     db4:	19 c0       	rjmp	.+50     	; 0xde8 <vfprintf+0xe6>
     db6:	36 fe       	sbrs	r3, 6
     db8:	06 c0       	rjmp	.+12     	; 0xdc6 <vfprintf+0xc4>
     dba:	8a e0       	ldi	r24, 0x0A	; 10
     dbc:	98 9e       	mul	r9, r24
     dbe:	20 0d       	add	r18, r0
     dc0:	11 24       	eor	r1, r1
     dc2:	92 2e       	mov	r9, r18
     dc4:	11 c0       	rjmp	.+34     	; 0xde8 <vfprintf+0xe6>
     dc6:	ea e0       	ldi	r30, 0x0A	; 10
     dc8:	2e 9e       	mul	r2, r30
     dca:	20 0d       	add	r18, r0
     dcc:	11 24       	eor	r1, r1
     dce:	22 2e       	mov	r2, r18
     dd0:	f3 2d       	mov	r31, r3
     dd2:	f0 62       	ori	r31, 0x20	; 32
     dd4:	3f 2e       	mov	r3, r31
     dd6:	08 c0       	rjmp	.+16     	; 0xde8 <vfprintf+0xe6>
     dd8:	8c 36       	cpi	r24, 0x6C	; 108
     dda:	21 f4       	brne	.+8      	; 0xde4 <vfprintf+0xe2>
     ddc:	83 2d       	mov	r24, r3
     dde:	80 68       	ori	r24, 0x80	; 128
     de0:	38 2e       	mov	r3, r24
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <vfprintf+0xe6>
     de4:	88 36       	cpi	r24, 0x68	; 104
     de6:	41 f4       	brne	.+16     	; 0xdf8 <vfprintf+0xf6>
     de8:	f7 01       	movw	r30, r14
     dea:	93 fd       	sbrc	r25, 3
     dec:	85 91       	lpm	r24, Z+
     dee:	93 ff       	sbrs	r25, 3
     df0:	81 91       	ld	r24, Z+
     df2:	7f 01       	movw	r14, r30
     df4:	81 11       	cpse	r24, r1
     df6:	b3 cf       	rjmp	.-154    	; 0xd5e <vfprintf+0x5c>
     df8:	98 2f       	mov	r25, r24
     dfa:	9f 7d       	andi	r25, 0xDF	; 223
     dfc:	95 54       	subi	r25, 0x45	; 69
     dfe:	93 30       	cpi	r25, 0x03	; 3
     e00:	28 f4       	brcc	.+10     	; 0xe0c <vfprintf+0x10a>
     e02:	0c 5f       	subi	r16, 0xFC	; 252
     e04:	1f 4f       	sbci	r17, 0xFF	; 255
     e06:	9f e3       	ldi	r25, 0x3F	; 63
     e08:	99 83       	std	Y+1, r25	; 0x01
     e0a:	0d c0       	rjmp	.+26     	; 0xe26 <vfprintf+0x124>
     e0c:	83 36       	cpi	r24, 0x63	; 99
     e0e:	31 f0       	breq	.+12     	; 0xe1c <vfprintf+0x11a>
     e10:	83 37       	cpi	r24, 0x73	; 115
     e12:	71 f0       	breq	.+28     	; 0xe30 <vfprintf+0x12e>
     e14:	83 35       	cpi	r24, 0x53	; 83
     e16:	09 f0       	breq	.+2      	; 0xe1a <vfprintf+0x118>
     e18:	59 c0       	rjmp	.+178    	; 0xecc <vfprintf+0x1ca>
     e1a:	21 c0       	rjmp	.+66     	; 0xe5e <vfprintf+0x15c>
     e1c:	f8 01       	movw	r30, r16
     e1e:	80 81       	ld	r24, Z
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	0e 5f       	subi	r16, 0xFE	; 254
     e24:	1f 4f       	sbci	r17, 0xFF	; 255
     e26:	88 24       	eor	r8, r8
     e28:	83 94       	inc	r8
     e2a:	91 2c       	mov	r9, r1
     e2c:	53 01       	movw	r10, r6
     e2e:	13 c0       	rjmp	.+38     	; 0xe56 <vfprintf+0x154>
     e30:	28 01       	movw	r4, r16
     e32:	f2 e0       	ldi	r31, 0x02	; 2
     e34:	4f 0e       	add	r4, r31
     e36:	51 1c       	adc	r5, r1
     e38:	f8 01       	movw	r30, r16
     e3a:	a0 80       	ld	r10, Z
     e3c:	b1 80       	ldd	r11, Z+1	; 0x01
     e3e:	36 fe       	sbrs	r3, 6
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <vfprintf+0x146>
     e42:	69 2d       	mov	r22, r9
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <vfprintf+0x14a>
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7f ef       	ldi	r23, 0xFF	; 255
     e4c:	c5 01       	movw	r24, r10
     e4e:	0e 94 6d 08 	call	0x10da	; 0x10da <strnlen>
     e52:	4c 01       	movw	r8, r24
     e54:	82 01       	movw	r16, r4
     e56:	f3 2d       	mov	r31, r3
     e58:	ff 77       	andi	r31, 0x7F	; 127
     e5a:	3f 2e       	mov	r3, r31
     e5c:	16 c0       	rjmp	.+44     	; 0xe8a <vfprintf+0x188>
     e5e:	28 01       	movw	r4, r16
     e60:	22 e0       	ldi	r18, 0x02	; 2
     e62:	42 0e       	add	r4, r18
     e64:	51 1c       	adc	r5, r1
     e66:	f8 01       	movw	r30, r16
     e68:	a0 80       	ld	r10, Z
     e6a:	b1 80       	ldd	r11, Z+1	; 0x01
     e6c:	36 fe       	sbrs	r3, 6
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <vfprintf+0x174>
     e70:	69 2d       	mov	r22, r9
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0x178>
     e76:	6f ef       	ldi	r22, 0xFF	; 255
     e78:	7f ef       	ldi	r23, 0xFF	; 255
     e7a:	c5 01       	movw	r24, r10
     e7c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <strnlen_P>
     e80:	4c 01       	movw	r8, r24
     e82:	f3 2d       	mov	r31, r3
     e84:	f0 68       	ori	r31, 0x80	; 128
     e86:	3f 2e       	mov	r3, r31
     e88:	82 01       	movw	r16, r4
     e8a:	33 fc       	sbrc	r3, 3
     e8c:	1b c0       	rjmp	.+54     	; 0xec4 <vfprintf+0x1c2>
     e8e:	82 2d       	mov	r24, r2
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	88 16       	cp	r8, r24
     e94:	99 06       	cpc	r9, r25
     e96:	b0 f4       	brcc	.+44     	; 0xec4 <vfprintf+0x1c2>
     e98:	b6 01       	movw	r22, r12
     e9a:	80 e2       	ldi	r24, 0x20	; 32
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     ea2:	2a 94       	dec	r2
     ea4:	f4 cf       	rjmp	.-24     	; 0xe8e <vfprintf+0x18c>
     ea6:	f5 01       	movw	r30, r10
     ea8:	37 fc       	sbrc	r3, 7
     eaa:	85 91       	lpm	r24, Z+
     eac:	37 fe       	sbrs	r3, 7
     eae:	81 91       	ld	r24, Z+
     eb0:	5f 01       	movw	r10, r30
     eb2:	b6 01       	movw	r22, r12
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     eba:	21 10       	cpse	r2, r1
     ebc:	2a 94       	dec	r2
     ebe:	21 e0       	ldi	r18, 0x01	; 1
     ec0:	82 1a       	sub	r8, r18
     ec2:	91 08       	sbc	r9, r1
     ec4:	81 14       	cp	r8, r1
     ec6:	91 04       	cpc	r9, r1
     ec8:	71 f7       	brne	.-36     	; 0xea6 <vfprintf+0x1a4>
     eca:	e8 c0       	rjmp	.+464    	; 0x109c <vfprintf+0x39a>
     ecc:	84 36       	cpi	r24, 0x64	; 100
     ece:	11 f0       	breq	.+4      	; 0xed4 <vfprintf+0x1d2>
     ed0:	89 36       	cpi	r24, 0x69	; 105
     ed2:	41 f5       	brne	.+80     	; 0xf24 <vfprintf+0x222>
     ed4:	f8 01       	movw	r30, r16
     ed6:	37 fe       	sbrs	r3, 7
     ed8:	07 c0       	rjmp	.+14     	; 0xee8 <vfprintf+0x1e6>
     eda:	60 81       	ld	r22, Z
     edc:	71 81       	ldd	r23, Z+1	; 0x01
     ede:	82 81       	ldd	r24, Z+2	; 0x02
     ee0:	93 81       	ldd	r25, Z+3	; 0x03
     ee2:	0c 5f       	subi	r16, 0xFC	; 252
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
     ee6:	08 c0       	rjmp	.+16     	; 0xef8 <vfprintf+0x1f6>
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	07 2e       	mov	r0, r23
     eee:	00 0c       	add	r0, r0
     ef0:	88 0b       	sbc	r24, r24
     ef2:	99 0b       	sbc	r25, r25
     ef4:	0e 5f       	subi	r16, 0xFE	; 254
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	f3 2d       	mov	r31, r3
     efa:	ff 76       	andi	r31, 0x6F	; 111
     efc:	3f 2e       	mov	r3, r31
     efe:	97 ff       	sbrs	r25, 7
     f00:	09 c0       	rjmp	.+18     	; 0xf14 <vfprintf+0x212>
     f02:	90 95       	com	r25
     f04:	80 95       	com	r24
     f06:	70 95       	com	r23
     f08:	61 95       	neg	r22
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	8f 4f       	sbci	r24, 0xFF	; 255
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	f0 68       	ori	r31, 0x80	; 128
     f12:	3f 2e       	mov	r3, r31
     f14:	2a e0       	ldi	r18, 0x0A	; 10
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	a3 01       	movw	r20, r6
     f1a:	0e 94 b4 08 	call	0x1168	; 0x1168 <__ultoa_invert>
     f1e:	88 2e       	mov	r8, r24
     f20:	86 18       	sub	r8, r6
     f22:	45 c0       	rjmp	.+138    	; 0xfae <vfprintf+0x2ac>
     f24:	85 37       	cpi	r24, 0x75	; 117
     f26:	31 f4       	brne	.+12     	; 0xf34 <vfprintf+0x232>
     f28:	23 2d       	mov	r18, r3
     f2a:	2f 7e       	andi	r18, 0xEF	; 239
     f2c:	b2 2e       	mov	r11, r18
     f2e:	2a e0       	ldi	r18, 0x0A	; 10
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	25 c0       	rjmp	.+74     	; 0xf7e <vfprintf+0x27c>
     f34:	93 2d       	mov	r25, r3
     f36:	99 7f       	andi	r25, 0xF9	; 249
     f38:	b9 2e       	mov	r11, r25
     f3a:	8f 36       	cpi	r24, 0x6F	; 111
     f3c:	c1 f0       	breq	.+48     	; 0xf6e <vfprintf+0x26c>
     f3e:	18 f4       	brcc	.+6      	; 0xf46 <vfprintf+0x244>
     f40:	88 35       	cpi	r24, 0x58	; 88
     f42:	79 f0       	breq	.+30     	; 0xf62 <vfprintf+0x260>
     f44:	b5 c0       	rjmp	.+362    	; 0x10b0 <vfprintf+0x3ae>
     f46:	80 37       	cpi	r24, 0x70	; 112
     f48:	19 f0       	breq	.+6      	; 0xf50 <vfprintf+0x24e>
     f4a:	88 37       	cpi	r24, 0x78	; 120
     f4c:	21 f0       	breq	.+8      	; 0xf56 <vfprintf+0x254>
     f4e:	b0 c0       	rjmp	.+352    	; 0x10b0 <vfprintf+0x3ae>
     f50:	e9 2f       	mov	r30, r25
     f52:	e0 61       	ori	r30, 0x10	; 16
     f54:	be 2e       	mov	r11, r30
     f56:	b4 fe       	sbrs	r11, 4
     f58:	0d c0       	rjmp	.+26     	; 0xf74 <vfprintf+0x272>
     f5a:	fb 2d       	mov	r31, r11
     f5c:	f4 60       	ori	r31, 0x04	; 4
     f5e:	bf 2e       	mov	r11, r31
     f60:	09 c0       	rjmp	.+18     	; 0xf74 <vfprintf+0x272>
     f62:	34 fe       	sbrs	r3, 4
     f64:	0a c0       	rjmp	.+20     	; 0xf7a <vfprintf+0x278>
     f66:	29 2f       	mov	r18, r25
     f68:	26 60       	ori	r18, 0x06	; 6
     f6a:	b2 2e       	mov	r11, r18
     f6c:	06 c0       	rjmp	.+12     	; 0xf7a <vfprintf+0x278>
     f6e:	28 e0       	ldi	r18, 0x08	; 8
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	05 c0       	rjmp	.+10     	; 0xf7e <vfprintf+0x27c>
     f74:	20 e1       	ldi	r18, 0x10	; 16
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <vfprintf+0x27c>
     f7a:	20 e1       	ldi	r18, 0x10	; 16
     f7c:	32 e0       	ldi	r19, 0x02	; 2
     f7e:	f8 01       	movw	r30, r16
     f80:	b7 fe       	sbrs	r11, 7
     f82:	07 c0       	rjmp	.+14     	; 0xf92 <vfprintf+0x290>
     f84:	60 81       	ld	r22, Z
     f86:	71 81       	ldd	r23, Z+1	; 0x01
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	93 81       	ldd	r25, Z+3	; 0x03
     f8c:	0c 5f       	subi	r16, 0xFC	; 252
     f8e:	1f 4f       	sbci	r17, 0xFF	; 255
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <vfprintf+0x29c>
     f92:	60 81       	ld	r22, Z
     f94:	71 81       	ldd	r23, Z+1	; 0x01
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 5f       	subi	r16, 0xFE	; 254
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	a3 01       	movw	r20, r6
     fa0:	0e 94 b4 08 	call	0x1168	; 0x1168 <__ultoa_invert>
     fa4:	88 2e       	mov	r8, r24
     fa6:	86 18       	sub	r8, r6
     fa8:	fb 2d       	mov	r31, r11
     faa:	ff 77       	andi	r31, 0x7F	; 127
     fac:	3f 2e       	mov	r3, r31
     fae:	36 fe       	sbrs	r3, 6
     fb0:	0d c0       	rjmp	.+26     	; 0xfcc <vfprintf+0x2ca>
     fb2:	23 2d       	mov	r18, r3
     fb4:	2e 7f       	andi	r18, 0xFE	; 254
     fb6:	a2 2e       	mov	r10, r18
     fb8:	89 14       	cp	r8, r9
     fba:	58 f4       	brcc	.+22     	; 0xfd2 <vfprintf+0x2d0>
     fbc:	34 fe       	sbrs	r3, 4
     fbe:	0b c0       	rjmp	.+22     	; 0xfd6 <vfprintf+0x2d4>
     fc0:	32 fc       	sbrc	r3, 2
     fc2:	09 c0       	rjmp	.+18     	; 0xfd6 <vfprintf+0x2d4>
     fc4:	83 2d       	mov	r24, r3
     fc6:	8e 7e       	andi	r24, 0xEE	; 238
     fc8:	a8 2e       	mov	r10, r24
     fca:	05 c0       	rjmp	.+10     	; 0xfd6 <vfprintf+0x2d4>
     fcc:	b8 2c       	mov	r11, r8
     fce:	a3 2c       	mov	r10, r3
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <vfprintf+0x2d6>
     fd2:	b8 2c       	mov	r11, r8
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <vfprintf+0x2d6>
     fd6:	b9 2c       	mov	r11, r9
     fd8:	a4 fe       	sbrs	r10, 4
     fda:	0f c0       	rjmp	.+30     	; 0xffa <vfprintf+0x2f8>
     fdc:	fe 01       	movw	r30, r28
     fde:	e8 0d       	add	r30, r8
     fe0:	f1 1d       	adc	r31, r1
     fe2:	80 81       	ld	r24, Z
     fe4:	80 33       	cpi	r24, 0x30	; 48
     fe6:	21 f4       	brne	.+8      	; 0xff0 <vfprintf+0x2ee>
     fe8:	9a 2d       	mov	r25, r10
     fea:	99 7e       	andi	r25, 0xE9	; 233
     fec:	a9 2e       	mov	r10, r25
     fee:	09 c0       	rjmp	.+18     	; 0x1002 <vfprintf+0x300>
     ff0:	a2 fe       	sbrs	r10, 2
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <vfprintf+0x2fe>
     ff4:	b3 94       	inc	r11
     ff6:	b3 94       	inc	r11
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <vfprintf+0x300>
     ffa:	8a 2d       	mov	r24, r10
     ffc:	86 78       	andi	r24, 0x86	; 134
     ffe:	09 f0       	breq	.+2      	; 0x1002 <vfprintf+0x300>
    1000:	b3 94       	inc	r11
    1002:	a3 fc       	sbrc	r10, 3
    1004:	11 c0       	rjmp	.+34     	; 0x1028 <vfprintf+0x326>
    1006:	a0 fe       	sbrs	r10, 0
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <vfprintf+0x314>
    100a:	b2 14       	cp	r11, r2
    100c:	88 f4       	brcc	.+34     	; 0x1030 <vfprintf+0x32e>
    100e:	28 0c       	add	r2, r8
    1010:	92 2c       	mov	r9, r2
    1012:	9b 18       	sub	r9, r11
    1014:	0e c0       	rjmp	.+28     	; 0x1032 <vfprintf+0x330>
    1016:	b2 14       	cp	r11, r2
    1018:	60 f4       	brcc	.+24     	; 0x1032 <vfprintf+0x330>
    101a:	b6 01       	movw	r22, r12
    101c:	80 e2       	ldi	r24, 0x20	; 32
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
    1024:	b3 94       	inc	r11
    1026:	f7 cf       	rjmp	.-18     	; 0x1016 <vfprintf+0x314>
    1028:	b2 14       	cp	r11, r2
    102a:	18 f4       	brcc	.+6      	; 0x1032 <vfprintf+0x330>
    102c:	2b 18       	sub	r2, r11
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <vfprintf+0x332>
    1030:	98 2c       	mov	r9, r8
    1032:	21 2c       	mov	r2, r1
    1034:	a4 fe       	sbrs	r10, 4
    1036:	10 c0       	rjmp	.+32     	; 0x1058 <vfprintf+0x356>
    1038:	b6 01       	movw	r22, r12
    103a:	80 e3       	ldi	r24, 0x30	; 48
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
    1042:	a2 fe       	sbrs	r10, 2
    1044:	17 c0       	rjmp	.+46     	; 0x1074 <vfprintf+0x372>
    1046:	a1 fc       	sbrc	r10, 1
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <vfprintf+0x34e>
    104a:	88 e7       	ldi	r24, 0x78	; 120
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <vfprintf+0x352>
    1050:	88 e5       	ldi	r24, 0x58	; 88
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	b6 01       	movw	r22, r12
    1056:	0c c0       	rjmp	.+24     	; 0x1070 <vfprintf+0x36e>
    1058:	8a 2d       	mov	r24, r10
    105a:	86 78       	andi	r24, 0x86	; 134
    105c:	59 f0       	breq	.+22     	; 0x1074 <vfprintf+0x372>
    105e:	a1 fe       	sbrs	r10, 1
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <vfprintf+0x364>
    1062:	8b e2       	ldi	r24, 0x2B	; 43
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <vfprintf+0x366>
    1066:	80 e2       	ldi	r24, 0x20	; 32
    1068:	a7 fc       	sbrc	r10, 7
    106a:	8d e2       	ldi	r24, 0x2D	; 45
    106c:	b6 01       	movw	r22, r12
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
    1074:	89 14       	cp	r8, r9
    1076:	38 f4       	brcc	.+14     	; 0x1086 <vfprintf+0x384>
    1078:	b6 01       	movw	r22, r12
    107a:	80 e3       	ldi	r24, 0x30	; 48
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
    1082:	9a 94       	dec	r9
    1084:	f7 cf       	rjmp	.-18     	; 0x1074 <vfprintf+0x372>
    1086:	8a 94       	dec	r8
    1088:	f3 01       	movw	r30, r6
    108a:	e8 0d       	add	r30, r8
    108c:	f1 1d       	adc	r31, r1
    108e:	80 81       	ld	r24, Z
    1090:	b6 01       	movw	r22, r12
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
    1098:	81 10       	cpse	r8, r1
    109a:	f5 cf       	rjmp	.-22     	; 0x1086 <vfprintf+0x384>
    109c:	22 20       	and	r2, r2
    109e:	09 f4       	brne	.+2      	; 0x10a2 <vfprintf+0x3a0>
    10a0:	42 ce       	rjmp	.-892    	; 0xd26 <vfprintf+0x24>
    10a2:	b6 01       	movw	r22, r12
    10a4:	80 e2       	ldi	r24, 0x20	; 32
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
    10ac:	2a 94       	dec	r2
    10ae:	f6 cf       	rjmp	.-20     	; 0x109c <vfprintf+0x39a>
    10b0:	f6 01       	movw	r30, r12
    10b2:	86 81       	ldd	r24, Z+6	; 0x06
    10b4:	97 81       	ldd	r25, Z+7	; 0x07
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <vfprintf+0x3ba>
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	9f ef       	ldi	r25, 0xFF	; 255
    10bc:	2b 96       	adiw	r28, 0x0b	; 11
    10be:	e2 e1       	ldi	r30, 0x12	; 18
    10c0:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__epilogue_restores__>

000010c4 <strnlen_P>:
    10c4:	fc 01       	movw	r30, r24
    10c6:	05 90       	lpm	r0, Z+
    10c8:	61 50       	subi	r22, 0x01	; 1
    10ca:	70 40       	sbci	r23, 0x00	; 0
    10cc:	01 10       	cpse	r0, r1
    10ce:	d8 f7       	brcc	.-10     	; 0x10c6 <strnlen_P+0x2>
    10d0:	80 95       	com	r24
    10d2:	90 95       	com	r25
    10d4:	8e 0f       	add	r24, r30
    10d6:	9f 1f       	adc	r25, r31
    10d8:	08 95       	ret

000010da <strnlen>:
    10da:	fc 01       	movw	r30, r24
    10dc:	61 50       	subi	r22, 0x01	; 1
    10de:	70 40       	sbci	r23, 0x00	; 0
    10e0:	01 90       	ld	r0, Z+
    10e2:	01 10       	cpse	r0, r1
    10e4:	d8 f7       	brcc	.-10     	; 0x10dc <strnlen+0x2>
    10e6:	80 95       	com	r24
    10e8:	90 95       	com	r25
    10ea:	8e 0f       	add	r24, r30
    10ec:	9f 1f       	adc	r25, r31
    10ee:	08 95       	ret

000010f0 <fputc>:
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	fb 01       	movw	r30, r22
    10fa:	23 81       	ldd	r18, Z+3	; 0x03
    10fc:	21 fd       	sbrc	r18, 1
    10fe:	03 c0       	rjmp	.+6      	; 0x1106 <fputc+0x16>
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	9f ef       	ldi	r25, 0xFF	; 255
    1104:	2c c0       	rjmp	.+88     	; 0x115e <fputc+0x6e>
    1106:	22 ff       	sbrs	r18, 2
    1108:	16 c0       	rjmp	.+44     	; 0x1136 <fputc+0x46>
    110a:	46 81       	ldd	r20, Z+6	; 0x06
    110c:	57 81       	ldd	r21, Z+7	; 0x07
    110e:	24 81       	ldd	r18, Z+4	; 0x04
    1110:	35 81       	ldd	r19, Z+5	; 0x05
    1112:	42 17       	cp	r20, r18
    1114:	53 07       	cpc	r21, r19
    1116:	44 f4       	brge	.+16     	; 0x1128 <fputc+0x38>
    1118:	a0 81       	ld	r26, Z
    111a:	b1 81       	ldd	r27, Z+1	; 0x01
    111c:	9d 01       	movw	r18, r26
    111e:	2f 5f       	subi	r18, 0xFF	; 255
    1120:	3f 4f       	sbci	r19, 0xFF	; 255
    1122:	31 83       	std	Z+1, r19	; 0x01
    1124:	20 83       	st	Z, r18
    1126:	8c 93       	st	X, r24
    1128:	26 81       	ldd	r18, Z+6	; 0x06
    112a:	37 81       	ldd	r19, Z+7	; 0x07
    112c:	2f 5f       	subi	r18, 0xFF	; 255
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	37 83       	std	Z+7, r19	; 0x07
    1132:	26 83       	std	Z+6, r18	; 0x06
    1134:	14 c0       	rjmp	.+40     	; 0x115e <fputc+0x6e>
    1136:	8b 01       	movw	r16, r22
    1138:	ec 01       	movw	r28, r24
    113a:	fb 01       	movw	r30, r22
    113c:	00 84       	ldd	r0, Z+8	; 0x08
    113e:	f1 85       	ldd	r31, Z+9	; 0x09
    1140:	e0 2d       	mov	r30, r0
    1142:	09 95       	icall
    1144:	89 2b       	or	r24, r25
    1146:	e1 f6       	brne	.-72     	; 0x1100 <fputc+0x10>
    1148:	d8 01       	movw	r26, r16
    114a:	16 96       	adiw	r26, 0x06	; 6
    114c:	8d 91       	ld	r24, X+
    114e:	9c 91       	ld	r25, X
    1150:	17 97       	sbiw	r26, 0x07	; 7
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	17 96       	adiw	r26, 0x07	; 7
    1156:	9c 93       	st	X, r25
    1158:	8e 93       	st	-X, r24
    115a:	16 97       	sbiw	r26, 0x06	; 6
    115c:	ce 01       	movw	r24, r28
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	08 95       	ret

00001168 <__ultoa_invert>:
    1168:	fa 01       	movw	r30, r20
    116a:	aa 27       	eor	r26, r26
    116c:	28 30       	cpi	r18, 0x08	; 8
    116e:	51 f1       	breq	.+84     	; 0x11c4 <__ultoa_invert+0x5c>
    1170:	20 31       	cpi	r18, 0x10	; 16
    1172:	81 f1       	breq	.+96     	; 0x11d4 <__ultoa_invert+0x6c>
    1174:	e8 94       	clt
    1176:	6f 93       	push	r22
    1178:	6e 7f       	andi	r22, 0xFE	; 254
    117a:	6e 5f       	subi	r22, 0xFE	; 254
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	af 4f       	sbci	r26, 0xFF	; 255
    1184:	b1 e0       	ldi	r27, 0x01	; 1
    1186:	3e d0       	rcall	.+124    	; 0x1204 <__ultoa_invert+0x9c>
    1188:	b4 e0       	ldi	r27, 0x04	; 4
    118a:	3c d0       	rcall	.+120    	; 0x1204 <__ultoa_invert+0x9c>
    118c:	67 0f       	add	r22, r23
    118e:	78 1f       	adc	r23, r24
    1190:	89 1f       	adc	r24, r25
    1192:	9a 1f       	adc	r25, r26
    1194:	a1 1d       	adc	r26, r1
    1196:	68 0f       	add	r22, r24
    1198:	79 1f       	adc	r23, r25
    119a:	8a 1f       	adc	r24, r26
    119c:	91 1d       	adc	r25, r1
    119e:	a1 1d       	adc	r26, r1
    11a0:	6a 0f       	add	r22, r26
    11a2:	71 1d       	adc	r23, r1
    11a4:	81 1d       	adc	r24, r1
    11a6:	91 1d       	adc	r25, r1
    11a8:	a1 1d       	adc	r26, r1
    11aa:	20 d0       	rcall	.+64     	; 0x11ec <__ultoa_invert+0x84>
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <__ultoa_invert+0x48>
    11ae:	68 94       	set
    11b0:	3f 91       	pop	r19
    11b2:	2a e0       	ldi	r18, 0x0A	; 10
    11b4:	26 9f       	mul	r18, r22
    11b6:	11 24       	eor	r1, r1
    11b8:	30 19       	sub	r19, r0
    11ba:	30 5d       	subi	r19, 0xD0	; 208
    11bc:	31 93       	st	Z+, r19
    11be:	de f6       	brtc	.-74     	; 0x1176 <__ultoa_invert+0xe>
    11c0:	cf 01       	movw	r24, r30
    11c2:	08 95       	ret
    11c4:	46 2f       	mov	r20, r22
    11c6:	47 70       	andi	r20, 0x07	; 7
    11c8:	40 5d       	subi	r20, 0xD0	; 208
    11ca:	41 93       	st	Z+, r20
    11cc:	b3 e0       	ldi	r27, 0x03	; 3
    11ce:	0f d0       	rcall	.+30     	; 0x11ee <__ultoa_invert+0x86>
    11d0:	c9 f7       	brne	.-14     	; 0x11c4 <__ultoa_invert+0x5c>
    11d2:	f6 cf       	rjmp	.-20     	; 0x11c0 <__ultoa_invert+0x58>
    11d4:	46 2f       	mov	r20, r22
    11d6:	4f 70       	andi	r20, 0x0F	; 15
    11d8:	40 5d       	subi	r20, 0xD0	; 208
    11da:	4a 33       	cpi	r20, 0x3A	; 58
    11dc:	18 f0       	brcs	.+6      	; 0x11e4 <__ultoa_invert+0x7c>
    11de:	49 5d       	subi	r20, 0xD9	; 217
    11e0:	31 fd       	sbrc	r19, 1
    11e2:	40 52       	subi	r20, 0x20	; 32
    11e4:	41 93       	st	Z+, r20
    11e6:	02 d0       	rcall	.+4      	; 0x11ec <__ultoa_invert+0x84>
    11e8:	a9 f7       	brne	.-22     	; 0x11d4 <__ultoa_invert+0x6c>
    11ea:	ea cf       	rjmp	.-44     	; 0x11c0 <__ultoa_invert+0x58>
    11ec:	b4 e0       	ldi	r27, 0x04	; 4
    11ee:	a6 95       	lsr	r26
    11f0:	97 95       	ror	r25
    11f2:	87 95       	ror	r24
    11f4:	77 95       	ror	r23
    11f6:	67 95       	ror	r22
    11f8:	ba 95       	dec	r27
    11fa:	c9 f7       	brne	.-14     	; 0x11ee <__ultoa_invert+0x86>
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	61 05       	cpc	r22, r1
    1200:	71 05       	cpc	r23, r1
    1202:	08 95       	ret
    1204:	9b 01       	movw	r18, r22
    1206:	ac 01       	movw	r20, r24
    1208:	0a 2e       	mov	r0, r26
    120a:	06 94       	lsr	r0
    120c:	57 95       	ror	r21
    120e:	47 95       	ror	r20
    1210:	37 95       	ror	r19
    1212:	27 95       	ror	r18
    1214:	ba 95       	dec	r27
    1216:	c9 f7       	brne	.-14     	; 0x120a <__ultoa_invert+0xa2>
    1218:	62 0f       	add	r22, r18
    121a:	73 1f       	adc	r23, r19
    121c:	84 1f       	adc	r24, r20
    121e:	95 1f       	adc	r25, r21
    1220:	a0 1d       	adc	r26, r0
    1222:	08 95       	ret

00001224 <__prologue_saves__>:
    1224:	2f 92       	push	r2
    1226:	3f 92       	push	r3
    1228:	4f 92       	push	r4
    122a:	5f 92       	push	r5
    122c:	6f 92       	push	r6
    122e:	7f 92       	push	r7
    1230:	8f 92       	push	r8
    1232:	9f 92       	push	r9
    1234:	af 92       	push	r10
    1236:	bf 92       	push	r11
    1238:	cf 92       	push	r12
    123a:	df 92       	push	r13
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	ca 1b       	sub	r28, r26
    124e:	db 0b       	sbc	r29, r27
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	09 94       	ijmp

0000125c <__epilogue_restores__>:
    125c:	2a 88       	ldd	r2, Y+18	; 0x12
    125e:	39 88       	ldd	r3, Y+17	; 0x11
    1260:	48 88       	ldd	r4, Y+16	; 0x10
    1262:	5f 84       	ldd	r5, Y+15	; 0x0f
    1264:	6e 84       	ldd	r6, Y+14	; 0x0e
    1266:	7d 84       	ldd	r7, Y+13	; 0x0d
    1268:	8c 84       	ldd	r8, Y+12	; 0x0c
    126a:	9b 84       	ldd	r9, Y+11	; 0x0b
    126c:	aa 84       	ldd	r10, Y+10	; 0x0a
    126e:	b9 84       	ldd	r11, Y+9	; 0x09
    1270:	c8 84       	ldd	r12, Y+8	; 0x08
    1272:	df 80       	ldd	r13, Y+7	; 0x07
    1274:	ee 80       	ldd	r14, Y+6	; 0x06
    1276:	fd 80       	ldd	r15, Y+5	; 0x05
    1278:	0c 81       	ldd	r16, Y+4	; 0x04
    127a:	1b 81       	ldd	r17, Y+3	; 0x03
    127c:	aa 81       	ldd	r26, Y+2	; 0x02
    127e:	b9 81       	ldd	r27, Y+1	; 0x01
    1280:	ce 0f       	add	r28, r30
    1282:	d1 1d       	adc	r29, r1
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	ed 01       	movw	r28, r26
    1290:	08 95       	ret

00001292 <_exit>:
    1292:	f8 94       	cli

00001294 <__stop_program>:
    1294:	ff cf       	rjmp	.-2      	; 0x1294 <__stop_program>
